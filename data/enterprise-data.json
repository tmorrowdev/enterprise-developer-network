{
  "code_standards": {
    "javascript": {
      "eslint_rules": {
        "max_line_length": 100,
        "no_console_log": "error",
        "prefer_const": "error",
        "no_var": "error"
      },
      "security_rules": {
        "no_hardcoded_secrets": "error",
        "validate_user_input": "warning",
        "use_https_only": "error"
      }
    }
  },
  "design_system": {
    "schemaVersion": "1.0.0",
    "readme": "",
    "modules": [
      {
        "kind": "javascript-module",
        "path": "components/accordion/accordion.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; //## ACCORDION :host { display: block; } .cre8-c-accordion { --cre8-accordion-border-top: var(--cre8-border-width-none); --cre8-accordion-border-bottom: var(--cre8-border-width-none); ::slotted(cre8-accordion:not(:last-child)) { --cre8-accordion-border-bottom: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-default); } border: var(--cre8-border-width-none); border-radius: var(--cre8-border-radius-none); } .cre8-c-inner-divider { ::slotted(cre8-accordion-item:last-child) { border-bottom: var(--cre8-border-width-none); } ::slotted(cre8-accordion-item:not(first-child)) { border-top: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-default); } ::slotted(cre8-accordion-item:first-child) { border-top: var(--cre8-border-width-none); } } .cre8-c-accordion--border-rectangle { border: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-default); border-radius: var(--cre8-border-radius-none); } .cre8-c-accordion--border-rounded-bottom { border: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-default); border-radius: 0 0 var(--cre8-border-radius-default) var(--cre8-border-radius-default); } .cre8-c-accordion--border-rounded { border: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-default); border-radius: var(--cre8-border-radius-default); } .cre8-c-accordiong-group--list { list-style: none; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/accordion/accordion.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/accordion/accordion.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "meta",
            "default": "{ title: 'cre8 Components/Accordion/Accordion', component: 'cre8-accordion', argTypes: { borderType: { options: ['none','rectangle', 'rounded-bottom', 'rounded'], control: {type: 'radio'} }, hasDivider: { options: [true, false], control: {type: 'radio'} } }, render: (args) => html` <cre8-accordion ${spread(args)}> <cre8-accordion-item heading=\"Accordion Item Heading\" isActive> <span >Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</span > </cre8-accordion-item> <cre8-accordion-item heading=\"Accordion Item Heading\" > <span >Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</span > </cre8-accordion-item> <cre8-accordion-item heading=\"Accordion Item Heading\" > <span >Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</span > </cre8-accordion-item> </cre8-accordion> `, } satisfies Meta<Props>"
          },
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "Story"
            },
            "default": "{args:{ borderType: 'none', hasDivider: false }}"
          },
          {
            "kind": "variable",
            "name": "DefaultDivider",
            "type": {
              "text": "Story"
            },
            "default": "{args:{ borderType: 'none', hasDivider: true }}"
          },
          {
            "kind": "variable",
            "name": "Rectangle",
            "type": {
              "text": "Story"
            },
            "default": "{args:{ borderType: 'rectangle', hasDivider: false }}"
          },
          {
            "kind": "variable",
            "name": "RectangleDivider",
            "type": {
              "text": "Story"
            },
            "default": "{args:{ borderType: 'rectangle', hasDivider: true }}"
          },
          {
            "kind": "variable",
            "name": "RoundedBottom",
            "type": {
              "text": "Story"
            },
            "default": "{args:{ borderType: 'rounded-bottom', hasDivider: false }}"
          },
          {
            "kind": "variable",
            "name": "RoundedBottomDivider",
            "type": {
              "text": "Story"
            },
            "default": "{args:{ borderType: 'rounded-bottom', hasDivider: true }}"
          },
          {
            "kind": "variable",
            "name": "Rounded",
            "type": {
              "text": "Story"
            },
            "default": "{args:{ borderType: 'rounded', hasDivider: false }}"
          },
          {
            "kind": "variable",
            "name": "RoundedDivider",
            "type": {
              "text": "Story"
            },
            "default": "{args:{ borderType: 'rounded', hasDivider: true }}"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "meta",
              "module": "components/accordion/accordion.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/accordion/accordion.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "DefaultDivider",
            "declaration": {
              "name": "DefaultDivider",
              "module": "components/accordion/accordion.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Rectangle",
            "declaration": {
              "name": "Rectangle",
              "module": "components/accordion/accordion.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "RectangleDivider",
            "declaration": {
              "name": "RectangleDivider",
              "module": "components/accordion/accordion.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "RoundedBottom",
            "declaration": {
              "name": "RoundedBottom",
              "module": "components/accordion/accordion.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "RoundedBottomDivider",
            "declaration": {
              "name": "RoundedBottomDivider",
              "module": "components/accordion/accordion.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Rounded",
            "declaration": {
              "name": "Rounded",
              "module": "components/accordion/accordion.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "RoundedDivider",
            "declaration": {
              "name": "RoundedDivider",
              "module": "components/accordion/accordion.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/accordion/accordion.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The component is a vertically stacked list of headers that reveal or hide sections of related content on a page.\nThe header title gives the user a high level overview of the content allowing the user to decide\nwhich sections to expand for the information.\n\nAccordion contains Accordion Items as children. This component is the wrapper for grouping related accordion items.\n\nUsers can select different border types: default (no border), rectangle, rounded bottom, and rounded.",
            "name": "Cre8Accordion",
            "members": [
              {
                "kind": "field",
                "name": "borderType",
                "type": {
                  "text": "'rectangle' | 'rounded-bottom' | 'rounded' | 'none' | undefined"
                },
                "description": "borderType",
                "attribute": "borderType"
              },
              {
                "kind": "field",
                "name": "hasDivider",
                "type": {
                  "text": "boolean"
                },
                "default": "false",
                "description": "\nWhen it is true, the inner dividers are displayed;\nif it is false, the inner dividers are not displayed",
                "attribute": "hasDivider",
                "reflects": true
              }
            ],
            "attributes": [
              {
                "name": "borderType",
                "type": {
                  "text": "'rectangle' | 'rounded-bottom' | 'rounded' | 'none' | undefined"
                },
                "description": "borderType",
                "fieldName": "borderType"
              },
              {
                "name": "hasDivider",
                "type": {
                  "text": "boolean"
                },
                "default": "false",
                "description": "\nWhen it is true, the inner dividers are displayed;\nif it is false, the inner dividers are not displayed",
                "fieldName": "hasDivider"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-accordion",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Accordion",
            "declaration": {
              "name": "Cre8Accordion",
              "module": "components/accordion/accordion.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-accordion",
            "declaration": {
              "name": "Cre8Accordion",
              "module": "components/accordion/accordion.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Accordion",
              "module": "components/accordion/accordion.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/accordion-item/accordion-item.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * Accordion Item panel button * 1) Icon rotating on open was causing scrollbar to continuously appear/disappear * during the animation, overflow-x: hidden; prevents this from happening */ :host { display: block; ::slotted(*) { text-align: left; width: 100%; } } .cre8-c-accordion-item { border-bottom: var(--cre8-accordion-item-border-bottom); border-radius: var(--cre8-border-radius-none); --cre8-u-icon-display: flex; --cre8-u-icon-align-items: center; --cre8-u-icon-justify-content: center; padding: size(3) size(1); } .cre8-c-accordion-item--small cre8-heading button { @include cre8-typography-title-default(); } .cre8-c-accordion-item--large cre8-heading button { @include cre8-typography-title-large(); } .cre8-c-accordion-item__body { margin-right: size(0); margin-left: size(0); padding: size(0); overflow: hidden; visibility: hidden; transition: height var(--cre8-anim-fade-quick) var(--cre8-anim-ease), visibility var(--cre8-anim-fade-quick) var(--cre8-anim-ease); .cre8-c-accordion-item.cre8-is-active & { visibility: visible; } } .cre8-c-accordion-item__body-inner { display: flex; @include cre8-typography-body-default(); padding: size(1) size(6) size(0) size(1); } cre8-icon { display: flex; align-items: center; justify-content: center; height: size(3); min-height: size(3); min-width: size(3); transition: transform var(--cre8-anim-fade-quick) var(--cre8-anim-ease); width: size(3); .cre8-c-accordion-item.cre8-is-active & { transform: rotate(180deg); } } .cre8-c-accordion-item__icon { align-items: center; background: var(--cre8-color-bg-brand-strong); border-radius: var(--cre8-border-radius-round); color: var(--cre8-color-content-knockout); display: flex; height: size(4); justify-content: center; margin-left: size(1); margin-right: size(0.25); min-height: size(4); min-width: size(4); width: size(4); .cre8-c-accordion-item.cre8-is-active & { background: var(--cre8-color-button-secondary-bg); border: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-button-secondary-border); color: var(--cre8-color-button-secondary-content); &:hover { border-color: var(--cre8-color-button-secondary-border-hover); background-color: var(--cre8-color-button-secondary-bg-hover); color: var(--cre8-color-button-secondary-content-hover); } &:focus { border-radius: var(--cre8-border-radius-default); box-shadow: size(0) size(0) size(0) size(0.25) var(--cre8-color-border-active-outline); outline: none; .cre8-c-accordion-item__icon { border-color: var(--cre8-color-button-secondary-border-active); color: var(--cre8-color-button-secondary-content-active); background-color: var(--cre8-color-button-secondary-bg-active); } .cre8-c-accordion-item__tertiary-icon { border-color: var(--cre8-color-border-transparent); color: var(--cre8-color-button-tertiary-content-active); background-color: var(--cre8-color-bg-transparent); } } } } .cre8-c-accordion-item__button { color: var(--cre8-color-content-default); display: block; appearance: none; background-color: var(--cre8-color-bg-transparent); border: var(--cre8-border-width-none); cursor: pointer; padding: size(0.5) size(1); overflow-x: hidden; transition: color var(--cre8-anim-fade-quick) var(--cre8-anim-ease); width: 100%; &.cre8-brand-color { color: var(--cre8-color-content-brand-strong); } &.cre8-u-justify-content-start { justify-content: flex-start; .cre8-c-accordion-item__icon-before { margin-left: size(0); } } &:hover { .cre8-c-accordion-item__icon { border-color: var(--cre8-color-button-primary-border-hover); background-color: var(--cre8-color-button-primary-bg-hover); color: var(--cre8-color-button-primary-content-hover); .cre8-c-accordion-item.cre8-is-active & { border-color: var(--cre8-color-button-secondary-border-hover); background-color: var(--cre8-color-button-secondary-bg-hover); color: var(--cre8-color-button-secondary-content-hover); } } .cre8-c-accordion-item__tertiary-icon { border-color: var(--cre8-color-border-transparent); color: var(--cre8-color-button-tertiary-content-hover); background-color: var(--cre8-color-bg-transparent); } } &:focus { border-radius: var(--cre8-border-radius-default); box-shadow: size(0) size(0) size(0) size(0.25) var(--cre8-color-border-active-outline); outline: none; .cre8-c-accordion-item__icon { border-color: var(--cre8-color-button-primary-border-active); color: var(--cre8-color-button-primary-content-active); background-color: var(--cre8-color-button-primary-bg-active); } .cre8-c-accordion-item__tertiary-icon { border-color: var(--cre8-color-border-transparent); color: var(--cre8-color-button-tertiary-content-active); background-color: var(--cre8-color-bg-transparent); } } } .cre8-c-accordion-item--icon-before { .cre8-c-accordion-item__body { margin-left: size(5); } } .cre8-c-accordion-item__icon-before { margin-right: size(1.5); h4[slot='header'] { display: block; pointer-events: none; } } .cre8-c-accordion-item__button slot { display: contents; text-align: initial; } .cre8-c-accordion-item--icon-before-heading-text{ display: flex; text-align: left; flex-direction: row; justify-content: flex-start; align-items: center; width: 100%; min-width: 100% } .cre8-c-accordion-item--icon-after-heading-text{ display: flex; text-align: left; flex-direction: row; justify-content: space-between; align-items: center; width: 100%; min-width: 100% } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/accordion-item/accordion-item.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/accordion-item/accordion-item.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "meta",
            "default": "{ title: 'cre8 Components/Accordion/Accordion Item', component: 'cre8-accordion-item', argTypes: { heading: { control: {type: 'text'} }, iconBefore: { control: {type: 'boolean'} }, tertiaryIcon: { control: {type: 'boolean'} }, brandHeader: { control: {type: 'boolean'} }, size: { defaultValue: 'sm', options: ['sm', 'lg'], control: {type: 'radio'} }, headingTagVariant: { defaultValue: 'h4', options: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'], controls: {type: 'select'} } }, args: { heading: 'Accordion Item Heading', iconBefore: undefined, tertiaryIcon: undefined, brandHeader: undefined, size: undefined, headingTagVariant: undefined }, render: ({...args}) => html` <cre8-accordion-item ${spread(args)} isActive> <span >Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</span > </cre8-accordion-item>`, } satisfies Meta<Props>"
          },
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "Story"
            },
            "default": "{}"
          },
          {
            "kind": "variable",
            "name": "IconBefore",
            "type": {
              "text": "Story"
            },
            "default": "{args: { heading: 'Accordion Item Header', iconBefore: true, brandHeader: false, }}"
          },
          {
            "kind": "variable",
            "name": "TertiaryIcon",
            "type": {
              "text": "Story"
            },
            "default": "{args: { heading: 'Accordion Item Header', tertiaryIcon: true }}"
          },
          {
            "kind": "variable",
            "name": "TertiaryIconBefore",
            "type": {
              "text": "Story"
            },
            "default": "{args: { heading: 'Accordion Item Header', tertiaryIcon: true, iconBefore: true, brandHeader: false }}"
          },
          {
            "kind": "variable",
            "name": "SizeLarge",
            "type": {
              "text": "Story"
            },
            "default": "{args: { heading: 'Accordion Item Header', size: 'lg', brandHeader: false }}"
          },
          {
            "kind": "variable",
            "name": "HeadingTagH2",
            "type": {
              "text": "Story"
            },
            "default": "{args: { heading: 'Accordion Item Header', headingTagVariant: 'h2' }}"
          },
          {
            "kind": "variable",
            "name": "BrandColoredHeader",
            "type": {
              "text": "Story"
            },
            "default": "{args: { heading: 'Accordion Item Header', size: 'sm', brandHeader: true }}"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "meta",
              "module": "components/accordion-item/accordion-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/accordion-item/accordion-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconBefore",
            "declaration": {
              "name": "IconBefore",
              "module": "components/accordion-item/accordion-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TertiaryIcon",
            "declaration": {
              "name": "TertiaryIcon",
              "module": "components/accordion-item/accordion-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TertiaryIconBefore",
            "declaration": {
              "name": "TertiaryIconBefore",
              "module": "components/accordion-item/accordion-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SizeLarge",
            "declaration": {
              "name": "SizeLarge",
              "module": "components/accordion-item/accordion-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "HeadingTagH2",
            "declaration": {
              "name": "HeadingTagH2",
              "module": "components/accordion-item/accordion-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "BrandColoredHeader",
            "declaration": {
              "name": "BrandColoredHeader",
              "module": "components/accordion-item/accordion-item.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/accordion-item/accordion-item.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "\nThe accordion item component delivers large amounts of content in a small space\nthrough progressive disclosure. That is, the user gets key details about the\nunderlying content and can choose to expand that content within the constraints\nof the accordion item. Accordion Items work especially well on mobile interfaces or\nwhenever vertical space is at a premium.\n\n## HOW TO USE\nAvoid “nested” accordion items—that is, collapsible content within collapsible content.\nThis type of pattern goes against UX best practices.\n\nThe Cre8 accordion item header allows for two sizes:\n'sm' [cre8-typography-title-default] or 'lg' [cre8-typography-title-large]\n\nA chevron is used to indicate the “expand/collapse” action, though the entire\nheader area is clickable for the same action.\n\n**NOTE**: The header of the accordion item uses h tags so be sure to choose the headingTagVariant that\nfits into the hierarchy of your html page layout. THIS WILL NOT CHANGE THE APPEARANCE OF THE HEADER.",
            "name": "Cre8AccordionItem",
            "cssParts": [
              {
                "description": "The container around the interactive header.",
                "name": "::part('header')"
              },
              {
                "description": "The button containing the header text and the animated icon.",
                "name": "::part('button')"
              },
              {
                "description": "The animated icon that revolves on click.",
                "name": "::part('icon')"
              },
              {
                "description": "The container around the expanding body section.",
                "name": "::part('body')"
              },
              {
                "description": "The container around the slot into which any user provided HTML is inserted.",
                "name": "::part('body-inner')"
              }
            ],
            "slots": [
              {
                "description": "body of the accordion item will be any valid html inserted between the cre8-accordion-item opening and closing tags.",
                "name": "The"
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "isActive",
                "type": {
                  "text": "boolean"
                },
                "default": "false",
                "description": "\nWhen true, the Accordion Item is opens, when false it closes;",
                "attribute": "isActive",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "accordionItemId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "\nOptional custom id for the accordion item, if one is not set, a random id is generated for you.",
                "attribute": "accordionItemId",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "iconBefore",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "\nControls the positioning of the dropdown icon in relation to the text, true puts the icon before the text\nand false/undefined default the icon to the opposite side of the accordion item",
                "attribute": "iconBefore",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "tertiaryIcon",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "\nControls the appearance  of dropdown icon as being an icon-only button. true renders the tertiary variant and\nfalse/undefined renders the default secondary appearance.",
                "attribute": "tertiaryIcon",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "size",
                "type": {
                  "text": "'sm' | 'lg'"
                },
                "default": "'sm'",
                "description": "\nUsers can choose between two header sizes:  'sm' [title-default] or 'lg' [title-large].",
                "attribute": "size",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "headingTagVariant",
                "type": {
                  "text": "'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'"
                },
                "default": "'h3'",
                "description": "\nPurely meant to help the user structure the HTML page hierarchy. Does not change the\nheader size. Defaults to 'h3'",
                "attribute": "headingTagVariant",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "heading",
                "type": {
                  "text": "string"
                },
                "description": "\nControls the text content of the Accordion Item heading.",
                "attribute": "heading"
              },
              {
                "kind": "field",
                "name": "brandHeader",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "\nControls whether the header takes on the theme's 'brand-strong' color",
                "attribute": "brandHeader"
              },
              {
                "kind": "field",
                "name": "_ariaControls",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "description": "\nThe aria attribute to which is assigned the id of the details section which is revealed via interaction\nwith the header.",
                "default": "`cre8-accordion-item-details-${randomId}`",
                "attribute": "aria-controls"
              },
              {
                "kind": "field",
                "name": "_height",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "description": "\nPrivate internal state which indicates the current _height of the accordion item panel."
              },
              {
                "kind": "field",
                "name": "_fullyOpen",
                "type": {
                  "text": "boolean | undefined"
                },
                "privacy": "private",
                "description": "\nPrivate internal state which Indicates if the accordion item panel is completely open."
              },
              {
                "kind": "method",
                "name": "_setContentHeight",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_toggleAccordionItem",
                "privacy": "private"
              }
            ],
            "attributes": [
              {
                "name": "isActive",
                "type": {
                  "text": "boolean"
                },
                "default": "false",
                "description": "\nWhen true, the Accordion Item is opens, when false it closes;",
                "fieldName": "isActive"
              },
              {
                "name": "accordionItemId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "\nOptional custom id for the accordion item, if one is not set, a random id is generated for you.",
                "fieldName": "accordionItemId"
              },
              {
                "name": "iconBefore",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "\nControls the positioning of the dropdown icon in relation to the text, true puts the icon before the text\nand false/undefined default the icon to the opposite side of the accordion item",
                "fieldName": "iconBefore"
              },
              {
                "name": "tertiaryIcon",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "\nControls the appearance  of dropdown icon as being an icon-only button. true renders the tertiary variant and\nfalse/undefined renders the default secondary appearance.",
                "fieldName": "tertiaryIcon"
              },
              {
                "name": "size",
                "type": {
                  "text": "'sm' | 'lg'"
                },
                "default": "'sm'",
                "description": "\nUsers can choose between two header sizes:  'sm' [title-default] or 'lg' [title-large].",
                "fieldName": "size"
              },
              {
                "name": "headingTagVariant",
                "type": {
                  "text": "'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'"
                },
                "default": "'h3'",
                "description": "\nPurely meant to help the user structure the HTML page hierarchy. Does not change the\nheader size. Defaults to 'h3'",
                "fieldName": "headingTagVariant"
              },
              {
                "name": "heading",
                "type": {
                  "text": "string"
                },
                "description": "\nControls the text content of the Accordion Item heading.",
                "fieldName": "heading"
              },
              {
                "name": "brandHeader",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "\nControls whether the header takes on the theme's 'brand-strong' color",
                "fieldName": "brandHeader"
              },
              {
                "name": "aria-controls",
                "type": {
                  "text": "string"
                },
                "description": "\nThe aria attribute to which is assigned the id of the details section which is revealed via interaction\nwith the header.",
                "default": "`cre8-accordion-item-details-${randomId}`",
                "fieldName": "_ariaControls"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-accordion-item",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8AccordionItem",
            "declaration": {
              "name": "Cre8AccordionItem",
              "module": "components/accordion-item/accordion-item.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-accordion-item",
            "declaration": {
              "name": "Cre8AccordionItem",
              "module": "components/accordion-item/accordion-item.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8AccordionItem",
              "module": "components/accordion-item/accordion-item.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/alert/alert.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; dialog { border: none; width: 100%; } .cre8-c-alert { padding: var(--cre8-spacing-16); border-width: var(--cre8-border-width-default); border-style: var(--cre8-border-style-default); border-radius: var(--cre8-border-radius-default); .cre8-c-alert__container { display: flex; gap: var(--cre8-spacing-8); position: relative; .cre8-c-alert__message-container { color: var(--cre8-color-content-knockout); display: flex; flex-direction: column; .cre8-c-alert__heading-container { @include cre8-typography-title-small; } .cre8-c-alert__body-container { @include cre8-typography-body-small; padding-bottom: var(--cre8-spacing-8); } .cre8-c-alert__footer-container { padding: 0; } } } .cre8-c-alert__close-btn { position: absolute; top: -10px; right: 0px; } &.cre8-c-alert--emphasis-subtle { .cre8-c-alert__message-container { color: var(--cre8-color-content-default); } } &.cre8-c-alert--banner { border-radius: 0; border: none; } &.cre8-c-alert--warning { .cre8-c-alert__message-container { color: var(--cre8-color-content-default); } } } .cre8-c-alert--standalone { border-radius: var(--cre8-border-radius-default); width: size(45); .cre8-c-alert__container { display: flex; gap: var(--cre8-spacing-8); position: relative; } } .cre8-c-alert__icon { height: var(--cre8-spacing-16); min-height: var(--cre8-spacing-16); width: var(--cre8-spacing-16); min-width: var(--cre8-spacing-16); } .cre8-c-alert--info, .cre8-c-alert--success, .cre8-c-alert--error, .cre8-c-alert--neutral, .cre8-c-alert--notification { color: var(--cre8-color-content-knockout); } /** * Alert info */ .cre8-c-alert--info { background: var(--cre8-color-bg-info-strong); border-color: var(--cre8-color-border-info); &.cre8-c-alert--emphasis-subtle { background: var(--cre8-color-bg-info); color: var(--cre8-color-content-info-icon); } } /** * Alert warning */ .cre8-c-alert--warning { background: var(--cre8-color-bg-warning-strong); border-color: var(--cre8-color-border-warning); color: var(--cre8-color-content-default); &.cre8-c-alert--emphasis-subtle { background: var(--cre8-color-bg-warning); } } /** * Alert success */ .cre8-c-alert--success { background: var(--cre8-color-bg-success-strong); border-color: var(--cre8-color-border-success); &.cre8-c-alert--emphasis-subtle { background: var(--cre8-color-bg-success); color: var(--cre8-color-content-success-icon); } } /** * Alert error */ .cre8-c-alert--error { background: var(--cre8-color-bg-error-strong); border-color: var(--cre8-color-border-error); &.cre8-c-alert--emphasis-subtle { background: var(--cre8-color-bg-error); color: var(--cre8-color-content-error-icon); } } /** * Alert neutral */ .cre8-c-alert--neutral { background: var(--cre8-color-bg-strong); border-color: var(--cre8-color-border-neutral); &.cre8-c-alert--emphasis-subtle { background: var(--cre8-color-bg-subtle); color: var(--cre8-color-content-default); } } /** * Alert notification */ .cre8-c-alert--notification { background: var(--cre8-color-bg-attention-strong); border-color: var(--cre8-color-border-attention); &.cre8-c-alert--emphasis-subtle { background: var(--cre8-color-bg-subtle); color: var(--cre8-color-content-attention-icon); } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/alert/alert.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/alert/alert.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'info', variant: 'standalone', headerText: 'Default Alert', bodyText: 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit.', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', }, }"
          },
          {
            "kind": "variable",
            "name": "DefaultWithLink",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'info', variant: 'standalone', emphasis: 'strong', headerText: 'Default Alert With Link', bodyText: 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit.', ctaBody: '<cre8-link slot=\"cta\" href=\"#\" inverted=\"true\">Link</cre8-link>', }, }"
          },
          {
            "kind": "variable",
            "name": "DefaultNotDismissible",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'info', variant: 'standalone', headerText: 'Default Not Dismissible', bodyText: 'Message text', notDismissible: true, }, }"
          },
          {
            "kind": "variable",
            "name": "SubtleErrorStandAlone",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'error', variant: 'standalone', headerText: 'Subtle Error Stand Alone', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "SubtleInfoStandAlone",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'info', variant: 'standalone', headerText: 'Subtle Info Stand Alone', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "SubtleNotificationStandAlone",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'notification', variant: 'standalone', headerText: 'Subtle Notification Stand Alone', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "SubtleNeutralStandAlone",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'neutral', variant: 'standalone', headerText: 'Subtle Neutral Stand Alone', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "SubtleWarningStandAlone",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'warning', variant: 'standalone', headerText: 'Subtle Warning Stand Alone', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "SubtleSuccessStandAlone",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'success', variant: 'standalone', headerText: 'Subtle Success Stand Alone', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "StrongErrorStandAlone",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'error', variant: 'standalone', emphasis: 'strong', headerText: 'Strong Error Stand Alone', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "StrongInfoStandAlone",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'info', variant: 'standalone', emphasis: 'strong', headerText: 'Strong Info Stand Alone', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "StrongNotificationStandAlone",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'notification', variant: 'standalone', emphasis: 'strong', headerText: 'Strong Notification Stand Alone', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "StrongNeutralStandAlone",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'neutral', variant: 'standalone', emphasis: 'strong', headerText: 'Strong Neutral Stand Alone', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "StrongWarningStandAlone",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'warning', variant: 'standalone', emphasis: 'strong', headerText: 'Strong Warning Stand Alone', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "StrongSuccessStandAlone",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'success', variant: 'standalone', emphasis: 'strong', headerText: 'Strong Success Stand Alone', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "SubtleErrorBanner",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'error', variant: 'banner', headerText: 'Subtle Error Banner', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "SubtleInfoBanner",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'info', variant: 'banner', headerText: 'Subtle Info Banner', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "SubtleNotificationBanner",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'notification', variant: 'banner', headerText: 'Subtle Notification Banner', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "SubtleNeutralBanner",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'neutral', variant: 'banner', headerText: 'Subtle Neutral Banner', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "SubtleWarningBanner",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'warning', variant: 'banner', headerText: 'Subtle Warning Banner', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "SubtleSuccessBanner",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'success', variant: 'banner', headerText: 'Subtle Success Banner', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "StrongErrorBanner",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'error', variant: 'banner', emphasis: 'strong', headerText: 'Strong Error Banner', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "StrongInfoBanner",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'info', variant: 'banner', emphasis: 'strong', headerText: 'Strong Info Banner', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "StrongNotificationBanner",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'notification', variant: 'banner', emphasis: 'strong', headerText: 'Strong Notification Banner', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "StrongNeutralBanner",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'neutral', variant: 'banner', emphasis: 'strong', headerText: 'Strong Neutral Banner', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "StrongWarningBanner",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'warning', variant: 'banner', emphasis: 'strong', headerText: 'Strong Warning Banner', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "StrongSuccessBanner",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'success', variant: 'banner', emphasis: 'strong', headerText: 'Strong Success Banner', bodyText: 'Message text', ctaBody: '<cre8-button variant=\"secondary\" slot=\"cta\" text=\"Button\" size=\"sm\" neutral></cre8-button>', } }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "DefaultWithLink",
            "declaration": {
              "name": "DefaultWithLink",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "DefaultNotDismissible",
            "declaration": {
              "name": "DefaultNotDismissible",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SubtleErrorStandAlone",
            "declaration": {
              "name": "SubtleErrorStandAlone",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SubtleInfoStandAlone",
            "declaration": {
              "name": "SubtleInfoStandAlone",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SubtleNotificationStandAlone",
            "declaration": {
              "name": "SubtleNotificationStandAlone",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SubtleNeutralStandAlone",
            "declaration": {
              "name": "SubtleNeutralStandAlone",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SubtleWarningStandAlone",
            "declaration": {
              "name": "SubtleWarningStandAlone",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SubtleSuccessStandAlone",
            "declaration": {
              "name": "SubtleSuccessStandAlone",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "StrongErrorStandAlone",
            "declaration": {
              "name": "StrongErrorStandAlone",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "StrongInfoStandAlone",
            "declaration": {
              "name": "StrongInfoStandAlone",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "StrongNotificationStandAlone",
            "declaration": {
              "name": "StrongNotificationStandAlone",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "StrongNeutralStandAlone",
            "declaration": {
              "name": "StrongNeutralStandAlone",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "StrongWarningStandAlone",
            "declaration": {
              "name": "StrongWarningStandAlone",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "StrongSuccessStandAlone",
            "declaration": {
              "name": "StrongSuccessStandAlone",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SubtleErrorBanner",
            "declaration": {
              "name": "SubtleErrorBanner",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SubtleInfoBanner",
            "declaration": {
              "name": "SubtleInfoBanner",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SubtleNotificationBanner",
            "declaration": {
              "name": "SubtleNotificationBanner",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SubtleNeutralBanner",
            "declaration": {
              "name": "SubtleNeutralBanner",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SubtleWarningBanner",
            "declaration": {
              "name": "SubtleWarningBanner",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SubtleSuccessBanner",
            "declaration": {
              "name": "SubtleSuccessBanner",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "StrongErrorBanner",
            "declaration": {
              "name": "StrongErrorBanner",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "StrongInfoBanner",
            "declaration": {
              "name": "StrongInfoBanner",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "StrongNotificationBanner",
            "declaration": {
              "name": "StrongNotificationBanner",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "StrongNeutralBanner",
            "declaration": {
              "name": "StrongNeutralBanner",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "StrongWarningBanner",
            "declaration": {
              "name": "StrongWarningBanner",
              "module": "components/alert/alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "StrongSuccessBanner",
            "declaration": {
              "name": "StrongSuccessBanner",
              "module": "components/alert/alert.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/alert/alert.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The general purpose of an alert or notification is to draw the user’s attention\nand provide the user with timely, relevant information.\n\n## Alert Styles:\n- There are 6 statuses for 6 types of alerts: 'error', 'info', 'notification', 'neutral', 'warning', 'success'.\nEach alert will have different icon to be displayed in the alert.\n- Users can select two types of alert variants: 'standalone', or 'banner'.\n- User can also choose the alert should be emphasized or not. There are two options: subtle or strong.\n- User can add button or link in the alert.\nIf users choose to emphasize the alert (**strong**), user needs to used **\"inverted\"** prop in button or link.\n- User can choose whether the alert can be dismissed or not",
            "name": "Cre8Alert",
            "members": [
              {
                "kind": "field",
                "name": "status",
                "type": {
                  "text": "| 'error'\n      | 'info'\n      | 'notification'\n      | 'neutral'\n      | 'warning'\n      | 'success' | undefined"
                },
                "default": "'info'",
                "description": "The alert type.",
                "attribute": "status",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "variant",
                "type": {
                  "text": "'standalone' | 'banner'"
                },
                "default": "'standalone'",
                "description": "The alert variant.",
                "attribute": "variant",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "emphasis",
                "type": {
                  "text": "'subtle' | 'strong'"
                },
                "default": "'subtle'",
                "attribute": "emphasis",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "iconAlert",
                "type": {
                  "text": "string"
                },
                "default": "undefined",
                "attribute": "iconAlert"
              },
              {
                "kind": "field",
                "name": "iconTitle",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Icon title used for the icon alt text",
                "attribute": "iconTitle"
              },
              {
                "kind": "field",
                "name": "headerText",
                "type": {
                  "text": "string"
                },
                "default": "undefined",
                "attribute": "headerText"
              },
              {
                "kind": "field",
                "name": "ctaBody",
                "type": {
                  "text": "string"
                },
                "default": "undefined",
                "attribute": "ctaBody"
              },
              {
                "kind": "field",
                "name": "dismissed",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Dismissed property\n1) State that changes to true and is removed when the banner is dismissed",
                "attribute": "dismissed",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "notDismissible",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Dismissable property\n1) Adds the ability to close when toggled to true",
                "attribute": "notDismissible",
                "reflects": true
              },
              {
                "kind": "method",
                "name": "onDismiss",
                "description": "On banner dismiss\n1) Function that toggles dismissed to true and removes the banner from the UI"
              },
              {
                "kind": "field",
                "name": "checkEmphasisAlert",
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "mapStatusToIconAlert",
                "privacy": "private"
              }
            ],
            "attributes": [
              {
                "name": "status",
                "type": {
                  "text": "| 'error'\n      | 'info'\n      | 'notification'\n      | 'neutral'\n      | 'warning'\n      | 'success' | undefined"
                },
                "default": "'info'",
                "description": "The alert type.",
                "fieldName": "status"
              },
              {
                "name": "variant",
                "type": {
                  "text": "'standalone' | 'banner'"
                },
                "default": "'standalone'",
                "description": "The alert variant.",
                "fieldName": "variant"
              },
              {
                "name": "emphasis",
                "type": {
                  "text": "'subtle' | 'strong'"
                },
                "default": "'subtle'",
                "fieldName": "emphasis"
              },
              {
                "name": "iconAlert",
                "type": {
                  "text": "string"
                },
                "default": "undefined",
                "fieldName": "iconAlert"
              },
              {
                "name": "iconTitle",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Icon title used for the icon alt text",
                "fieldName": "iconTitle"
              },
              {
                "name": "headerText",
                "type": {
                  "text": "string"
                },
                "default": "undefined",
                "fieldName": "headerText"
              },
              {
                "name": "ctaBody",
                "type": {
                  "text": "string"
                },
                "default": "undefined",
                "fieldName": "ctaBody"
              },
              {
                "name": "dismissed",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Dismissed property\n1) State that changes to true and is removed when the banner is dismissed",
                "fieldName": "dismissed"
              },
              {
                "name": "notDismissible",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Dismissable property\n1) Adds the ability to close when toggled to true",
                "fieldName": "notDismissible"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-alert",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Alert",
            "declaration": {
              "name": "Cre8Alert",
              "module": "components/alert/alert.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-alert",
            "declaration": {
              "name": "Cre8Alert",
              "module": "components/alert/alert.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Alert",
              "module": "components/alert/alert.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/band/band.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #BAND /** * 1) A container with a background that can house various recipes of Components within */ .cre8-c-band { background: var(--cre8-color-bg-subtle); padding: size(3) 0; @media all and (min-width:$cre8-breakpoint-xl) { padding: size(4) 0; } } /** * Branded variant */ .cre8-c-band--branded { color: var(--cre8-color-content-knockout); background: var(--cre8-theme-color-utility-information); } /** * Full height * 1) Height set to 100% to fill a container like a sidebar */ .cre8-c-band--full-height { height: 100%; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/band/band.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/band/band.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "Branded"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/band/band.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/band/band.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Branded",
            "declaration": {
              "name": "Branded",
              "module": "components/band/band.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/band/band.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8Band",
            "slots": [
              {
                "description": "The band content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "variant",
                "type": {
                  "text": "'branded' | undefined"
                },
                "description": "Gradient variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**1** renders the band with the set gradient background</li>\n</ul>\n</cre8-text-passage>",
                "attribute": "variant"
              },
              {
                "kind": "field",
                "name": "fullHeight",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Full height variant\n1) Sets the height to 100%",
                "attribute": "fullHeight",
                "reflects": true
              }
            ],
            "attributes": [
              {
                "name": "variant",
                "type": {
                  "text": "'branded' | undefined"
                },
                "description": "Gradient variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**1** renders the band with the set gradient background</li>\n</ul>\n</cre8-text-passage>",
                "fieldName": "variant"
              },
              {
                "name": "fullHeight",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Full height variant\n1) Sets the height to 100%",
                "fieldName": "fullHeight"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-band",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Band",
            "declaration": {
              "name": "Cre8Band",
              "module": "components/band/band.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-band",
            "declaration": {
              "name": "Cre8Band",
              "module": "components/band/band.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Band",
              "module": "components/band/band.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/badge/badge.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css` @import '../../design-tokens/core/scss/theming/component'; :host { display: inline-flex; } /** * 1) Badges are blocks of color with text inside used for messaging */ .cre8-c-badge { @include cre8-typography-label-small(); display: inline-flex; border-radius: var(--cre8-border-radius-badge); padding: var(--cre8-badge-padding-vertical) var(--cre8-badge-padding-horizontal); color: var(--cre8-color-content-knockout); background-color: var(--cre8-color-bg-strong); align-items: center; } /** * Success badge */ .cre8-c-badge--success { background-color: var(--cre8-color-bg-success-strong); } /** * Warning badge */ .cre8-c-badge--warning { background-color: var(--cre8-color-bg-warning-strong); color: var(--cre8-color-content-default); } /** * Creating space between icon and text */ cre8-icon { height: var(--cre8-icon-height, size(2)); margin-right: size(0.5); } /** * Error badge */ .cre8-c-badge--error { background-color: var(--cre8-color-bg-error-strong); } /** * Info badge */ .cre8-c-badge--info { background-color: var(--cre8-color-bg-info-strong); } /** * Attention badge */ .cre8-c-badge--attention { background-color: var(--cre8-color-bg-attention-strong); } /** * Light neutral (default) badge */ .cre8-c-badge--light { background-color: var(--cre8-color-bg-subtle); color: var(--cre8-color-content-default); } /** * Light Success badge */ .cre8-c-badge--light.cre8-c-badge--success { background-color: var(--cre8-color-bg-success); color: var(--cre8-color-content-success); } /** * Light Warning badge */ .cre8-c-badge--light.cre8-c-badge--warning { background-color: var(--cre8-color-bg-warning); } /** * Light Error badge */ .cre8-c-badge--light.cre8-c-badge--error { background-color: var(--cre8-color-bg-error); color: var(--cre8-color-content-error); } /** * Light Info badge */ .cre8-c-badge--light.cre8-c-badge--info { background-color: var(--cre8-color-bg-info); } /** * Light Attention badge */ .cre8-c-badge--light.cre8-c-badge--attention { background-color: var(--cre8-color-bg-attention); } /** * White neutral (default) badge */ .cre8-c-badge--white { background-color: var(--cre8-color-bg-default); color: var(--cre8-color-content-default); } /** * White Success badge */ .cre8-c-badge--white.cre8-c-badge--success { color: var(--cre8-color-content-success); } /** * White Error badge */ .cre8-c-badge--white.cre8-c-badge--error { background-color: none; color: var(--cre8-color-content-error); }`"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/badge/badge.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/badge/badge.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "meta",
            "type": {
              "text": "object"
            },
            "default": "{ title: 'cre8 Components/Badge', component: 'cre8-badge', render: (args) => html`<cre8-badge ${spread(args)}></cre8-badge>`, parameters: { status: { type: 'inProgress' } }, argTypes: { text: { control: 'text' }, status: { options: ['neutral', 'error', 'warning', 'success', 'info', 'attention'], control: { type: 'select' } }, variant: { options: ['default', 'light', 'white'], control: { type: 'radio' } } }, args: { status: undefined, text: 'Badge', variant: undefined } }"
          },
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Default', }, }"
          },
          {
            "kind": "variable",
            "name": "IconVariant",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'default', text: 'Icon Variant', svg: svgFeedback }, }",
            "description": "**Note** SVG is passed in as a raw string for badges with icons. The icon is defined by this argument \n*Import example:*`import svgFeedback from '/Users/tylersmbp/Projects/cre8-web-components/packages/cre8-wc/icons/System/Regular/Feedback.svg?raw';"
          },
          {
            "kind": "variable",
            "name": "Success",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'success', text: 'Success', }, }"
          },
          {
            "kind": "variable",
            "name": "Warning",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'warning', text: 'Warning', }, }"
          },
          {
            "kind": "variable",
            "name": "Error",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'error', text: 'Error', }, }"
          },
          {
            "kind": "variable",
            "name": "Info",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'info', text: 'Info', }, }"
          },
          {
            "kind": "variable",
            "name": "Attention",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'attention', text: 'Attention', }, }",
            "description": "**Note** Certain brands don't currently use the `Attention` status"
          },
          {
            "kind": "variable",
            "name": "Light",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'light', text: 'Light', }, }"
          },
          {
            "kind": "variable",
            "name": "SuccessLight",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'success', variant: 'light', text: 'Success Light', }, }"
          },
          {
            "kind": "variable",
            "name": "WarningLight",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'warning', variant: 'light', text: 'Warning Light', }, }"
          },
          {
            "kind": "variable",
            "name": "ErrorLight",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'error', variant: 'light', text: 'Error Light', }, }"
          },
          {
            "kind": "variable",
            "name": "InfoLight",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'info', variant: 'light', text: 'Info Light', }, }"
          },
          {
            "kind": "variable",
            "name": "AttentionLight",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'attention', variant: 'light', text: 'Attention Light', }, }",
            "description": "**Note** Certain brands don't currently use the `Attention` status"
          },
          {
            "kind": "variable",
            "name": "White",
            "type": {
              "text": "object"
            },
            "default": "{ parameters: { backgrounds: { default: 'dark' }, }, args: { variant: 'white', text: 'White', }, }"
          },
          {
            "kind": "variable",
            "name": "SuccessWhite",
            "type": {
              "text": "object"
            },
            "default": "{ parameters: { backgrounds: { default: 'dark' }, }, args: { status: 'success', variant: 'white', text: 'Success White', }, }"
          },
          {
            "kind": "variable",
            "name": "WarningWhite",
            "type": {
              "text": "object"
            },
            "default": "{ parameters: { backgrounds: { default: 'dark' }, }, args: { status: 'warning', variant: 'white', text: 'Warning White', }, }"
          },
          {
            "kind": "variable",
            "name": "ErrorWhite",
            "type": {
              "text": "object"
            },
            "default": "{ parameters: { backgrounds: { default: 'dark' }, }, args: { status: 'error', variant: 'white', text: 'Error White', }, }"
          },
          {
            "kind": "variable",
            "name": "InfoWhite",
            "type": {
              "text": "object"
            },
            "default": "{ parameters: { backgrounds: { default: 'dark' }, }, args: { status: 'info', variant: 'white', text: 'Info White', }, }"
          },
          {
            "kind": "variable",
            "name": "AttentionWhite",
            "type": {
              "text": "object"
            },
            "default": "{ parameters: { backgrounds: { default: 'dark' }, }, args: { status: 'attention', variant: 'white', text: 'Attention White', }, }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "meta",
              "module": "components/badge/badge.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/badge/badge.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconVariant",
            "declaration": {
              "name": "IconVariant",
              "module": "components/badge/badge.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Success",
            "declaration": {
              "name": "Success",
              "module": "components/badge/badge.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Warning",
            "declaration": {
              "name": "Warning",
              "module": "components/badge/badge.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Error",
            "declaration": {
              "name": "Error",
              "module": "components/badge/badge.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Info",
            "declaration": {
              "name": "Info",
              "module": "components/badge/badge.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Attention",
            "declaration": {
              "name": "Attention",
              "module": "components/badge/badge.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Light",
            "declaration": {
              "name": "Light",
              "module": "components/badge/badge.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SuccessLight",
            "declaration": {
              "name": "SuccessLight",
              "module": "components/badge/badge.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "WarningLight",
            "declaration": {
              "name": "WarningLight",
              "module": "components/badge/badge.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "ErrorLight",
            "declaration": {
              "name": "ErrorLight",
              "module": "components/badge/badge.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "InfoLight",
            "declaration": {
              "name": "InfoLight",
              "module": "components/badge/badge.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "AttentionLight",
            "declaration": {
              "name": "AttentionLight",
              "module": "components/badge/badge.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "White",
            "declaration": {
              "name": "White",
              "module": "components/badge/badge.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SuccessWhite",
            "declaration": {
              "name": "SuccessWhite",
              "module": "components/badge/badge.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "WarningWhite",
            "declaration": {
              "name": "WarningWhite",
              "module": "components/badge/badge.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "ErrorWhite",
            "declaration": {
              "name": "ErrorWhite",
              "module": "components/badge/badge.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "InfoWhite",
            "declaration": {
              "name": "InfoWhite",
              "module": "components/badge/badge.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "AttentionWhite",
            "declaration": {
              "name": "AttentionWhite",
              "module": "components/badge/badge.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/badge/badge.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "Status badges are used most often in tables or fat rows in a list.\nThese Components serve a contextual purpose and don't provide any functionality.\nBadges should be organized inside a dedicated table row communicating status such as pending, approved or rejected.",
            "name": "Cre8Badge",
            "members": [
              {
                "kind": "field",
                "name": "text",
                "type": {
                  "text": "string"
                },
                "default": "undefined",
                "description": "The badge text",
                "attribute": "text"
              },
              {
                "kind": "field",
                "name": "status",
                "type": {
                  "text": "string"
                },
                "description": "Status (a color variant prop)\n- **neutral** (default) renders a badge with a neutral state treatment\n- **success** renders a badge with success state treatment\n- **warning** renders a badge with warning state treatment\n- **error** renders a badge with error state treatment\n- **info** renders a badge with information state treatment\n- **attention** renders a badge with attention state treatment",
                "attribute": "status"
              },
              {
                "kind": "field",
                "name": "variant",
                "type": {
                  "text": "string"
                },
                "description": "Background Style Variant\n\n- **dark|undefined** (default) renders a badge with a dark background\n- **light** renders a badge with a light background\n- **white** renders a badge with a white background",
                "attribute": "variant"
              },
              {
                "kind": "field",
                "name": "svg",
                "type": {
                  "text": "string | undefined"
                },
                "description": "SVG as a raw string\n- For badges with icons, the icon is defined by this prop\n- Pass in a raw svg as a String. We use raw string loader for this but any method of getting raw svgs will do\n- Import example:`import svgFeedback from '/Users/tylersmbp/Projects/cre8-web-components/packages/cre8-wc/icons/System/Regular/Feedback.svg?raw';`\n- [cre8-icons Github repo](https://git.express-scripts.com/ExpressScripts/cre8-icons) This is the Github\nrepo for Cre8 icons, which includes a link to the storybook as well as relavant information for new icons",
                "attribute": "svg"
              }
            ],
            "attributes": [
              {
                "name": "text",
                "type": {
                  "text": "string"
                },
                "default": "undefined",
                "description": "The badge text",
                "fieldName": "text"
              },
              {
                "name": "status",
                "type": {
                  "text": "string"
                },
                "description": "Status (a color variant prop)\n- **neutral** (default) renders a badge with a neutral state treatment\n- **success** renders a badge with success state treatment\n- **warning** renders a badge with warning state treatment\n- **error** renders a badge with error state treatment\n- **info** renders a badge with information state treatment\n- **attention** renders a badge with attention state treatment",
                "fieldName": "status"
              },
              {
                "name": "variant",
                "type": {
                  "text": "string"
                },
                "description": "Background Style Variant\n\n- **dark|undefined** (default) renders a badge with a dark background\n- **light** renders a badge with a light background\n- **white** renders a badge with a white background",
                "fieldName": "variant"
              },
              {
                "name": "svg",
                "type": {
                  "text": "string | undefined"
                },
                "description": "SVG as a raw string\n- For badges with icons, the icon is defined by this prop\n- Pass in a raw svg as a String. We use raw string loader for this but any method of getting raw svgs will do\n- Import example:`import svgFeedback from '/Users/tylersmbp/Projects/cre8-web-components/packages/cre8-wc/icons/System/Regular/Feedback.svg?raw';`\n- [cre8-icons Github repo](https://git.express-scripts.com/ExpressScripts/cre8-icons) This is the Github\nrepo for Cre8 icons, which includes a link to the storybook as well as relavant information for new icons",
                "fieldName": "svg"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-badge",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Badge",
            "declaration": {
              "name": "Cre8Badge",
              "module": "components/badge/badge.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-badge",
            "declaration": {
              "name": "Cre8Badge",
              "module": "components/badge/badge.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/breadcrumbs/breadcrumbs.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #BREADCRUMBS :host { display: inline-flex; } /** * 1) An ordered list of navigational hierarchy showing the user where they are on the site */ .cre8-c-breadcrumbs__list { display: flex; flex-wrap: wrap; margin: 0; padding: 0; list-style: none; gap: size(1); } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/breadcrumbs/breadcrumbs.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/breadcrumbs/breadcrumbs.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/breadcrumbs/breadcrumbs.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/breadcrumbs/breadcrumbs.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/breadcrumbs/breadcrumbs.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The breadcrumbs component is a secondary navigation pattern that helps a user understand where the user is located.\nThe breadcrumbs component shows the users their current location relative to the information architecture\nIt enables the users to quickly move up to a parent level or previous location.\n\n## How to Use\n\n- Import 'Breadcrumbs' component.\n- Add the pages in the path of the breadcrumbs using `cre8-breadcrumbs-item`.\nAll the pages in the breadcrumbs component should be interactive.\n- All the page should link to their respective pages (except the current page) using `cre8-link`.\n- The current page is included in the breadcrumbs trail.\n- The current page is always the last text listed and is not an interactive link.",
            "name": "Cre8Breadcrumbs",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "navAriaLabel",
                "type": {
                  "text": "string"
                },
                "default": "'breadcrumbs'",
                "description": "aria-label attribute to designate at name for the nav. Can be override by user",
                "attribute": "navAriaLabel"
              }
            ],
            "attributes": [
              {
                "name": "navAriaLabel",
                "type": {
                  "text": "string"
                },
                "default": "'breadcrumbs'",
                "description": "aria-label attribute to designate at name for the nav. Can be override by user",
                "fieldName": "navAriaLabel"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-breadcrumbs",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Breadcrumbs",
            "declaration": {
              "name": "Cre8Breadcrumbs",
              "module": "components/breadcrumbs/breadcrumbs.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-breadcrumbs",
            "declaration": {
              "name": "Cre8Breadcrumbs",
              "module": "components/breadcrumbs/breadcrumbs.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Breadcrumbs",
              "module": "components/breadcrumbs/breadcrumbs.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/breadcrumbs-item/breadcrumbs-item.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; :host { display: inline-flex; } /** * 1) Singular item within the breadcrumbs component that contains a link elsewhere on the site */ .cre8-c-breadcrumbs--item { display: inline-flex; align-items: center; /** * Breadcrumbs caret doesn't display for last breadcrumb item */ :host(:last-child) & { cre8-icon { display: none; } } } /** * Breadcrumbs icon */ cre8-icon { margin-left: size(1); color: var(--cre8-color-content-subtle); display: inline-flex; svg { height: size(2); width: size(2); } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/breadcrumbs-item/breadcrumbs-item.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/breadcrumbs-item/breadcrumbs-item.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8BreadcrumbsItem",
            "slots": [
              {
                "description": "The component content, the expected slotted content is a Cre8 Link or a String for the \"terminal node\"",
                "name": ""
              }
            ],
            "members": [],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-breadcrumbs-item",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8BreadcrumbsItem",
            "declaration": {
              "name": "Cre8BreadcrumbsItem",
              "module": "components/breadcrumbs-item/breadcrumbs-item.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-breadcrumbs-item",
            "declaration": {
              "name": "Cre8BreadcrumbsItem",
              "module": "components/breadcrumbs-item/breadcrumbs-item.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8BreadcrumbsItem",
              "module": "components/breadcrumbs-item/breadcrumbs-item.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/button/button.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css` @import '../../design-tokens/core/scss/theming/component'; :host { display: inline-flex; } :host([fullWidth]) { display: flex; } /** * 1) Button or link that has functionality to it */ /** * Primary button */ .cre8-c-button { @include cre8-typography-label-default(); width: var(--cre8-button-width, auto); height: var(--cre8-button-height, auto); min-width: var(--cre8-button-min-width, auto); min-height: var(--cre8-button-min-height, auto); justify-content: center; text-align: center; margin-top: var( --cre8-button-margin-top, 0); margin-bottom: var( --cre8-button-margin-bottom, 0); margin-left: var( --cre8-button-margin-left, 0); margin-right: var( --cre8-button-margin-right, 0); display: inline-flex; align-items: center; border-width: var(--cre8-border-width-button-default); box-shadow: var(--cre8-shadow-button); padding-top: var(--cre8-button-padding-vertical-medium); padding-right: var(--cre8-button-padding-horizontal-medium); padding-bottom: var(--cre8-button-padding-vertical-medium); padding-left: var(--cre8-button-padding-horizontal-medium); margin: 0; cursor: pointer; border-style: var(--cre8-border-style-default); transition: revert; transform: revert; white-space: nowrap; &:hover, &:focus, &:active, &:focus-visible { border-style: var(--cre8-border-style-default); box-shadow: none; transform: revert; transition: revert; } &.cre8-c-button--primary { background: var(--cre8-color-button-primary-bg); border-width: var(--cre8-border-width-button-default); border-color: var(--cre8-color-button-primary-border); border-radius: var(--cre8-border-radius-button); box-shadow: var(--cre8-shadow-button); color: var(--cre8-color-button-primary-content); --cre8-icon-fill: var(--cre8-color-button-primary-content); &:hover, &:focus { box-shadow: none; --cre8-icon-fill: var(--cre8-color-button-primary-content-hover); color: var(--cre8-color-button-primary-content-hover); border-color: var(--cre8-color-button-primary-border-hover); background: var(--cre8-color-button-primary-bg-hover); text-decoration: none; &:focus { @includefocus(); } } &:focus-visible, &:active, &.cre8-c-button--loading { box-shadow: none; color: var(--cre8-color-button-primary-content-active); --cre8-icon-fill: var(--cre8-color-button-primary-content-active); border-color: var(--cre8-color-button-primary-border-active); background-color: var(--cre8-color-button-primary-bg-active); } &:focus-visible{ @includefocus(); } &.cre8-c-button--loading{ cursor: not-allowed; } /** * Disabled primary and secondary button */ &:disabled { box-shadow: none; background-color: var(--cre8-color-button-primary-bg-disabled); border-color: var(--cre8-color-button-primary-border-disabled); color: var(--cre8-color-button-primary-content-disabled); --cre8-icon-fill: var(--cre8-color-button-primary-content-disabled); cursor: not-allowed; outline: none; &:hover, &:focus, &:active, &:focus-visible { outline: none; background-color: var(--cre8-color-button-primary-bg-disabled); border-color: var(--cre8-color-button-primary-border-disabled); color: var(--cre8-color-button-primary-content-disabled); --cre8-icon-fill: var(--cre8-color-button-primary-content-disabled); } } } /** * Primary button inverse */ &.cre8-c-button--primary.cre8-c-button--inverse { background: var(--cre8-color-button-primary-inverse-bg); border-width: var(--cre8-border-width-button-default); border-color: var(--cre8-color-button-primary-inverse-border); border-radius: var(--cre8-border-radius-button); box-shadow: var(--cre8-shadow-button); color: var(--cre8-color-button-primary-inverse-content); --cre8-icon-fill: var(--cre8-color-button-primary-inverse-content); &:hover, &:focus { box-shadow: none; --cre8-icon-fill: var(--cre8-color-button-primary-inverse-content-hover); color: var(--cre8-color-button-primary-inverse-content-hover); border-color: var(--cre8-color-button-primary-inverse-border-hover); background: var(--cre8-color-button-primary-inverse-bg-hover); text-decoration: none; &:focus { @includefocus(); } } &:focus-visible, &:active, &.cre8-c-button--loading { box-shadow: none; color: var(--cre8-color-button-primary-inverse-content-active); --cre8-icon-fill: var(--cre8-color-button-primary-inverse-content-active); border-color: var(--cre8-color-button-primary-inverse-border-active); background-color: var(--cre8-color-button-primary-inverse-bg-active); } &:focus-visible{ @includefocus(); } &.cre8-c-button--loading{ cursor: not-allowed; } &:disabled { box-shadow: none; background-color: var(--cre8-color-button-primary-inverse-bg-disabled); border-color: var(--cre8-color-button-primary-inverse-border-disabled); color: var(--cre8-color-button-primary-inverse-content-disabled); --cre8-icon-fill: var(--cre8-color-button-primary-inverse-content-disabled); cursor: not-allowed; outline: none; &:hover, &:focus, &:active, &:focus-visible { outline: none; background-color: var(--cre8-color-button-primary-inverse-bg-disabled); border-color: var(--cre8-color-button-primary-inverse-border-disabled); color: var(--cre8-color-button-primary-inverse-content-disabled); --cre8-icon-fill: var(--cre8-color-button-primary-inverse-content-disabled); } } } /** * Secondary button * The icon button shares the styles of the standard secondary button */ &.cre8-c-button--secondary { background-color: var(--cre8-color-button-secondary-bg); border-color: var(--cre8-color-button-secondary-border); color: var(--cre8-color-button-secondary-content); --cre8-icon-fill: var(--cre8-color-button-secondary-content); border-radius: var(--cre8-border-radius-button); border-width: var(--cre8-border-width-button-default); &:hover, &:focus { background-color: var(--cre8-color-button-secondary-bg-hover); border-color: var(--cre8-color-button-secondary-border-hover); color: var(--cre8-color-button-secondary-content-hover); --cre8-icon-fill: var(--cre8-color-button-secondary-content-hover); &:focus { @includefocus(); } } &:focus-visible, &:active, &.cre8-c-button--loading { transition: none; transform: none; background-color: var(--cre8-color-button-secondary-bg-active); border-color: var(--cre8-color-button-secondary-border-active); color: var(--cre8-color-button-secondary-content-active); --cre8-icon-fill: var(--cre8-color-button-secondary-content-active); } &:focus-visible { @includefocus(); } &.cre8-c-button--loading { cursor: not-allowed; } &:disabled { box-shadow: none; background-color: var(--cre8-color-button-secondary-bg-disabled); border-color: var(--cre8-color-button-secondary-border-disabled); color: var(--cre8-color-button-secondary-content-disabled); --cre8-icon-fill: var(--cre8-color-button-secondary-content-disabled); outline: none; border-radius: var(--cre8-border-radius-button); border-width: var(--cre8-border-width-button-default); cursor: not-allowed; &:hover, &:focus, &:active, &:focus-visible { outline: none; background-color: var(--cre8-color-button-secondary-bg-disabled); border-color: var(--cre8-color-button-secondary-border-disabled); color: var(--cre8-color-button-secondary-content-disabled); --cre8-icon-fill: var(--cre8-color-button-secondary-content-disabled); } } } /** * Secondary button neutral */ &.cre8-c-button--secondary.cre8-c-button--neutral { background-color: var(--cre8-color-button-secondary-neutral-bg); border-color: var(--cre8-color-button-secondary-neutral-border); color: var(--cre8-color-button-secondary-neutral-content); --cre8-icon-fill: var(--cre8-color-button-secondary-neutral-content); border-radius: var(--cre8-border-radius-button); border-width: var(--cre8-border-width-button-default); &:hover, &:focus { background-color: var(--cre8-color-button-secondary-neutral-bg-hover); border-color: var(--cre8-color-button-secondary-neutral-border-hover); color: var(--cre8-color-button-secondary-neutral-content-hover); --cre8-icon-fill: var(--cre8-color-button-secondary-neutral-content-hover); &:focus { @includefocus(); } } &:focus-visible, &:active, &.cre8-c-button--loading { transition: none; transform: none; background-color: var(--cre8-color-button-secondary-neutral-bg-active); border-color: var(--cre8-color-button-secondary-neutral-border-active); color: var(--cre8-color-button-secondary-neutral-content-active); --cre8-icon-fill: var(--cre8-color-button-secondary-neutral-content-active); } &:focus-visible { @includefocus(); } &:disabled { box-shadow: none; background-color: var(--cre8-color-button-secondary-neutral-bg-disabled); border-color: var(--cre8-color-button-secondary-neutral-border-disabled); color: var(--cre8-color-button-secondary-neutral-content-disabled); --cre8-icon-fill: var(--cre8-color-button-secondary-neutral-content-disabled); outline: none; border-radius: var(--cre8-border-radius-button); border-width: var(--cre8-border-width-button-default); cursor: not-allowed; &:hover, &:focus, &:active, &:focus-visible { outline: none; background-color: var(--cre8-color-button-secondary-neutral-bg-disabled); border-color: var(--cre8-color-button-secondary-neutral-border-disabled); color: var(--cre8-color-button-secondary-neutral-content-disabled); --cre8-icon-fill: var(--cre8-color-button-secondary-neutral-content-disabled); } } } /** * Secondary button inverse */ &.cre8-c-button--secondary.cre8-c-button--inverse { background-color: var(--cre8-color-button-secondary-inverse-bg); border-color: var(--cre8-color-button-secondary-inverse-border); color: var(--cre8-color-button-secondary-inverse-content); --cre8-icon-fill: var(--cre8-color-button-secondary-inverse-content); border-radius: var(--cre8-border-radius-button); border-width: var(--cre8-border-width-button-default); &:hover, &:focus { background-color: var(--cre8-color-button-secondary-inverse-bg-hover); border-color: var(--cre8-color-button-secondary-inverse-border-hover); color: var(--cre8-color-button-secondary-inverse-content-hover); --cre8-icon-fill: var(--cre8-color-button-secondary-inverse-content-hover); &:focus { @includefocus(); } } &:focus-visible, &:active, &.cre8-c-button--loading { transition: none; transform: none; background-color: var(--cre8-color-button-secondary-inverse-bg-active); border-color: var(--cre8-color-button-secondary-inverse-border-active); color: var(--cre8-color-button-secondary-inverse-content-active); --cre8-icon-fill: var(--cre8-color-button-secondary-inverse-content-active); } &:focus-visible { @includefocus(); } &:disabled { box-shadow: none; background-color: var(--cre8-color-button-secondary-inverse-bg-disabled); border-color: var(--cre8-color-button-secondary-inverse-border-disabled); color: var(--cre8-color-button-secondary-inverse-content-disabled); --cre8-icon-fill: var(--cre8-color-button-secondary-inverse-content-disabled); outline: none; border-radius: var(--cre8-border-radius-button); border-width: var(--cre8-border-width-button-default); cursor: not-allowed; &:hover, &:focus, &:active, &:focus-visible { outline: none; background-color: var(--cre8-color-button-secondary-inverse-bg-disabled); border-color: var(--cre8-color-button-secondary-inverse-border-disabled); color: var(--cre8-color-button-secondary-inverse-content-disabled); --cre8-icon-fill: var(--cre8-color-button-secondary-inverse-content-disabled); } } } /** * Secondary button neutral inverse */ &.cre8-c-button--secondary.cre8-c-button--neutral.cre8-c-button--inverse { background-color: var(--cre8-color-button-secondary-neutral-inverse-bg); border-color: var(--cre8-color-button-secondary-neutral-inverse-border); color: var(--cre8-color-button-secondary-neutral-inverse-content); --cre8-icon-fill: var(--cre8-color-button-secondary-neutral-inverse-content); border-radius: var(--cre8-border-radius-button); border-width: var(--cre8-border-width-button-default); &:hover, &:focus { @includefocus(); background-color: var(--cre8-color-button-secondary-neutral-bg-active); border-color: var(--cre8-color-button-secondary-neutral-inverse-border-active); outline-color: var(--cre8-color-button-secondary-neutral-inverse-outline); color: var(--cre8-color-button-secondary-neutral-inverse-content-active); --cre8-icon-fill: var(--cre8-color-button-secondary-neutral-inverse-content-active); } &:focus-visible, &:active, &.cre8-c-button--loading { transition: none; transform: none; background-color: var(--cre8-color-button-secondary-neutral-inverse-bg-active); border-color: var(--cre8-color-button-secondary-neutral-inverse-border-active); color: var(--cre8-color-button-secondary-neutral-inverse-content-active); --cre8-icon-fill: var(--cre8-color-button-secondary-neutral-inverse-content-active); } &:focus-visible { @includefocus(); } &:disabled { box-shadow: none; background-color: var(--cre8-color-button-secondary-neutral-inverse-bg-disabled); border-color: var(--cre8-color-button-secondary-neutral-inverse-border-disabled); color: var(--cre8-color-button-secondary-neutral-inverse-content-disabled); --cre8-icon-fill: var(--cre8-color-button-secondary-neutral-inverse-content-disabled); outline: none; border-radius: var(--cre8-border-radius-button); border-width: var(--cre8-border-width-button-default); cursor: not-allowed; &:hover, &:focus, &:active, &:focus-visible { outline: none; background-color: var(--cre8-color-button-secondary-neutral-inverse-bg-disabled); border-color: var(--cre8-color-button-secondary-neutral-inverse-border-disabled); color: var(--cre8-color-button-secondary-neutral-inverse-content-disabled); --cre8-icon-fill: var(--cre8-color-button-secondary-neutral-inverse-content-disabled); } } } /** * Tertiary button */ &.cre8-c-button--tertiary { border-radius: var(--cre8-border-radius-button); background-color: var(--cre8-color-button-tertiary-bg); border-width: var(--cre8-border-width-button-default); border-color: var(--cre8-color-button-tertiary-border); color: var(--cre8-color-button-tertiary-content); --cre8-icon-fill: var(--cre8-color-button-tertiary-content); box-shadow: none; &:hover, &:focus { border-radius: var(--cre8-border-radius-button); background-color: var(--cre8-color-button-tertiary-bg-hover); border-width: var(--cre8-border-width-button-default, --cre8-border-width-none); border-color: var(--cre8-color-button-tertiary-border-hover); color: var(--cre8-color-button-tertiary-content-hover); --cre8-icon-fill: var(--cre8-color-button-tertiary-content-hover); &:focus { @includefocusTertiary(); } } &:focus-visible, &:active, &.cre8-c-button--loading { border-radius: var(--cre8-border-radius-button); background-color: var(--cre8-color-button-tertiary-bg-active); border-color: var(--cre8-color-button-tertiary-border-active); border-width: var(--cre8-border-width-button-default); color: var(--cre8-color-button-tertiary-content-active); --cre8-icon-fill: var(--cre8-color-button-tertiary-content-active); } &:focus-visible { @includefocusTertiary(); } &.cre8-c-button--loading { cursor: not-allowed; } &:disabled { background-color: var(--cre8-color-button-tertiary-bg-disabled); border-color: transparent; color: var(--cre8-color-button-tertiary-content-disabled); --cre8-icon-fill: var(--cre8-color-button-tertiary-content-disabled); outline: none; box-shadow: none; cursor: not-allowed; &:hover, &:focus { outline: none; box-shadow: none; background-color: var(--cre8-color-button-tertiary-bg-disabled); color: var(--cre8-color-button-tertiary-content-disabled); --cre8-icon-fill: var(--cre8-color-button-tertiary-content-disabled); } &:active, &:focus-visible { outline: none; box-shadow: none; background-color: var(--cre8-color-button-tertiary-bg-disabled); color: var(--cre8-color-button-tertiary-content-disabled); --cre8-icon-fill: var(--cre8-color-button-tertiary-content-disabled); } } } /** * Tertiary button neutral */ &.cre8-c-button--tertiary.cre8-c-button--neutral { background-color: var(--cre8-color-button-tertiary-neutral-bg); border-color: var(--cre8-color-button-tertiary-border); color: var(--cre8-color-button-tertiary-neutral-content); --cre8-icon-fill: var(--cre8-color-button-tertiary-neutral-content); border-radius: var(--cre8-border-radius-button); border-width: var(--cre8-border-width-button-default); &:hover, &:focus { background-color: var(--cre8-color-button-tertiary-neutral-bg-hover); border-color: var(--cre8-color-button-tertiary-neutral-border-hover); color: var(--cre8-color-button-tertiary-neutral-content-hover); --cre8-icon-fill: var(--cre8-color-button-tertiary-neutral-content-hover); outline-color: var(--cre8-color-button-tertiary-neutral-outline); } &:focus-visible, &:active, &.cre8-c-button--loading { transition: none; transform: none; background-color: var(--cre8-color-button-tertiary-neutral-bg-active); border-color: var(--cre8-color-button-tertiary-neutral-border-active); color: var(--cre8-color-button-tertiary-neutral-content-active); --cre8-icon-fill: var(--cre8-color-button-tertiary-neutral-content-active); } &:focus-visible { @includefocus(); } &:disabled { box-shadow: none; background-color: var(--cre8-color-button-tertiary-neutral-bg-disabled); border-color: var(--cre8-color-button-tertiary-neutral-border-disabled); color: var(--cre8-color-button-tertiary-neutral-content-disabled); --cre8-icon-fill: var(--cre8-color-button-tertiary-neutral-content-disabled); outline: none; border-radius: var(--cre8-border-radius-button); border-width: var(--cre8-border-width-button-default); cursor: not-allowed; } } /** * Tertiary button inverse */ &.cre8-c-button--tertiary.cre8-c-button--inverse { border-radius: var(--cre8-border-radius-button); background-color: var(--cre8-color-button-tertiary-inverse-bg); border-width: var(--cre8-border-width-button-default); border-color: var(--cre8-color-button-tertiary-inverse-border); color: var(--cre8-color-button-tertiary-inverse-content); --cre8-icon-fill: var(--cre8-color-button-tertiary-inverse-content); box-shadow: none; &:hover, &:focus { border-radius: var(--cre8-border-radius-button); background-color: var(--cre8-color-button-tertiary-inverse-bg-hover); border-width: var(--cre8-border-width-button-default, --cre8-border-width-none); border-color: var(--cre8-color-button-tertiary-inverse-border-hover); color: var(--cre8-color-button-tertiary-inverse-content-hover); --cre8-icon-fill: var(--cre8-color-button-tertiary-inverse-content-hover); outline-color: var(--cre8-color-button-tertiary-inverse-outline); } &:focus-visible, &:active, &.cre8-c-button--loading { border-radius: var(--cre8-border-radius-button); background-color: var(--cre8-color-button-tertiary-inverse-bg-active); border-color: var(--cre8-color-button-tertiary-inverse-border-active); border-width: var(--cre8-border-width-button-default); color: var(--cre8-color-button-tertiary-inverse-content-active); --cre8-icon-fill: var(--cre8-color-button-tertiary-inverse-content-active); outline-color: var(--cre8-color-button-tertiary-inverse-outline); } &.cre8-c-button--loading { cursor: not-allowed; } &:disabled { background-color: var(--cre8-color-button-tertiary-inverse-bg-disabled); border-color: transparent; color: var(--cre8-color-button-tertiary-inverse-content-disabled); --cre8-icon-fill: var(--cre8-color-button-tertiary-inverse-content-disabled); outline: none; box-shadow: none; cursor: not-allowed; &:hover, &:focus { outline: none; box-shadow: none; background-color: var(--cre8-color-button-tertiary-inverse-bg-disabled); color: var(--cre8-color-button-tertiary-inverse-content-disabled); --cre8-icon-fill: var(--cre8-color-button-tertiary-inverse-content-disabled); } &:active, &:focus-visible { outline: none; box-shadow: none; background-color: var(--cre8-color-button-tertiary-inverse-bg-disabled); color: var(--cre8-color-button-tertiary-inverse-content-disabled); --cre8-icon-fill: var(--cre8-color-button-tertiary-inverse-content-disabled); } } } /** * Tertiary Neutral button inverse */ &.cre8-c-button--tertiary.cre8-c-button--neutral.cre8-c-button--inverse { border-radius: var(--cre8-border-radius-button); background-color: var(--cre8-color-button-tertiary-neutral-inverse-bg); border-width: var(--cre8-border-width-button-default); color: var(--cre8-color-button-tertiary-neutral-inverse-content); --cre8-icon-fill: var(--cre8-color-button-tertiary-neutral-inverse-content); box-shadow: none; &:hover, &:focus { border-radius: var(--cre8-border-radius-button); background-color: var(--cre8-color-button-tertiary-neutral-inverse-bg-hover); border-width: var(--cre8-border-width-button-default, --cre8-border-width-none); border-color: var(--cre8-color-button-tertiary-neutral-inverse-border-hover); color: var(--cre8-color-button-tertiary-neutral-inverse-content-hover); --cre8-icon-fill: var(--cre8-color-button-tertiary-neutral-inverse-content-hover); outline-color: var(--cre8-color-button-tertiary-neutral-inverse-outline); } &:focus-visible, &:active, &.cre8-c-button--loading { border-radius: var(--cre8-border-radius-button); background-color: var(--cre8-color-button-tertiary-neutral-inverse-bg-active); border-color: var(--cre8-color-button-tertiary-neutral-inverse-border-active); border-width: var(--cre8-border-width-button-default); color: var(--cre8-color-button-tertiary-neutral-inverse-content-active); --cre8-icon-fill: var(--cre8-color-button-tertiary-neutral-inverse-content-active); outline-color: var(--cre8-color-button-tertiary-neutral-inverse-outline); } &.cre8-c-button--loading { cursor: not-allowed; } &:disabled { background-color: var(--cre8-color-button-tertiary-neutral-inverse-bg-disabled); border-color: transparent; color: var(--cre8-color-button-tertiary-neutral-inverse-content-disabled); --cre8-icon-fill: var(--cre8-color-button-tertiary-neutral-inverse-content-disabled); outline: none; box-shadow: none; cursor: not-allowed; } } &.cre8-c-button.cre8-c-button--secondary.cre8-c-button--split-button-text { border-radius: var(--cre8-border-radius-button) var(--cre8-border-radius-none) var(--cre8-border-radius-none) var(--cre8-border-radius-button); border-color: var(--cre8-color-button-secondary-border); border-width: var(--cre8-border-width-button-default); color: var(--cre8-color-button-secondary-content); &:active, &:focus-visible { outline: none; } &.cre8-c-button--lg { padding: var(--cre8-button-padding-vertical-large) var(--cre8-button-padding-horizontal-large); } &.cre8-c-button--sm { padding: var(--cre8-button-padding-vertical-small) var(--cre8-button-padding-horizontal-small); } } &.cre8-c-button.cre8-c-button--icon-only.cre8-c-button--split-button-caret { padding: var(--cre8-button-padding-vertical-medium); border-radius: var(--cre8-border-radius-none) var(--cre8-border-radius-button) var(--cre8-border-radius-button) var(--cre8-border-radius-none); height: 100%; border-left: none !important ; border-collapse: collapse; background: var(--cre8-color-button-secondary-bg); border-color: var(--cre8-color-button-secondary-border); border-width: var(--cre8-border-width-button-default); color: var(--cre8-color-button-secondary-content); --cre8-icon-fill: var(--cre8-color-button-secondary-content); &:hover, &:focus { background: var(--cre8-color-button-secondary-bg-hover); border-color: var(--cre8-color-button-secondary-border-hover); --cre8-icon-fill: var(--cre8-color-button-secondary-content-hover); outline: none; border-left: none; border-collapse: collapse; } &:active, &:focus-visible { background: var(--cre8-color-button-secondary-bg-active); border-color: var(--cre8-color-button-secondary-border-active); --cre8-icon-fill: var(--cre8-color-button-secondary-content-active); outline: none; border-left: none; border-collapse: collapse; } } } .cre8-c-button--lg { padding: var(--cre8-button-padding-vertical-large); } .cre8-c-button--sm { padding: var(--cre8-button-padding-vertical-small); } .cre8-c-button--icon-only { padding: var(--cre8-button-padding-vertical-small); color: var(--cre8-icon-fill, currentColor); } /** * Full-width button */ .cre8-c-button--full-width { width: 100%; display: flex; } /** * Small button */ .cre8-c-button--sm { @include cre8-typography-label-small(); padding-top: var(--cre8-button-padding-vertical-small); padding-right: var(--cre8-button-padding-horizontal-small); padding-bottom: var(--cre8-button-padding-vertical-small); padding-left: var(--cre8-button-padding-horizontal-small); } /** * Small button sized for icon only */ .cre8-c-button--sm.cre8-c-button--icon-only { @include cre8-typography-label-small(); padding-top: var(--cre8-button-padding-vertical-small-icon-only); padding-right: var(--cre8-button-padding-horizontal-small-icon-only); padding-bottom: var(--cre8-button-padding-vertical-small-icon-only); padding-left: var(--cre8-button-padding-horizontal-small-icon-only); } /** * Large button */ .cre8-c-button--lg { @include cre8-typography-label-large(); padding-top: var(--cre8-button-padding-vertical-large); padding-right: var(--cre8-button-padding-horizontal-large); padding-bottom: var(--cre8-button-padding-vertical-large); padding-left: var(--cre8-button-padding-horizontal-large); } /** * Large button sized for icon only */ .cre8-c-button--lg.cre8-c-button--icon-only { @include cre8-typography-label-large(); padding-top: var(--cre8-button-padding-vertical-large-icon-only); padding-right: var(--cre8-button-padding-horizontal-large-icon-only); padding-bottom: var(--cre8-button-padding-vertical-large-icon-only); padding-left: var(--cre8-button-padding-horizontal-large-icon-only); } /** * Icon within small button */ .cre8-c-button--sm cre8-icon-legacy { --cre8-icon-height: var(--cre8-icon-size-small); --cre8-icon-width: var(--cre8-icon-size-small); } .cre8-c-button--sm cre8-icon { svg { height: size(1.75); width: size(1.75); } } /** * Icon within large button */ .cre8-c-button--lg cre8-icon-legacy { --cre8-icon-height: var(--cre8-icon-size-large); --cre8-icon-width: var(--cre8-icon-size-large); } .cre8-c-button--lg cre8-icon { svg { height: size(2.25); width: size(2.25); } } ::slotted(*) { margin-right: 0; } /** * Button icon directly before button text */ cre8-icon-legacy + .cre8-c-button__text:not(.cre8-u-is-vishidden) { margin-left: size(1); } cre8-icon + .cre8-c-button__text:not(.cre8-u-is-vishidden) { margin-left: size(1); } /** * Button icon directly after button text */ .cre8-c-button__text:not(.cre8-u-is-vishidden) + cre8-icon-legacy { margin-left: size(1); } .cre8-c-button__text:not(.cre8-u-is-vishidden) + cre8-icon { margin-left: size(1); } /** * Button icon only */ .cre8-c-button:has(.cre8-c-button__text.cre8-u-is-vishidden) + cre8-icon-legacy { border-radius: var(--cre8-border-radius-button); } .cre8-c-button:has(.cre8-c-button__text.cre8-u-is-vishidden) + cre8-icon { border-radius: var(--cre8-border-radius-button); } .cre8-c-button__text.cre8-u-is-vishidden + cre8-icon-legacy { margin-left: 0px; margin-right: 0px; } .cre8-c-button__text.cre8-u-is-vishidden + cre8-icon { margin-left: 0px; margin-right: 0px; } .cre8-c-button__text.cre8-u-is-vishidden { @include visuallyHidden(); } .cre8-c-button--primary.cre8-c-button--loading { --cre8-icon-fill: var(--cre8-color-content-knockout); } .cre8-c-button--secondary.cre8-c-button--loading, .cre8-c-button--tertiary.cre8-c-button--loading { --cre8-icon-fill: var(--cre8-color-button-secondary-content-active); } /** * Aria live span */ .cre8-u-is-vishidden { --cre8-icon-height: 0px; --cre8-icon-width: 0px; max-width: fit-content; min-width: 0px; width: auto; height: auto; max-height: fit-content; min-width: 0px; @include visuallyHidden(); } cre8-icon-legacy.cre8-u-is-vishidden { @include visuallyHidden(); } span.cre8-c-button__icon { margin-left: size(1); max-width: fit-content; min-width: 0px; width: auto; height: auto; max-height: fit-content; min-width: 0px; } cre8-icon { display: flex; align-items: center; justify-content: center; svg { height: size(2); width: size(2); } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/button/button.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/button/button.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "meta",
            "type": {
              "text": "Meta"
            },
            "default": "{ title: 'cre8 Components/Button', component: 'cre8-button', render: (args) => html`<cre8-button ${spread(args)}></cre8-button>`, parameters: { withDesign: { type: 'figma', url: 'https://www.figma.com/file/WkOaGhOMq5lOGwAUfASz8K/ESI-PBM-Web?node-id=4651%3A51525&t=3jUKYPYoGMClqBbL-1', }, status: { type: 'inProgress' }, actions: { handles: ['click', 'submit'], }, }, argTypes: { ariaLive: { options: ['assertive', 'polite'], control: 'radio' }, buttonAriaExpanded: { control: 'boolean' }, disabled: { control: 'boolean' }, fullWidth: { control: 'boolean' }, hideText: { control: 'boolean' }, iconName: { control: 'text' }, // iconName will be deprecated svg: { control: 'text' }, iconRotateDegree: { control: 'text' }, iconPosition: { options: ['before', 'after'], control: { type: 'radio' }, }, inverse: { control: 'boolean' }, loading: { control: 'boolean' }, loadingComplete: { control: 'boolean' }, text: { control: 'text', }, href: { control: 'text', }, size: { options: ['sm', 'md', 'lg'], control: { type: 'radio' }, }, variant: { options: ['primary', 'secondary', 'tertiary'], control: { type: 'radio' }, }, }, args: { text: 'Button', loading: undefined, size: 'md', }, }"
          },
          {
            "kind": "variable",
            "name": "Primary",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Primary', }, }"
          },
          {
            "kind": "variable",
            "name": "PrimarySubmit",
            "type": {
              "text": "object"
            },
            "default": "{ args: { type: 'submit', text: 'Submit', }, }",
            "description": "Button defaults to type of `button`. By passing `submit` to `type`, the button can submit form data."
          },
          {
            "kind": "variable",
            "name": "PrimaryDisabled",
            "type": {
              "text": "object"
            },
            "default": "{ args: { disabled: true, text: 'Button', buttonAriaExpanded: false, }, }"
          },
          {
            "kind": "variable",
            "name": "PrimaryInverse",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Button', variant: 'primary', inverse: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "PrimaryInverseDisabled",
            "type": {
              "text": "object"
            },
            "default": "{ args: { disabled: true, text: 'Button', variant: 'primary', inverse: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "PrimaryInverseLoading",
            "type": {
              "text": "object"
            },
            "default": "{ args: { loading: true, text: 'Button', variant: 'primary', inverse: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "PrimaryInverseSmall",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Button', variant: 'primary', inverse: true, size: 'sm', }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "PrimaryInverseIconOnly",
            "type": {
              "text": "object"
            },
            "default": "{ args: { hideText: true, svg: svgCaretUp, iconRotateDegree: '90', iconPosition: 'after', text: 'Button With Visually Hidden Text', variant: 'primary', inverse: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "PrimaryInverseFullWidth",
            "type": {
              "text": "object"
            },
            "default": "{ args: { fullWidth: true, text: 'Button', variant: 'primary', inverse: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "IconBefore",
            "type": {
              "text": "object"
            },
            "default": "{ args: { svg: svgCaretUp, iconRotateDegree: '-90', iconPosition: 'before', text: 'Button', }, }"
          },
          {
            "kind": "variable",
            "name": "IconAfter",
            "type": {
              "text": "object"
            },
            "default": "{ args: { svg: svgCaretUp, iconRotateDegree: '90', iconPosition: 'after', text: 'Button', }, }"
          },
          {
            "kind": "variable",
            "name": "Secondary",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Button', variant: 'secondary', }, }"
          },
          {
            "kind": "variable",
            "name": "SecondaryDisabled",
            "type": {
              "text": "object"
            },
            "default": "{ args: { disabled: true, text: 'Button', variant: 'secondary', }, }"
          },
          {
            "kind": "variable",
            "name": "SecondaryNeutral",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Button', variant: 'secondary', neutral: true, }, }"
          },
          {
            "kind": "variable",
            "name": "SecondaryNeutralDisabled",
            "type": {
              "text": "object"
            },
            "default": "{ args: { disabled: true, text: 'Button', variant: 'secondary', neutral: true, }, }"
          },
          {
            "kind": "variable",
            "name": "SecondaryNeutralLoading",
            "type": {
              "text": "object"
            },
            "default": "{ args: { loading: true, text: 'Button', variant: 'secondary', neutral: true, }, }"
          },
          {
            "kind": "variable",
            "name": "SecondaryNeutralInverse",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Button', variant: 'secondary', neutral: true, inverse: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "SecondaryNeutralInverseDisabled",
            "type": {
              "text": "object"
            },
            "default": "{ args: { disabled: true, text: 'Button', variant: 'secondary', neutral: true, inverse: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "SecondaryNeutralInverseLoading",
            "type": {
              "text": "object"
            },
            "default": "{ args: { loading: true, text: 'Button', variant: 'secondary', neutral: true, inverse: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "SecondaryInverse",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Button', variant: 'secondary', inverse: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "SecondaryInverseDisabled",
            "type": {
              "text": "object"
            },
            "default": "{ args: { disabled: true, text: 'Button', variant: 'secondary', inverse: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "SecondaryInverseLoading",
            "type": {
              "text": "object"
            },
            "default": "{ args: { loading: true, text: 'Button', variant: 'secondary', inverse: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "SecondaryInverseSmall",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Button', variant: 'secondary', inverse: true, size: 'sm', }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "SecondaryInverseIconOnly",
            "type": {
              "text": "object"
            },
            "default": "{ args: { hideText: true, svg: svgCaretUp, iconRotateDegree: '90', iconPosition: 'after', text: 'Button With Visually Hidden Text', variant: 'secondary', inverse: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "SecondaryInverseFullWidth",
            "type": {
              "text": "object"
            },
            "default": "{ args: { fullWidth: true, text: 'Button', variant: 'secondary', inverse: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "Tertiary",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Button', variant: 'tertiary', }, }"
          },
          {
            "kind": "variable",
            "name": "TertiaryDisabled",
            "type": {
              "text": "object"
            },
            "default": "{ args: { disabled: true, text: 'Button', variant: 'tertiary', }, }"
          },
          {
            "kind": "variable",
            "name": "TertiaryNeutral",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Button', variant: 'tertiary', neutral: true, }, }"
          },
          {
            "kind": "variable",
            "name": "TertiaryNeutralDisabled",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Button', variant: 'tertiary', neutral: true, disabled: true, }, }"
          },
          {
            "kind": "variable",
            "name": "TertiaryNeutralLoading",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Button', variant: 'tertiary', neutral: true, loading: true, }, }"
          },
          {
            "kind": "variable",
            "name": "TertiaryInverse",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Button', variant: 'tertiary', inverse: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "TertiaryInverseNeutral",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Button', variant: 'tertiary', inverse: true, neutral: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "TertiaryInverseDisabled",
            "type": {
              "text": "object"
            },
            "default": "{ args: { disabled: true, text: 'Button', variant: 'tertiary', inverse: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "TertiaryInverseLoading",
            "type": {
              "text": "object"
            },
            "default": "{ args: { loading: true, text: 'Button', variant: 'tertiary', inverse: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "TertiaryInverseSmall",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Button', variant: 'tertiary', inverse: true, size: 'sm', }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "TertiaryInverseIconOnly",
            "type": {
              "text": "object"
            },
            "default": "{ args: { hideText: true, svg: svgCaretUp, iconRotateDegree: '90', iconPosition: 'after', text: 'Button With Visually Hidden Text', variant: 'tertiary', inverse: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "TertiaryInverseFullWidth",
            "type": {
              "text": "object"
            },
            "default": "{ args: { fullWidth: true, text: 'Button', variant: 'tertiary', inverse: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "FullWidth",
            "type": {
              "text": "object"
            },
            "default": "{ args: { fullWidth: true, text: 'Button', }, }"
          },
          {
            "kind": "variable",
            "name": "Small",
            "type": {
              "text": "object"
            },
            "default": "{ args: { size: 'sm', text: 'Button', }, }"
          },
          {
            "kind": "variable",
            "name": "SmallIconAfter",
            "type": {
              "text": "object"
            },
            "default": "{ args: { svg: svgCaretUp, iconRotateDegree: '90', iconPosition: 'after', size: 'sm', text: 'Button', }, }"
          },
          {
            "kind": "variable",
            "name": "Large",
            "type": {
              "text": "object"
            },
            "default": "{ args: { size: 'lg', text: 'Button', }, }"
          },
          {
            "kind": "variable",
            "name": "LargeIconAfter",
            "type": {
              "text": "object"
            },
            "default": "{ args: { svg: svgCaretUp, iconRotateDegree: '90', iconPosition: 'after', size: 'lg', text: 'Button', }, }"
          },
          {
            "kind": "variable",
            "name": "IconOnlyPrimary",
            "type": {
              "text": "object"
            },
            "default": "{ args: { hideText: true, svg: svgCaretUp, iconRotateDegree: '90', iconPosition: 'after', text: 'Button With Visually Hidden Text', variant: 'primary', }, }",
            "description": "When implementing an icon only button, passing `hideText` will visually hide the button's text while still allowing\nit to be read by accessibility devices."
          },
          {
            "kind": "variable",
            "name": "IconOnlySecondary",
            "type": {
              "text": "object"
            },
            "default": "{ args: { hideText: true, svg: svgCaretUp, iconRotateDegree: '90', iconPosition: 'after', text: 'Button With Visually Hidden Text', variant: 'secondary', }, }"
          },
          {
            "kind": "variable",
            "name": "IconOnlySecondaryNeutralInverse",
            "type": {
              "text": "object"
            },
            "default": "{ args: { hideText: true, svg: svgCaretUp, iconRotateDegree: '90', iconPosition: 'after', text: 'Button With Visually Hidden Text', variant: 'secondary', inverse: true, neutral: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "IconOnlyTertiary",
            "type": {
              "text": "object"
            },
            "default": "{ args: { hideText: true, svg: svgCaretUp, iconRotateDegree: '90', iconPosition: 'after', text: 'Button With Visually Hidden Text', variant: 'tertiary', }, }"
          },
          {
            "kind": "variable",
            "name": "IconOnlyNeutralTertiary",
            "type": {
              "text": "object"
            },
            "default": "{ args: { hideText: true, svg: svgCaretUp, iconRotateDegree: '90', iconPosition: 'after', text: 'Button With Visually Hidden Text', variant: 'tertiary', neutral: true, }, }"
          },
          {
            "kind": "variable",
            "name": "IconOnlyNeutralInverseTertiary",
            "type": {
              "text": "object"
            },
            "default": "{ args: { hideText: true, svg: svgCaretUp, iconRotateDegree: '90', iconPosition: 'after', text: 'Button With Visually Hidden Text', variant: 'tertiary', neutral: true, inverse: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "Loading",
            "type": {
              "text": "object"
            },
            "default": "{ args: { loading: true, text: 'Submit', variant: 'primary', }, }"
          },
          {
            "kind": "variable",
            "name": "LoadingComplete",
            "type": {
              "text": "object"
            },
            "default": "{ args: { loadingComplete: true, text: 'Submit', variant: 'primary', }, }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "meta",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Primary",
            "declaration": {
              "name": "Primary",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PrimarySubmit",
            "declaration": {
              "name": "PrimarySubmit",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PrimaryDisabled",
            "declaration": {
              "name": "PrimaryDisabled",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PrimaryInverse",
            "declaration": {
              "name": "PrimaryInverse",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PrimaryInverseDisabled",
            "declaration": {
              "name": "PrimaryInverseDisabled",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PrimaryInverseLoading",
            "declaration": {
              "name": "PrimaryInverseLoading",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PrimaryInverseSmall",
            "declaration": {
              "name": "PrimaryInverseSmall",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PrimaryInverseIconOnly",
            "declaration": {
              "name": "PrimaryInverseIconOnly",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PrimaryInverseFullWidth",
            "declaration": {
              "name": "PrimaryInverseFullWidth",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconBefore",
            "declaration": {
              "name": "IconBefore",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconAfter",
            "declaration": {
              "name": "IconAfter",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Secondary",
            "declaration": {
              "name": "Secondary",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SecondaryDisabled",
            "declaration": {
              "name": "SecondaryDisabled",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SecondaryNeutral",
            "declaration": {
              "name": "SecondaryNeutral",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SecondaryNeutralDisabled",
            "declaration": {
              "name": "SecondaryNeutralDisabled",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SecondaryNeutralLoading",
            "declaration": {
              "name": "SecondaryNeutralLoading",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SecondaryNeutralInverse",
            "declaration": {
              "name": "SecondaryNeutralInverse",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SecondaryNeutralInverseDisabled",
            "declaration": {
              "name": "SecondaryNeutralInverseDisabled",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SecondaryNeutralInverseLoading",
            "declaration": {
              "name": "SecondaryNeutralInverseLoading",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SecondaryInverse",
            "declaration": {
              "name": "SecondaryInverse",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SecondaryInverseDisabled",
            "declaration": {
              "name": "SecondaryInverseDisabled",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SecondaryInverseLoading",
            "declaration": {
              "name": "SecondaryInverseLoading",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SecondaryInverseSmall",
            "declaration": {
              "name": "SecondaryInverseSmall",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SecondaryInverseIconOnly",
            "declaration": {
              "name": "SecondaryInverseIconOnly",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SecondaryInverseFullWidth",
            "declaration": {
              "name": "SecondaryInverseFullWidth",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Tertiary",
            "declaration": {
              "name": "Tertiary",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TertiaryDisabled",
            "declaration": {
              "name": "TertiaryDisabled",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TertiaryNeutral",
            "declaration": {
              "name": "TertiaryNeutral",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TertiaryNeutralDisabled",
            "declaration": {
              "name": "TertiaryNeutralDisabled",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TertiaryNeutralLoading",
            "declaration": {
              "name": "TertiaryNeutralLoading",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TertiaryInverse",
            "declaration": {
              "name": "TertiaryInverse",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TertiaryInverseNeutral",
            "declaration": {
              "name": "TertiaryInverseNeutral",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TertiaryInverseDisabled",
            "declaration": {
              "name": "TertiaryInverseDisabled",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TertiaryInverseLoading",
            "declaration": {
              "name": "TertiaryInverseLoading",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TertiaryInverseSmall",
            "declaration": {
              "name": "TertiaryInverseSmall",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TertiaryInverseIconOnly",
            "declaration": {
              "name": "TertiaryInverseIconOnly",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TertiaryInverseFullWidth",
            "declaration": {
              "name": "TertiaryInverseFullWidth",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "FullWidth",
            "declaration": {
              "name": "FullWidth",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Small",
            "declaration": {
              "name": "Small",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SmallIconAfter",
            "declaration": {
              "name": "SmallIconAfter",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Large",
            "declaration": {
              "name": "Large",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "LargeIconAfter",
            "declaration": {
              "name": "LargeIconAfter",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconOnlyPrimary",
            "declaration": {
              "name": "IconOnlyPrimary",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconOnlySecondary",
            "declaration": {
              "name": "IconOnlySecondary",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconOnlySecondaryNeutralInverse",
            "declaration": {
              "name": "IconOnlySecondaryNeutralInverse",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconOnlyTertiary",
            "declaration": {
              "name": "IconOnlyTertiary",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconOnlyNeutralTertiary",
            "declaration": {
              "name": "IconOnlyNeutralTertiary",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconOnlyNeutralInverseTertiary",
            "declaration": {
              "name": "IconOnlyNeutralInverseTertiary",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Loading",
            "declaration": {
              "name": "Loading",
              "module": "components/button/button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "LoadingComplete",
            "declaration": {
              "name": "LoadingComplete",
              "module": "components/button/button.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/button/button.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The size and state of buttons on the screen serve as visual cues for the user\nabout what they can do and what they should do next.\nThey indicate the availability and priority of the action on the page.\n\n- Buttons are a single call-to-action where a single click performs that action\n- Use buttons when you are performing an action which is almost always on the same page\n- Use a link instead of a button when you're navigating to another place\n\n## How to Use\n\nButtons are distinguished by three key properties:\n\n- **Visual Priority**: Style and size: Primary, Secondary, or Tertiary styles;\n  each with large and small variations\n- **State**: Interaction state: hover/click (press), focus, disabled,\n  and submitting/loading (only for large buttons)\n- **Brand**: Styles determined by the site or component theme\n\n### Usage Guidelines\n\nPrimary, Secondary and Tertiary styles emphasize or de-emphasize an action. They also define\nbackground, font style, and border colors. Large and small sizing assists with visual priority by defining button\nheights, left and right internal padding, and font-size.\n\n#### System Feedback\nEach button has a default and hover/click (press) state that give the user feedback\nthat they have successfully interacted with a button.\nButton presses should always be combined with other types of timely system feedback.\nExamples of system feedback may be a page refresh, exposing additional controls or content,\ndialogs, alerts and notifications.\nIf there is perceived a delay in system response, generally due to technical constraints,\nprovide a progress or loading indicator.\n\n#### Button Text\n\n- Button text should be as short and simple as possible, ideally a maximum of 3 words.\n- Use Title Case for readability.\n- They should not include punctuation (exception: \"Loading...\").\n- They should not be used as an indicator of what happens on the next page, or as a substitute\nfor a progress meter.\n\n#### Button With Icon\n\nFor button with icon:\n- **iconRotateDegree** & **iconFlipDirection** props are optional.\n- They are used to set up the correct direction for icons, for example,\narrows, caret up or caret down.\n\n#### Button Styling\n\n- DO use only the styles of the brand you are working on.\n- DO NOT combine styles, even if the page is co-branded.\n\n#### Button Sizes\n- DO always pair like sizes together and maintain the hierarchy of Primary and Secondary/Tertiary.\n- DO NOT mix sizes of buttons when they are used together as a group.\n\n#### Input Pairing\n\nPrimary and Secondary buttons may be paired with input fields.\nOnly one Primary button may appear on each screen.\nUse the Secondary button when there are multiple in-context buttons\nand/or when there is an emphasized page level button.\nWhen used in a form context, the button's `type` needs to be `submit` to pass along form data.\n\n- DO use only large buttons with input fields.\n- DO NOT use small buttons with input fields.",
            "name": "Cre8Button",
            "members": [
              {
                "kind": "field",
                "name": "text",
                "type": {
                  "text": "string"
                },
                "default": "'Button'",
                "description": "The button text. Should be as short and simple as possible, ideally a maximum of 3 words.\n- Use Title Case for readability.\n- Should not include punctuation (exception: \"Loading...\").\n- Should not be used as an indicator of what happens on the next page, or as a substitute for a progress meter.",
                "attribute": "text"
              },
              {
                "kind": "field",
                "name": "variant",
                "type": {
                  "text": "'primary' | 'secondary' | 'tertiary' | undefined"
                },
                "default": "'primary'",
                "description": "Style variant\n- **primary** renders the button used for primary actions. Presents highest visual priority.\n  When grouped with other buttons, only one primary is allowed\n- **secondary** renders a secondary button. Presents a lower visual priority\n- **tertiary** renders a tertiary button. Presents the lowest visual priority.\n  Should be used in limited amounts - consider if a link (`<a>`) would be more appropriate",
                "attribute": "variant"
              },
              {
                "kind": "field",
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Disabled attribute",
                "attribute": "disabled",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "neutral",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "This property is for a neutral button propery mainly used for the secondary or tertiary button variant.",
                "attribute": "neutral",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "inverse",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverse attribute",
                "attribute": "inverse",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "href",
                "type": {
                  "text": "string | undefined"
                },
                "description": "\nProvide this property if you intend to use button styles for an anchor tag (`<a>`).\nThis changes the component markup from `<button>` usage to `<a>` instead.",
                "attribute": "href"
              },
              {
                "kind": "field",
                "name": "target",
                "type": {
                  "text": "'_blank' | '_self' | '_parent' | '_top' | undefined"
                },
                "description": "Target attribute for a link if providing `href` to style a link as a button\n- **_blank** yields a link that opens in a new tab\n- **_self** yields a link that loads the URL into the same browsing context as the current one.\n  This is the default behavior\n- **_parent** yields a link that loads the URL into the parent browsing context of the current one.\n  If there is no parent, this behaves the same way as _self\n- **_top** yields a link that loads the URL into the top-level browsing context.\n  If there is no parent, this behaves the same way as _self.",
                "attribute": "target"
              },
              {
                "kind": "field",
                "name": "type",
                "type": {
                  "text": "'button' | 'submit' | 'reset'"
                },
                "default": "'button'",
                "description": "Type of button.\n- **button** (default) button has no default behavior and does nothing unless provided some sort\nof client-side trigger\n- **submit** button for submitting form data to a server",
                "attribute": "type"
              },
              {
                "kind": "field",
                "name": "rel",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Rel if this is an <a> element - this swaps <button> for <a>",
                "attribute": "rel"
              },
              {
                "kind": "field",
                "name": "iconName",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Deprecated: iconName, use svg instead\nIcon name if including an icon within a button.\nMust include the icon's position with `iconPostion`. This prop is used for <cre8-icon-legacy>",
                "deprecated": "true",
                "attribute": "iconName"
              },
              {
                "kind": "field",
                "name": "svg",
                "type": {
                  "text": "string | undefined"
                },
                "description": "svg as a raw string\n- For button with icon, the icon is defined by this prop.\n- Pass in a raw svg as a String for using <cre8-icon>\n- Must include the icon's position with `iconPostion`.",
                "attribute": "svg"
              },
              {
                "kind": "field",
                "name": "iconRotateDegree",
                "type": {
                  "text": "number | undefined"
                },
                "default": "0",
                "description": "iconRotateDegree is used for <cre8-icon> to set the arrow in the correct direction",
                "attribute": "iconRotateDegree"
              },
              {
                "kind": "field",
                "name": "iconFlipDirection",
                "type": {
                  "text": "string | undefined"
                },
                "description": "iconFlipDirection is used for <cre8-icon> to set the icon in the correct direction",
                "attribute": "iconFlipDirection"
              },
              {
                "kind": "field",
                "name": "iconPosition",
                "type": {
                  "text": "'before' | 'after' | undefined"
                },
                "default": "undefined",
                "description": "Icon position. Must include the name of the icon with `iconName`\n\n- **before** places the icon before the button text\n- **after** places the icon after the button text",
                "attribute": "iconPosition"
              },
              {
                "kind": "field",
                "name": "size",
                "type": {
                  "text": "'sm' | 'md' | 'lg'"
                },
                "default": "'md'",
                "description": "Size variants add another way to increase or decrease visual priority of a button.\n- **sm** Shrinks the button typography and overall size from the default. Use when vertical space is constrained.\n- **md** This is the default value for the size.\n- **lg** Increases the button typography and overall size from the default.",
                "attribute": "size"
              },
              {
                "kind": "field",
                "name": "hideText",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Visually hide button text. Text is still accessible to assistive technology.\nUse this for icon-only buttons for accessibility",
                "attribute": "hideText",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "fullWidth",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Full width button",
                "attribute": "fullWidth",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "loading",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "* Changes styling to an active state with a spinning icon.\n* Adds accessibility treatment by:\n  * announcing via voiceover when the loading success/error state via a aria-live region\n  * setting `aria-disabled`\n* Disables click events / form submitting while allowing focus (for accessibility)",
                "attribute": "loading",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "loadingComplete",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "* Variant of the loading button that:\n  * Removes loading spinner\n  * Informs the SR user that the loading status is now complete, with visually hidden text in the live area",
                "attribute": "loadingComplete",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "ariaLive",
                "type": {
                  "text": "'polite' | 'assertive'"
                },
                "default": "'assertive'",
                "description": "Controls whether your loading status update to voiceover users will occur\nimmediately (used for more urgently needed updates) using `assertive` or at the next convenient\npause in their navigation using `polite`.",
                "attribute": "ariaLive"
              },
              {
                "kind": "field",
                "name": "splitButtonType",
                "type": {
                  "text": "'text' | 'caret' | undefined"
                },
                "description": "These two subvariants of the split button style the two seperate buttons to style as a singular button",
                "attribute": "splitButtonType"
              },
              {
                "kind": "field",
                "name": "buttonAriaExpanded",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Button aria expanded attribute",
                "attribute": "buttonAriaExpanded",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "field",
                "type": {
                  "text": "HTMLButtonElement"
                }
              },
              {
                "kind": "method",
                "name": "formSubmit"
              },
              {
                "kind": "method",
                "name": "formReset"
              },
              {
                "kind": "method",
                "name": "generateIconBefore",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "generateIconAfter",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_buttonClick",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "MouseEvent | KeyboardEvent"
                    }
                  }
                ]
              }
            ],
            "attributes": [
              {
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Disabled attribute",
                "fieldName": "disabled",
                "attribute": "disabled"
              },
              {
                "name": "neutral",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "This property is for a neutral button propery mainly used for the secondary or tertiary button variant.",
                "fieldName": "neutral",
                "attribute": "neutral"
              },
              {
                "name": "inverse",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverse attribute",
                "fieldName": "inverse",
                "attribute": "inverse"
              },
              {
                "name": "fullWidth",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Full width button",
                "fieldName": "fullWidth",
                "attribute": "fullWidth"
              },
              {
                "name": "loading",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "* Changes styling to an active state with a spinning icon.\n* Adds accessibility treatment by:\n  * announcing via voiceover when the loading success/error state via a aria-live region\n  * setting `aria-disabled`\n* Disables click events / form submitting while allowing focus (for accessibility)",
                "fieldName": "loading",
                "attribute": "loading"
              },
              {
                "name": "loadingComplete",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "* Variant of the loading button that:\n  * Removes loading spinner\n  * Informs the SR user that the loading status is now complete, with visually hidden text in the live area",
                "fieldName": "loadingComplete",
                "attribute": "loadingComplete"
              },
              {
                "name": "text",
                "type": {
                  "text": "string"
                },
                "default": "'Button'",
                "description": "The button text. Should be as short and simple as possible, ideally a maximum of 3 words.\n- Use Title Case for readability.\n- Should not include punctuation (exception: \"Loading...\").\n- Should not be used as an indicator of what happens on the next page, or as a substitute for a progress meter.",
                "fieldName": "text"
              },
              {
                "name": "variant",
                "type": {
                  "text": "'primary' | 'secondary' | 'tertiary' | undefined"
                },
                "default": "'primary'",
                "description": "Style variant\n- **primary** renders the button used for primary actions. Presents highest visual priority.\n  When grouped with other buttons, only one primary is allowed\n- **secondary** renders a secondary button. Presents a lower visual priority\n- **tertiary** renders a tertiary button. Presents the lowest visual priority.\n  Should be used in limited amounts - consider if a link (`<a>`) would be more appropriate",
                "fieldName": "variant"
              },
              {
                "name": "href",
                "type": {
                  "text": "string | undefined"
                },
                "description": "\nProvide this property if you intend to use button styles for an anchor tag (`<a>`).\nThis changes the component markup from `<button>` usage to `<a>` instead.",
                "fieldName": "href"
              },
              {
                "name": "target",
                "type": {
                  "text": "'_blank' | '_self' | '_parent' | '_top' | undefined"
                },
                "description": "Target attribute for a link if providing `href` to style a link as a button\n- **_blank** yields a link that opens in a new tab\n- **_self** yields a link that loads the URL into the same browsing context as the current one.\n  This is the default behavior\n- **_parent** yields a link that loads the URL into the parent browsing context of the current one.\n  If there is no parent, this behaves the same way as _self\n- **_top** yields a link that loads the URL into the top-level browsing context.\n  If there is no parent, this behaves the same way as _self.",
                "fieldName": "target"
              },
              {
                "name": "type",
                "type": {
                  "text": "'button' | 'submit' | 'reset'"
                },
                "default": "'button'",
                "description": "Type of button.\n- **button** (default) button has no default behavior and does nothing unless provided some sort\nof client-side trigger\n- **submit** button for submitting form data to a server",
                "fieldName": "type"
              },
              {
                "name": "rel",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Rel if this is an <a> element - this swaps <button> for <a>",
                "fieldName": "rel"
              },
              {
                "name": "iconName",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Deprecated: iconName, use svg instead\nIcon name if including an icon within a button.\nMust include the icon's position with `iconPostion`. This prop is used for <cre8-icon-legacy>",
                "deprecated": "true",
                "fieldName": "iconName"
              },
              {
                "name": "svg",
                "type": {
                  "text": "string | undefined"
                },
                "description": "svg as a raw string\n- For button with icon, the icon is defined by this prop.\n- Pass in a raw svg as a String for using <cre8-icon>\n- Must include the icon's position with `iconPostion`.",
                "fieldName": "svg"
              },
              {
                "name": "iconRotateDegree",
                "type": {
                  "text": "number | undefined"
                },
                "default": "0",
                "description": "iconRotateDegree is used for <cre8-icon> to set the arrow in the correct direction",
                "fieldName": "iconRotateDegree"
              },
              {
                "name": "iconFlipDirection",
                "type": {
                  "text": "string | undefined"
                },
                "description": "iconFlipDirection is used for <cre8-icon> to set the icon in the correct direction",
                "fieldName": "iconFlipDirection"
              },
              {
                "name": "iconPosition",
                "type": {
                  "text": "'before' | 'after' | undefined"
                },
                "default": "undefined",
                "description": "Icon position. Must include the name of the icon with `iconName`\n\n- **before** places the icon before the button text\n- **after** places the icon after the button text",
                "fieldName": "iconPosition"
              },
              {
                "name": "size",
                "type": {
                  "text": "'sm' | 'md' | 'lg'"
                },
                "default": "'md'",
                "description": "Size variants add another way to increase or decrease visual priority of a button.\n- **sm** Shrinks the button typography and overall size from the default. Use when vertical space is constrained.\n- **md** This is the default value for the size.\n- **lg** Increases the button typography and overall size from the default.",
                "fieldName": "size"
              },
              {
                "name": "hideText",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Visually hide button text. Text is still accessible to assistive technology.\nUse this for icon-only buttons for accessibility",
                "fieldName": "hideText"
              },
              {
                "name": "ariaLive",
                "type": {
                  "text": "'polite' | 'assertive'"
                },
                "default": "'assertive'",
                "description": "Controls whether your loading status update to voiceover users will occur\nimmediately (used for more urgently needed updates) using `assertive` or at the next convenient\npause in their navigation using `polite`.",
                "fieldName": "ariaLive"
              },
              {
                "name": "splitButtonType",
                "type": {
                  "text": "'text' | 'caret' | undefined"
                },
                "description": "These two subvariants of the split button style the two seperate buttons to style as a singular button",
                "fieldName": "splitButtonType"
              },
              {
                "name": "buttonAriaExpanded",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Button aria expanded attribute",
                "fieldName": "buttonAriaExpanded"
              }
            ],
            "superclass": {
              "name": "Cre8FormElement",
              "module": "/components/cre8-form-element"
            },
            "tagName": "cre8-button",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Button",
            "declaration": {
              "name": "Cre8Button",
              "module": "components/button/button.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-button",
            "declaration": {
              "name": "Cre8Button",
              "module": "components/button/button.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Button",
              "module": "components/button/button.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/card/card.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #CARD :host { display: block; } /** * 1) A card is an organized block that typically contains a title, image, * text, and/or calls to action. It is made up of an optional header slot, required * body slot, and optional footer slot to place other Components and content within. */ .cre8-c-card { overflow: hidden; display: flex; flex-direction: column; height: 100%; width: 100%; padding: size(3); gap: size(2); border-color: var(--cre8-color-border-default); border-style: var(--cre8-border-style-default); border-width: var(--cre8-border-width-default); border-radius: var(--cre8-border-radius-default); background: var(--cre8-color-bg-default); } /** * Horizontal card * 1) Organized block with flex-direction set to row so that header => footer appears * from left to right rather than top to bottom */ .cre8-c-card--horizontal{ flex-direction: row; align-items: center; justify-content: center; } /** * Bare card * 1) Organized block without a border, background, or padding */ .cre8-c-card--bare { border: 0; padding: 0; gap: 0; box-shadow: none; } /** * Horizontal-bare card * 1) Organized block with flex-direction set to row so that header => footer appears * from left to right rather than top to bottom without a border, background, or padding */ .cre8-c-card--horizontal-bare{ flex-direction: row; border: 0; padding: 0; gap: 0; box-shadow: none; align-items: center; justify-content: center; } /** * Center aligned card * 1) Center content and text within the card */ .cre8-c-card--align-center { text-align: center; /* 1 */ align-items: center; /* 1 */ justify-content: center; /* 1 */ } /** * Slotted image within a card * 1) Make the image full width */ ::slotted(img) { width: 100%; } /** * Card header * 1) Remove flex so that body always takes up remaining space */ .cre8-c-card__header { display: block; flex: none; /* 1 */ } /** * Card body * 1) Flex applied to always fill the remaining space of the card */ .cre8-c-card__body { display: block; flex: 1 1 auto; /* 1 */ } /** * Card footer * 1) Remove flex so that body always takes up remaining space */ .cre8-c-card__footer { display: block; flex: none; /* 1 */ .cre8-c-card--bare & { padding: 0; } .cre8-c-card--horizontal-bare & { padding: 0; } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/card/card.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/card/card.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{ args: { header: '<cre8-icon-legacy slot=\"header\" name=\"rx\" style=\"--cre8-icon-width: 32px; --cre8-icon-height: 32px;\"></cre8-icon-legacy>', body: `<cre8-text-passage> <cre8-heading headingtagname=\"h2\" variant=\"title-default\">Bactrim</cre8-heading> <p style=\"color: var(--cre8-color-content-subtle\">Filled by Express Scripts</p> </cre8-text-passage>`, footer: '<cre8-badge slot=\"footer\" status=\"error\" variant=\"light\" text=\"Shipping Delay\"></cre8-badge>', }, }"
          },
          {
            "kind": "variable",
            "name": "Horizontal",
            "type": {
              "text": "object"
            },
            "default": "{ args: { ...Default.args, footer: '<cre8-text-passage slot=\"footer\"><p style=\"color: var(--cre8-color-content-subtle\">15 mg</p></cre8-text-passage>', variant: 'horizontal', }, }"
          },
          {
            "kind": "variable",
            "name": "Bare",
            "type": {
              "text": "object"
            },
            "default": "{ args: { ...Default.args, variant: 'bare', }, }"
          },
          {
            "kind": "variable",
            "name": "HorizontalBare",
            "type": {
              "text": "object"
            },
            "default": "{ args: { ...Horizontal.args, variant: 'horizontal-bare', }, }"
          },
          {
            "kind": "variable",
            "name": "AlignCenter",
            "type": {
              "text": "object"
            },
            "default": "{ args: { ...Default.args, align: 'center', }, }"
          },
          {
            "kind": "variable",
            "name": "HorizontalAlignCenter",
            "type": {
              "text": "object"
            },
            "default": "{ args: { ...Horizontal.args, align: 'center', variant: 'horizontal' }, }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/card/card.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/card/card.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Horizontal",
            "declaration": {
              "name": "Horizontal",
              "module": "components/card/card.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Bare",
            "declaration": {
              "name": "Bare",
              "module": "components/card/card.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "HorizontalBare",
            "declaration": {
              "name": "HorizontalBare",
              "module": "components/card/card.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "AlignCenter",
            "declaration": {
              "name": "AlignCenter",
              "module": "components/card/card.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "HorizontalAlignCenter",
            "declaration": {
              "name": "HorizontalAlignCenter",
              "module": "components/card/card.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/card/card.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The card component acts a general container element sectioned off by slots: `header`, `body`, `footer`.\n\n# How to Use\n1. Wrap the card component tags around any html template code which has been properly imported into the file.\n2. Decide the layout that best fits the designs assigned to your work.\nGenerally, we recommend visual elements appear in the `header` (optional slot),\nwhile `body` remains reserved for custom html content that gives further context and meaning to the `header`.\n3. The card defaults to a column and includes a `horizontal` directional variant.\nIf you have a card where the layout of the content is more aligned horizontally,\nusing the `horizontal` variant will ease the construction of your component\n4. Finally, we typically recommend reserving the footer for any interactive elements\nsuch as buttons for navigating to further information.\n\n\nNOTE: Adjusting props not mentioned above may result in unpredictable states",
            "name": "Cre8Card",
            "slots": [
              {
                "description": "The card's body content",
                "name": "body"
              },
              {
                "description": "(Optional) Content in the card's header",
                "name": "header"
              },
              {
                "description": "(Optional) Content in the card's footer",
                "name": "footer"
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "variant",
                "type": {
                  "text": "'bare' | 'horizontal' | 'horizontal-bare' | undefined"
                },
                "description": "Style variants\n- **bare** renders a card without a border and without padding around the content\n- **horizontal** renders a card with header, body, footer oriented in a row rather than a column\n- **horizontal-bare** renders a card with header, body, footer oriented in a row rather than a column\n  without a border and without padding around the content",
                "attribute": "variant"
              },
              {
                "kind": "field",
                "name": "align",
                "type": {
                  "text": "'center' | undefined"
                },
                "description": "Alignment variant\n- **center** renders a card that has center aligned content/text",
                "attribute": "align"
              }
            ],
            "attributes": [
              {
                "name": "variant",
                "type": {
                  "text": "'bare' | 'horizontal' | 'horizontal-bare' | undefined"
                },
                "description": "Style variants\n- **bare** renders a card without a border and without padding around the content\n- **horizontal** renders a card with header, body, footer oriented in a row rather than a column\n- **horizontal-bare** renders a card with header, body, footer oriented in a row rather than a column\n  without a border and without padding around the content",
                "fieldName": "variant"
              },
              {
                "name": "align",
                "type": {
                  "text": "'center' | undefined"
                },
                "description": "Alignment variant\n- **center** renders a card that has center aligned content/text",
                "fieldName": "align"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-card",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Card",
            "declaration": {
              "name": "Cre8Card",
              "module": "components/card/card.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-card",
            "declaration": {
              "name": "Cre8Card",
              "module": "components/card/card.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Card",
              "module": "components/card/card.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/button-group/button-group.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /*------------------------------------*\\ #BUTTON-GROUP \\*------------------------------------*/ :host { display: inline-flex; } /** * 1) Button Group */ .cre8-c-button-group { display: flex; flex-wrap: wrap; gap: size(2); } /** * Button group for Modals */ .cre8-c-button-group--responsive-full-width { flex-direction: column; --cre8-button-width: 100%; @media all and (min-width:$cre8-breakpoint-md) { flex-direction: row; --cre8-button-width: auto; } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/button-group/button-group.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/button-group/button-group.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "ResponsiveFullWidth",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "BorderToShowAlignment",
            "parameters": [
              {
                "name": "args"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/button-group/button-group.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/button-group/button-group.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "ResponsiveFullWidth",
            "declaration": {
              "name": "ResponsiveFullWidth",
              "module": "components/button-group/button-group.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "BorderToShowAlignment",
            "declaration": {
              "name": "BorderToShowAlignment",
              "module": "components/button-group/button-group.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/button-group/button-group.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8ButtonGroup",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "orientation",
                "type": {
                  "text": "'responsive-full-width' | undefined"
                },
                "description": "Responsive Button Group (for modals)",
                "attribute": "orientation"
              }
            ],
            "attributes": [
              {
                "name": "orientation",
                "type": {
                  "text": "'responsive-full-width' | undefined"
                },
                "description": "Responsive Button Group (for modals)",
                "fieldName": "orientation"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-button-group",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8ButtonGroup",
            "declaration": {
              "name": "Cre8ButtonGroup",
              "module": "components/button-group/button-group.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-button-group",
            "declaration": {
              "name": "Cre8ButtonGroup",
              "module": "components/button-group/button-group.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8ButtonGroup",
              "module": "components/button-group/button-group.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/checkbox-field/checkbox-field.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /*------------------------------------*\\ #CHECKBOX-FIELD \\*------------------------------------*/ :host { display: flex; } /** * 1) Fieldset used for checkbox items */ .cre8-c-checkbox-field { border: none; padding: 0; margin: 0; } /** * Checkbox field legend */ .cre8-c-checkbox-field__legend { @include cre8-typography-label-small(); margin-bottom: size(1); } /** * Checkbox list */ .cre8-c-checkbox-field__list { display: flex; flex-direction: column; }`"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/checkbox-field/checkbox-field.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/checkbox-field/checkbox-field.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{}"
          },
          {
            "kind": "variable",
            "name": "WithFieldNote",
            "type": {
              "text": "object"
            },
            "default": "{ args: { ariaDescribedBy: 'checkbox-field-message', fieldNote: 'This is a field note of the fieldset', } }"
          },
          {
            "kind": "variable",
            "name": "WithErrorFieldNote",
            "type": {
              "text": "object"
            },
            "default": "{ args: { ariaDescribedBy: 'checkbox-field-error-message', fieldNote: 'This is an error note on the fieldset!', fieldNoteIsError: true, fieldNoteIconName: 'error', } }"
          },
          {
            "kind": "variable",
            "name": "WithSuccessFieldNote",
            "type": {
              "text": "object"
            },
            "default": "{ args: { ariaDescribedBy: 'checkbox-field-success-message', fieldNote: 'This is a success note on the fieldset!', fieldNoteIsSuccess: true, fieldNoteIconName: 'success', } }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/checkbox-field/checkbox-field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/checkbox-field/checkbox-field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "WithFieldNote",
            "declaration": {
              "name": "WithFieldNote",
              "module": "components/checkbox-field/checkbox-field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "WithErrorFieldNote",
            "declaration": {
              "name": "WithErrorFieldNote",
              "module": "components/checkbox-field/checkbox-field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "WithSuccessFieldNote",
            "declaration": {
              "name": "WithSuccessFieldNote",
              "module": "components/checkbox-field/checkbox-field.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/checkbox-field/checkbox-field.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "Checkbox Field is the parent container for `checkbox-field-item`.\nIt is required to allow for grouping numerous checkboxes that need additional context (in the form of `<legend>`).\nIt also provides accessibility roles, aria attributes and field note messaging on the group.\n\nSee `checkbox-field-item` for more guidance on its usage.",
            "name": "Cre8CheckboxField",
            "slots": [
              {
                "description": "The component content, which should be a set of `checkbox-field-item`s",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "label",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Checkbox container legend label",
                "attribute": "label"
              },
              {
                "kind": "field",
                "name": "fieldNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Checkbox container fieldnote",
                "attribute": "fieldNote"
              },
              {
                "kind": "field",
                "name": "ariaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Checkbox container fieldnote aria describe by",
                "attribute": "ariaDescribedBy"
              },
              {
                "kind": "field",
                "name": "fieldNoteIconName",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Checkbox container fieldnote icon name",
                "attribute": "fieldNoteIconName"
              },
              {
                "kind": "field",
                "name": "fieldNoteKnockout",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Checkbox container fieldnote knockout",
                "attribute": "fieldNoteKnockout",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "fieldNoteIsSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Checkbox container fieldnote isSuccess",
                "attribute": "fieldNoteIsSuccess",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "fieldNoteIsError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Checkbox container fieldnote isError",
                "attribute": "fieldNoteIsError",
                "reflects": true
              }
            ],
            "attributes": [
              {
                "name": "fieldNoteKnockout",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Checkbox container fieldnote knockout",
                "fieldName": "fieldNoteKnockout",
                "attribute": "fieldNoteKnockout"
              },
              {
                "name": "fieldNoteIsSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Checkbox container fieldnote isSuccess",
                "fieldName": "fieldNoteIsSuccess",
                "attribute": "fieldNoteIsSuccess"
              },
              {
                "name": "fieldNoteIsError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Checkbox container fieldnote isError",
                "fieldName": "fieldNoteIsError",
                "attribute": "fieldNoteIsError"
              },
              {
                "name": "label",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Checkbox container legend label",
                "fieldName": "label"
              },
              {
                "name": "fieldNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Checkbox container fieldnote",
                "fieldName": "fieldNote"
              },
              {
                "name": "ariaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Checkbox container fieldnote aria describe by",
                "fieldName": "ariaDescribedBy"
              },
              {
                "name": "fieldNoteIconName",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Checkbox container fieldnote icon name",
                "fieldName": "fieldNoteIconName"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-checkbox-field",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8CheckboxField",
            "declaration": {
              "name": "Cre8CheckboxField",
              "module": "components/checkbox-field/checkbox-field.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-checkbox-field",
            "declaration": {
              "name": "Cre8CheckboxField",
              "module": "components/checkbox-field/checkbox-field.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8CheckboxField",
              "module": "components/checkbox-field/checkbox-field.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/checkbox-field-item/checkbox-field-item.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css` @import '../../design-tokens/core/scss/theming/component.scss'; @import '../../design-tokens/core/scss/theming/visibility.scss'; /*------------------------------------*\\ #CHECKBOX-FIELD-ITEM \\*------------------------------------*/ :host { display: inline-flex; flex-wrap: wrap; } /** * 1) Form field that is composed of a checkbox input, label, and an optional field note. */ .cre8-c-checkbox-field-item { display: flex; position: relative; align-items: center; margin-bottom: size(1); min-height: size(3); /** * Checkbox field item within last cre8-checkbox-field-item wrapper in a fieldset * 1) Remove margin bottom on last item */ :host(:last-child) & { margin-bottom: 0; /* 1 */ } } /** * Checkbox field item input */ .cre8-c-checkbox-field-item__input { opacity: 0; cursor: pointer; position: absolute; top: 0; left: 0; height: size(3); min-width: size(3); margin: 0; z-index: 1; /** * Checkbox field item input error */ .cre8-c-checkbox-field-item--disabled & { cursor: not-allowed; } } /** * Checkbox field item custom checkbox container */ .cre8-c-checkbox-field-item__custom-checkbox { display: flex; position: absolute; top: 0; left: 0; height: size(3); width: size(3); cursor: pointer; align-items: center; justify-content: center; border-radius: var(--cre8-border-radius-small); border-width: var(--cre8-border-width-default); border-style: var(--cre8-border-style-default); background-color: var(--cre8-color-bg-default); border-color: var(--cre8-color-border-strong); /** * Checkbox field item custom checkbox focus visible custom outline */ .cre8-c-checkbox-field-item__input:focus-visible + & { @include focus; .cre8-c-checkbox-field-item--error & { @include focusError; } } /** * Checkbox field item custom checkbox within checkbox field with error */ .cre8-c-checkbox-field-item--error & { background-color: var(--cre8-color-bg-default); border-color: var(--cre8-color-border-error); } /** * Checkbox field item custom checkbox within checkbox field with disabled */ .cre8-c-checkbox-field-item--disabled & { cursor: not-allowed; background-color: var(--cre8-color-bg-disabled); border-color: var(--cre8-color-border-disabled); } } /** * Checkbox field item custom checkbox when item is checked */ .cre8-c-checkbox-field-item__input:checked + .cre8-c-checkbox-field-item__custom-checkbox { background-color: var(--cre8-color-bg-brand-strong); /** * Checkbox field item custom checkbox when item is checked with error */ .cre8-c-checkbox-field-item--error & { background-color: var(--cre8-color-bg-default); } /** * Checkbox field item custom checkbox when item is checked with disabled */ .cre8-c-checkbox-field-item--disabled & { background-color: var(--cre8-color-bg-disabled); } } /** * Checkbox field item checkmark icon */ .cre8-c-checkbox-field-item__icon { display: none; color: var(--cre8-color-content-knockout); /** * Checkbox field item icon within checkbox field with error */ .cre8-c-checkbox-field-item--error & { color: var(--cre8-color-content-error); } /** * Checkbox field item icon within checkbox field disabled */ .cre8-c-checkbox-field-item--disabled & { color: var(--cre8-color-content-disabled); } /** * Checkbox field item icon will display in the box if the input is checked */ .cre8-c-checkbox-field-item__input:checked + .cre8-c-checkbox-field-item__custom-checkbox & { display: flex; } } /** * Checkbox field item input */ .cre8-c-checkbox-field-item__label { margin-left: size(4); @include cre8-typography-label-small; } /** * Checkbox field item field notes */ .cre8-c-checkbox-field-item__field-note, .cre8-c-checkbox-field-item__field-note-success, .cre8-c-checkbox-field-item__field-note-error { flex-basis: 100%; }`"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/checkbox-field-item/checkbox-field-item.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/checkbox-field-item/checkbox-field-item.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{}"
          },
          {
            "kind": "variable",
            "name": "Preselected",
            "type": {
              "text": "object"
            },
            "default": "{ args: { checked: true }, }"
          },
          {
            "kind": "variable",
            "name": "Optional",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Label (optional)' }, }",
            "description": "As a universal form rule, remember to minimize the number of optional fields to keep forms as short as possible. Include the text `(optional)` at the end of the label for the checkbox."
          },
          {
            "kind": "variable",
            "name": "Error",
            "type": {
              "text": "object"
            },
            "default": "{ args: { isError: true, required: true }, }"
          },
          {
            "kind": "variable",
            "name": "Disabled",
            "type": {
              "text": "object"
            },
            "default": "{ args: { disabled: true }, }",
            "description": "Using disabled states is not advised. Ideally, never display unavailable actions."
          },
          {
            "kind": "variable",
            "name": "DefaultWithFieldNote",
            "type": {
              "text": "object"
            },
            "default": "{ args: { fieldNote: 'This is a field note.', ariaDescribedBy: 'default-fieldnote-message', }, }",
            "description": "Optional guidance messaging can be passed via the `fieldNote` property or by using the `fieldNote` slot.\nMessages included in this manner must also include an associated `ariaDescribedBy` id property.\n\nError and success field note messaging are passed via their respective `errorNote` and `successNote` properties,\nand must include an associated `validationAriaDescribedBy` property."
          },
          {
            "kind": "variable",
            "name": "ErrorWithFieldNote",
            "type": {
              "text": "object"
            },
            "default": "{ args: { isError: true, errorNote: 'Short, clear error message', validationAriaDescribedBy: 'error-validation-message', }, }"
          },
          {
            "kind": "variable",
            "name": "SuccessWithFieldNote",
            "type": {
              "text": "object"
            },
            "default": "{ args: { isSuccess: true, successNote: 'Short, clear success message', validationAriaDescribedBy: 'success-valitation-message', }, }"
          },
          {
            "kind": "variable",
            "name": "LongTitle",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'This could mayhaps be the longest title that has ever been put on a checkbox field ever!' }, }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/checkbox-field-item/checkbox-field-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/checkbox-field-item/checkbox-field-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Preselected",
            "declaration": {
              "name": "Preselected",
              "module": "components/checkbox-field-item/checkbox-field-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Optional",
            "declaration": {
              "name": "Optional",
              "module": "components/checkbox-field-item/checkbox-field-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Error",
            "declaration": {
              "name": "Error",
              "module": "components/checkbox-field-item/checkbox-field-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Disabled",
            "declaration": {
              "name": "Disabled",
              "module": "components/checkbox-field-item/checkbox-field-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "DefaultWithFieldNote",
            "declaration": {
              "name": "DefaultWithFieldNote",
              "module": "components/checkbox-field-item/checkbox-field-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "ErrorWithFieldNote",
            "declaration": {
              "name": "ErrorWithFieldNote",
              "module": "components/checkbox-field-item/checkbox-field-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SuccessWithFieldNote",
            "declaration": {
              "name": "SuccessWithFieldNote",
              "module": "components/checkbox-field-item/checkbox-field-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "LongTitle",
            "declaration": {
              "name": "LongTitle",
              "module": "components/checkbox-field-item/checkbox-field-item.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/checkbox-field-item/checkbox-field-item.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "Checkbox Field Item is the combination of a checkbox input, label and field note.\nCheckboxes can turn an option on or off.\n\nCheckboxes should be used when the user is allowed to select one, none or multiple options\nOR to \"opt-in\" (ex. I would like to receive the newsletter by email)\nor as a required acknowledgement(ex. I've read the Terms and Conditions).\nIf the user can only chose one option from many, use `radio-field-item`.\n\n## How to Use\n\n- A checkbox is independent of all other checkboxes in the list,\n  so checking one box should not uncheck the others in the group.\n- Place checkbox options one on top of another vertically. Do not display them in a row horizontally.\n- Avoid disabled and read-only states as much as possible.\n\n## Universal Form Field Rules\n- Unless indicated with the \"(Optional)\" label, all fields are assumed required.\n  Minimize the number of optional fields to keep forms as short as possible.\n- Always include a label written in sentence case.\n- Avoid using the read-only and disabled states as much as possible.",
            "name": "Cre8CheckboxFieldItem",
            "members": [
              {
                "kind": "field",
                "name": "type",
                "type": {
                  "text": "string"
                },
                "readonly": true,
                "default": "'checkbox'"
              },
              {
                "kind": "field",
                "name": "label",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The checkbox label",
                "attribute": "label"
              },
              {
                "kind": "field",
                "name": "isError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent an error state",
                "attribute": "isError",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "errorText",
                "type": {
                  "text": "string"
                },
                "default": "'Error'",
                "description": "Visually hidden text that always signifies that this is an error for screen reader usage",
                "attribute": "errorText"
              },
              {
                "kind": "field",
                "name": "errorNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The error field note that appears below the default field note",
                "attribute": "errorNote"
              },
              {
                "kind": "field",
                "name": "isSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent a success state",
                "attribute": "isSuccess",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "successText",
                "type": {
                  "text": "string"
                },
                "default": "'Success'",
                "description": "Visually hidden text that always signifies that this is successful for screen reader usage",
                "attribute": "successText"
              },
              {
                "kind": "field",
                "name": "successNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The success field note that appears below the default field note",
                "attribute": "successNote"
              },
              {
                "kind": "field",
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Disabled State",
                "attribute": "disabled",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "checked",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Checked State",
                "attribute": "checked",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "fieldId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Checkbox FieldId",
                "attribute": "fieldId"
              },
              {
                "kind": "field",
                "name": "fieldNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Checkbox FieldNote",
                "attribute": "fieldNote"
              },
              {
                "kind": "field",
                "name": "ariaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Checkbox fieldnote ariaDescribeBy",
                "attribute": "ariaDescribedBy"
              },
              {
                "kind": "field",
                "name": "validationAriaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Additional aria-describedby connection to id for additional success and error notes to be accessible",
                "attribute": "validationAriaDescribedBy"
              },
              {
                "kind": "field",
                "name": "name",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Checkbox name",
                "attribute": "name"
              },
              {
                "kind": "field",
                "name": "required",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Required property",
                "attribute": "required",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "fieldNoteIconName",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Checkbox fieldnote icon name",
                "attribute": "fieldNoteIconName"
              },
              {
                "kind": "field",
                "name": "field",
                "type": {
                  "text": "HTMLInputElement"
                },
                "description": "Get the input element within the shadow root and set it to this.field"
              },
              {
                "kind": "field",
                "name": "defaultValue",
                "type": {
                  "text": "boolean"
                },
                "privacy": "protected"
              },
              {
                "kind": "method",
                "name": "getRole",
                "privacy": "private",
                "description": "access role when check-box-field-item embedded in checkbox-field"
              },
              {
                "kind": "method",
                "name": "setFormData",
                "privacy": "private",
                "description": "Set form data\n1) If a checked property is provided, set the form value the checkbox value attribute.\nOtherwise, don't provide a value for the checkbox data array"
              },
              {
                "kind": "method",
                "name": "_clickHandler",
                "privacy": "private",
                "description": "Handle on checkbox change\n1) On change of the checkbox input, if `checked` is true, then set it to false and vice versa."
              },
              {
                "kind": "method",
                "name": "_handleOnChange",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "Event"
                    }
                  }
                ],
                "description": "Handle On Change\n1. Set the value when the select is changed.\n2. Fire the custom event with the current value."
              },
              {
                "kind": "method",
                "name": "formResetCallback",
                "return": {
                  "type": {
                    "text": "void"
                  }
                },
                "description": "Form reset callback\n1) Set checked property to the default value and then set the input's checked attribute to that default value\n2) Set the input's checked attribute to that default value\n3) Set the element internals form data when the form is reset\n4) Change the new value to the old value on reset"
              },
              {
                "kind": "method",
                "name": "initializeAria",
                "description": "Initialize aria attributes"
              },
              {
                "kind": "method",
                "name": "fieldNoteAria",
                "return": {
                  "type": {
                    "text": "string"
                  }
                },
                "description": "Aria describedby string based on field notes and error/success notes\n1) If both validationAriaDescribedBy (error/success note) and field note exists,\nrender both in the input's `aria-describedby` attribute\n2) Otherwise, if only validationAriaDescribedBy exists, then render only that as\nthe `aria-describedby` attribute (input without field note initially, but then error/success is added).\n3) Otherwise, render only the `ariaDescribedBy` property (field note only)"
              },
              {
                "kind": "method",
                "name": "renderSuccessErrorFieldNote",
                "description": "Render the success or error field notes\n1. If there is a successNote, then return the field note with the success message and state.\n2. If there is a errorNote, then return the field note with the error message and state."
              }
            ],
            "attributes": [
              {
                "name": "isError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent an error state",
                "fieldName": "isError",
                "attribute": "isError"
              },
              {
                "name": "errorText",
                "type": {
                  "text": "string"
                },
                "default": "'Error'",
                "description": "Visually hidden text that always signifies that this is an error for screen reader usage",
                "fieldName": "errorText",
                "attribute": "errorText"
              },
              {
                "name": "isSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent a success state",
                "fieldName": "isSuccess",
                "attribute": "isSuccess"
              },
              {
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Disabled State",
                "fieldName": "disabled",
                "attribute": "disabled"
              },
              {
                "name": "checked",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Checked State",
                "fieldName": "checked",
                "attribute": "checked"
              },
              {
                "name": "fieldId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Checkbox FieldId",
                "fieldName": "fieldId",
                "attribute": "fieldId"
              },
              {
                "name": "ariaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Checkbox fieldnote ariaDescribeBy",
                "fieldName": "ariaDescribedBy",
                "attribute": "ariaDescribedBy"
              },
              {
                "name": "name",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Checkbox name",
                "fieldName": "name",
                "attribute": "name"
              },
              {
                "name": "required",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Required property",
                "fieldName": "required",
                "attribute": "required"
              },
              {
                "name": "label",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The checkbox label",
                "fieldName": "label"
              },
              {
                "name": "errorNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The error field note that appears below the default field note",
                "fieldName": "errorNote"
              },
              {
                "name": "successText",
                "type": {
                  "text": "string"
                },
                "default": "'Success'",
                "description": "Visually hidden text that always signifies that this is successful for screen reader usage",
                "fieldName": "successText"
              },
              {
                "name": "successNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The success field note that appears below the default field note",
                "fieldName": "successNote"
              },
              {
                "name": "fieldNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Checkbox FieldNote",
                "fieldName": "fieldNote"
              },
              {
                "name": "validationAriaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Additional aria-describedby connection to id for additional success and error notes to be accessible",
                "fieldName": "validationAriaDescribedBy"
              },
              {
                "name": "fieldNoteIconName",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Checkbox fieldnote icon name",
                "fieldName": "fieldNoteIconName"
              }
            ],
            "superclass": {
              "name": "Cre8FormElement",
              "module": "/components/cre8-form-element"
            },
            "tagName": "cre8-checkbox-field-item",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8CheckboxFieldItem",
            "declaration": {
              "name": "Cre8CheckboxFieldItem",
              "module": "components/checkbox-field-item/checkbox-field-item.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-checkbox-field-item",
            "declaration": {
              "name": "Cre8CheckboxFieldItem",
              "module": "components/checkbox-field-item/checkbox-field-item.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8CheckboxFieldItem",
              "module": "components/checkbox-field-item/checkbox-field-item.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/danger-button/danger-button.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; :host { display: inline-flex; } :host([fullWidth]) { display: flex; } /** * 1) Danger Button or link that has functionality to it */ /** * Primary button */ .cre8-c-danger-button { @include cre8-typography-label-default(); width: var(--cre8-button-width, auto); height: var(--cre8-button-height, auto); min-width: var(--cre8-button-min-width, auto); min-height: var(--cre8-button-min-height, auto); justify-content: center; text-align: center; margin-top: var( --cre8-button-margin-top, 0); margin-bottom: var( --cre8-button-margin-bottom, 0); margin-left: var( --cre8-button-margin-left, 0); margin-right: var( --cre8-button-margin-right, 0); display: inline-flex; align-items: center; border-width: var(--cre8-border-width-button-default); box-shadow: var(--cre8-shadow-button); padding-top: var(--cre8-button-padding-vertical-medium); padding-right: var(--cre8-button-padding-horizontal-medium); padding-bottom: var(--cre8-button-padding-vertical-medium); padding-left: var(--cre8-button-padding-horizontal-medium); margin: 0; cursor: pointer; border-style: var(--cre8-border-style-default); transition: revert; transform: revert; white-space: nowrap; &:hover, &:focus, &:active, &:focus-visible { border-style: var(--cre8-border-style-default); box-shadow: none; transform: revert; transition: revert; } &.cre8-c-danger-button--primary { background: var(--cre8-color-button-primary-danger-bg); border-width: var(--cre8-border-width-button-default); border-color: var(--cre8-color-button-primary-danger-border); border-radius: var(--cre8-border-radius-button); box-shadow: var(--cre8-shadow-button); color: var(--cre8-color-button-primary-danger-content); --cre8-icon-fill: var(--cre8-color-button-primary-danger-content); &:hover, &:focus { box-shadow: none; --cre8-icon-fill: var(--cre8-color-button-primary-danger-content-hover); color: var(--cre8-color-button-primary-danger-content-hover); border-color: var(--cre8-color-button-primary-danger-border-hover); background: var(--cre8-color-button-primary-danger-bg-hover); text-decoration: none; &:focus { @includefocus(); } } &:active, &.cre8-c-danger-button--loading { box-shadow: none; color: var(--cre8-color-button-primary-danger-content-active); --cre8-icon-fill: var(--cre8-color-button-primary-danger-content-active); border-color: var(--cre8-color-button-primary-danger-border-active); background-color: var(--cre8-color-button-primary-danger-bg-active); } &:focus-visible{ @includefocus(); } &.cre8-c-danger-button--loading{ cursor: not-allowed; } /** * Disabled primary and secondary button */ &:disabled { box-shadow: none; background-color: var(--cre8-color-button-primary-danger-bg-disabled); border-color: var(--cre8-color-button-primary-danger-border-disabled); color: var(--cre8-color-button-primary-danger-content-disabled); --cre8-icon-fill: var(--cre8-color-button-primary-danger-content-disabled); cursor: not-allowed; outline: none; &:hover, &:focus, &:active, &:focus-visible { outline: none; background-color: var(--cre8-color-button-primary-danger-bg-disabled); border-color: var(--cre8-color-button-primary-danger-border-disabled); color: var(--cre8-color-button-primary-danger-content-disabled); --cre8-icon-fill: var(--cre8-color-button-primary-danger-content-disabled); } } &.cre8-c-danger-button--inverted { background-color: var(--cre8-color-button-primary-danger-inverse-bg); border-color: var(--cre8-color-button-primary-danger-inverse-border); color: var(--cre8-color-button-primary-danger-inverse-content); &:hover, &:focus { background-color: var(--cre8-color-button-primary-danger-inverse-bg-hover); border-color: var(--cre8-color-button-primary-danger-inverse-border-hover); color: var(--cre8-color-button-primary-danger-inverse-content-hover); } &:focus { outline-color: var(--cre8-color-button-primary-danger-inverse-outline); } &:active { background-color: var(--cre8-color-button-primary-danger-inverse-bg-active); border-color: var(--cre8-color-button-primary-danger-inverse-border-active); color: var(--cre8-color-button-primary-danger-inverse-content-active); &.cre8-c-danger-button--loading { --cre8-icon-fill: var(--cre8-color-button-primary-danger-content-active); } } &:disabled { outline: none; cursor: not-allowed; background-color: var(--cre8-color-button-primary-danger-inverse-bg-disabled); border-color: var(--cre8-color-button-primary-danger-inverse-border-disabled); color: var(--cre8-color-button-primary-danger-inverse-content-disabled); } } } /** * Secondary button * The icon button shares the styles of the standard secondary button */ &.cre8-c-danger-button--secondary { background-color: var(--cre8-color-button-secondary-danger-bg); border-color: var(--cre8-color-button-secondary-danger-border); color: var(--cre8-color-button-secondary-danger-content); --cre8-icon-fill: var(--cre8-color-button-secondary-danger-content); border-radius: var(--cre8-border-radius-button); border-width: var(--cre8-border-width-button-default); &:hover, &:focus { background-color: var(--cre8-color-button-secondary-danger-bg-hover); border-color: var(--cre8-color-button-secondary-danger-border-hover); color: var(--cre8-color-button-secondary-danger-content-hover); --cre8-icon-fill: var(--cre8-color-button-secondary-danger-content-hover); &:focus { @include focus; } } &:active, &.cre8-c-danger-button--loading { transition: none; transform: none; background-color: var(--cre8-color-button-secondary-danger-bg-active); border-color: var(--cre8-color-button-secondary-danger-border-active); color: var(--cre8-color-button-secondary-danger-content-active); --cre8-icon-fill: var(--cre8-color-button-secondary-danger-content-active); } &:focus-visible { @include focus; } &.cre8-c-danger-button--loading { cursor: not-allowed; } &:disabled { box-shadow: none; background-color: var(--cre8-color-button-secondary-danger-bg-disabled); border-color: var(--cre8-color-button-secondary-danger-border-disabled); color: var(--cre8-color-button-secondary-danger-content-disabled); --cre8-icon-fill: var(--cre8-color-button-secondary-danger-content-disabled); outline: none; border-radius: var(--cre8-border-radius-button); border-width: var(--cre8-border-width-button-default); cursor: not-allowed; &:hover, &:focus, &:active, &:focus-visible { outline: none; background-color: var(--cre8-color-button-secondary-danger-bg-disabled); border-color: var(--cre8-color-button-secondary-danger-border-disabled); color: var(--cre8-color-button-secondary-danger-content-disabled); --cre8-icon-fill: var(--cre8-color-button-secondary-danger-content-disabled); } } &.cre8-c-danger-button--inverted { background-color: var(--cre8-color-button-secondary-danger-inverse-bg); border-color: var(--cre8-color-button-secondary-danger-inverse-border); color: var(--cre8-color-button-secondary-danger-inverse-content); &:hover, &:focus { background-color: var(--cre8-color-button-secondary-danger-inverse-bg-hover); border-color: var(--cre8-color-button-secondary-danger-inverse-border-hover); color: var(--cre8-color-button-secondary-danger-inverse-content-hover); } &:focus { outline-color: var(--cre8-color-button-secondary-danger-inverse-outline); } &:active { background-color: var(--cre8-color-button-secondary-danger-inverse-bg-active); border-color: var(--cre8-color-button-secondary-danger-inverse-border-active); color: var(--cre8-color-button-secondary-danger-inverse-content-active); &.cre8-c-danger-button--loading { --cre8-icon-fill: var(--cre8-color-button-secondary-danger-content-active); } } &:disabled { outline: none; cursor: not-allowed; background-color: var(--cre8-color-button-secondary-danger-inverse-bg-disabled); border-color: var(--cre8-color-button-secondary-danger-inverse-border-disabled); color: var(--cre8-color-button-secondary-danger-inverse-content-disabled); } } } /** * Tertiary button */ &.cre8-c-danger-button--tertiary { border-radius: var(--cre8-border-radius-button); background-color: var(--cre8-color-button-tertiary-danger-bg); border-width: var(--cre8-border-width-button-default); border-color: var(--cre8-color-button-tertiary-danger-border); color: var(--cre8-color-button-tertiary-danger-content); --cre8-icon-fill: var(--cre8-color-button-tertiary-danger-content); box-shadow: none; &:hover, &:focus { border-radius: var(--cre8-border-radius-button); background-color: var(--cre8-color-button-tertiary-danger-bg-hover); border-width: var(--cre8-border-width-button-default, --cre8-border-width-none); border-color: var(--cre8-color-button-tertiary-danger-border-hover); color: var(--cre8-color-button-tertiary-danger-content-hover); --cre8-icon-fill: var(--cre8-color-button-tertiary-danger-content-hover); &:focus { @include focusTertiary(); } } &:active, &.cre8-c-danger-button--loading { border-radius: var(--cre8-border-radius-button); background-color: var(--cre8-color-button-tertiary-danger-bg-active); border-color: var(--cre8-color-button-tertiary-danger-border-active); border-width: var(--cre8-border-width-button-default); color: var(--cre8-color-button-tertiary-danger-content-active); --cre8-icon-fill: var(--cre8-color-button-tertiary-danger-content-active); } &:focus-visible { @include focusTertiary(); } &.cre8-c-danger-button--loading { cursor: not-allowed; } &:disabled { background-color: var(--cre8-color-button-tertiary-danger-bg-disabled); border-color: transparent; color: var(--cre8-color-button-tertiary-danger-content-disabled); --cre8-icon-fill: var(--cre8-color-button-tertiary-danger-content-disabled); outline: none; box-shadow: none; cursor: not-allowed; &:hover, &:focus { outline: none; box-shadow: none; background-color: var(--cre8-color-button-tertiary-danger-bg-disabled); color: var(--cre8-color-button-tertiary-danger-content-disabled); --cre8-icon-fill: var(--cre8-color-button-tertiary-danger-content-disabled); } &:active, &:focus-visible { outline: none; box-shadow: none; background-color: var(--cre8-color-button-tertiary-danger-bg-disabled); color: var(--cre8-color-button-tertiary-danger-content-disabled); --cre8-icon-fill: var(--cre8-color-button-tertiary-danger-content-disabled); } } &.cre8-c-danger-button--inverted { background-color: var(--cre8-color-button-tertiary-danger-inverse-bg); border-color: var(--cre8-color-button-tertiary-danger-inverse-border); color: var(--cre8-color-button-tertiary-danger-inverse-content); &:hover, &:focus { background-color: var(--cre8-color-button-tertiary-danger-inverse-bg-hover); border-color: var(--cre8-color-button-tertiary-danger-inverse-border-hover); color: var(--cre8-color-button-tertiary-danger-inverse-content-hover); } &:focus { outline-color: var(--cre8-color-button-tertiary-danger-inverse-outline); } &:active { background-color: var(--cre8-color-button-tertiary-danger-inverse-bg-active); border-color: var(--cre8-color-button-tertiary-danger-inverse-border-active); color: var(--cre8-color-button-tertiary-danger-inverse-content-active); &.cre8-c-danger-button--loading { --cre8-icon-fill: var(--cre8-color-button-tertiary-danger-content-active); } } &:disabled { outline: none; cursor: not-allowed; background-color: var(--cre8-color-button-tertiary-danger-inverse-bg-disabled); border-color: var(--cre8-color-button-tertiary-danger-inverse-border-disabled); color: var(--cre8-color-button-tertiary-danger-inverse-content-disabled); } } } &.cre8-c-danger-button.cre8-c-danger-button--secondary.cre8-c-danger-button--split-button-text { border-radius: var(--cre8-border-radius-button) var(--cre8-border-radius-none) var(--cre8-border-radius-none) var(--cre8-border-radius-button); border-color: var(--cre8-color-button-secondary-danger-border); border-width: var(--cre8-border-width-button-default); color: var(--cre8-color-button-secondary-danger-content); &:active, &:focus-visible { outline: none; } &.cre8-c-danger-button--lg { padding: var(--cre8-button-padding-vertical-large) var(--cre8-button-padding-horizontal-large); } &.cre8-c-danger-button--sm { padding: var(--cre8-button-padding-vertical-small) var(--cre8-button-padding-horizontal-small); } } &.cre8-c-danger-button.cre8-c-danger-button--icon-only.cre8-c-danger-button--split-button-caret { padding: var(--cre8-button-padding-vertical-medium); border-radius: var(--cre8-border-radius-none) var(--cre8-border-radius-button) var(--cre8-border-radius-button) var(--cre8-border-radius-none); height: 100%; border-left: none !important ; border-collapse: collapse; background: var(--cre8-color-button-secondary-danger-bg); border-color: var(--cre8-color-button-secondary-danger-border); border-width: var(--cre8-border-width-button-default); color: var(--cre8-color-button-secondary-danger-content); --cre8-icon-fill: var(--cre8-color-button-secondary-danger-content); &:hover, &:focus { background: var(--cre8-color-button-secondary-danger-bg-hover); border-color: var(--cre8-color-button-secondary-danger-border-hover); --cre8-icon-fill: var(--cre8-color-button-secondary-danger-content-hover); outline: none; border-left: none; border-collapse: collapse; } &:active, &:focus-visible { background: var(--cre8-color-button-secondary-danger-bg-active); border-color: var(--cre8-color-button-secondary-danger-border-active); --cre8-icon-fill: var(--cre8-color-button-secondary-danger-content-active); outline: none; border-left: none; border-collapse: collapse; } } } .cre8-c-danger-button--lg { padding: var(--cre8-button-padding-vertical-large); } .cre8-c-danger-button--sm { padding: var(--cre8-button-padding-vertical-small); } .cre8-c-danger-button--icon-only { padding: var(--cre8-button-padding-vertical-small); color: var(--cre8-icon-fill, currentColor); } /** * Full-width button */ .cre8-c-danger-button--full-width { width: 100%; display: flex; } /** * Small button */ .cre8-c-danger-button--sm { @include cre8-typography-label-small(); padding-top: var(--cre8-button-padding-vertical-small); padding-right: var(--cre8-button-padding-horizontal-small); padding-bottom: var(--cre8-button-padding-vertical-small); padding-left: var(--cre8-button-padding-horizontal-small); } /** * Large button */ .cre8-c-danger-button--lg { @include cre8-typography-label-large(); padding-top: var(--cre8-button-padding-vertical-large); padding-right: var(--cre8-button-padding-horizontal-large); padding-bottom: var(--cre8-button-padding-vertical-large); padding-left: var(--cre8-button-padding-horizontal-large); } /** * Icon within small button */ .cre8-c-danger-button--sm cre8-icon { --cre8-icon-height: var(--cre8-icon-size-small); --cre8-icon-width: var(--cre8-icon-size-small); /** * Button text directly after button icon within small button */ } /** * Icon within large button */ .cre8-c-danger-button--lg cre8-icon { --cre8-icon-height: var(--cre8-icon-size-large); --cre8-icon-width: var(--cre8-icon-size-large); } ::slotted(*) { margin-right: 0; } /** * Button icon directly before button text */ cre8-icon + .cre8-c-danger-button__text:not(.cre8-u-is-vishidden) { margin-left: size(1); display: inline-flex; } /** * Button icon directly after button text */ .cre8-c-danger-button__text:not(.cre8-u-is-vishidden) + cre8-icon { margin-left: size(1); display: inline-flex; } /** * Button icon only */ .cre8-c-danger-button:has(.cre8-c-danger-button__text.cre8-u-is-vishidden) + cre8-icon { border-radius: var(--cre8-border-radius-button); } .cre8-c-danger-button__text.cre8-u-is-vishidden + cre8-icon { margin-left: 0px; margin-right: 0px; display: flex; } .cre8-c-danger-button__text.cre8-u-is-vishidden { @include visuallyHidden(); } .cre8-c-danger-button--primary.cre8-c-danger-button--loading { --cre8-icon-fill: var(--cre8-color-content-knockout); } .cre8-c-danger-button--secondary.cre8-c-danger-button--loading, .cre8-c-danger-button--tertiary.cre8-c-danger-button--loading { --cre8-icon-fill: var(--cre8-color-button-secondary-danger-content-active); } /** * Aria live span */ .cre8-u-is-vishidden { --cre8-icon-height: 0px; --cre8-icon-width: 0px; max-width: fit-content; min-width: 0px; width: auto; height: auto; max-height: fit-content; min-width: 0px; @include visuallyHidden; } cre8-icon.cre8-u-is-vishidden { @include visuallyHidden; } cre8-icon { display: flex; align-items: center; justify-content: center; } span.cre8-c-danger-button__icon { margin-left: size(1); max-width: fit-content; min-width: 0px; width: auto; height: auto; max-height: fit-content; min-width: 0px; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/danger-button/danger-button.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/danger-button/danger-button.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "meta",
            "type": {
              "text": "object"
            },
            "default": "{ title: 'In Development/Danger Button', component: 'cre8-danger-button', render: (args) => html`<cre8-danger-button ${spread(args)}></cre8-danger-button>`, parameters: { status: {type: 'inProgress'}, actions: { handles: ['click', 'submit'], }, }, argTypes: { ariaLive: { options: ['assertive', 'polite'], control: 'radio'}, buttonAriaExpanded: {control: 'boolean'}, disabled: {control: 'boolean'}, fullWidth: {control: 'boolean'}, hideText: {control: 'boolean'}, svg: {control: 'text'}, iconRotateDegree: {control: 'text'}, iconPosition: { options: ['before', 'after'], control: { type: 'radio' } }, inverted: {control: 'boolean'}, loading: {control: 'boolean'}, loadingComplete: {control: 'boolean'}, text: { control: 'text' }, href: { control: 'text' }, size: { options: ['sm', 'lg'], control: { type: 'radio' } }, variant: { options: ['primary', 'secondary', 'tertiary'], control: { type: 'radio' } } }, args: { text: 'Button', loading: undefined, } }"
          },
          {
            "kind": "variable",
            "name": "Primary",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Primary' } }"
          },
          {
            "kind": "variable",
            "name": "PrimarySubmit",
            "type": {
              "text": "object"
            },
            "default": "{ args: { type: 'submit', text: 'Submit' } }",
            "description": "Button defaults to type of `button`. By passing `submit` to `type`, the button can submit form data."
          },
          {
            "kind": "variable",
            "name": "PrimaryDisabled",
            "type": {
              "text": "object"
            },
            "default": "{ args: { disabled: true, text: 'Button' } }"
          },
          {
            "kind": "variable",
            "name": "PrimaryInverted",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Primary', inverted: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "PrimaryInvertedDisabled",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Button', disabled: true, inverted: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "IconBefore",
            "type": {
              "text": "object"
            },
            "default": "{ args: { svg: svgCaretLeft, iconPosition: 'before', text: 'Button' } }"
          },
          {
            "kind": "variable",
            "name": "IconAfter",
            "type": {
              "text": "object"
            },
            "default": "{ args: { svg: svgCaretRight, iconPosition: 'after', text: 'Button' } }"
          },
          {
            "kind": "variable",
            "name": "Secondary",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Button', variant: 'secondary' } }"
          },
          {
            "kind": "variable",
            "name": "SecondaryInverted",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Button', variant: 'secondary', inverted: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "SecondaryDisabled",
            "type": {
              "text": "object"
            },
            "default": "{ args: { disabled: true, text: 'Button', variant: 'secondary' } }"
          },
          {
            "kind": "variable",
            "name": "SecondaryDisabledInverted",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Button', variant: 'secondary', inverted: true, disabled: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "Tertiary",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Button', variant: 'tertiary' } }"
          },
          {
            "kind": "variable",
            "name": "TertiaryInverted",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Button', variant: 'tertiary', inverted: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "TertiaryDisabled",
            "type": {
              "text": "object"
            },
            "default": "{ args: { disabled: true, text: 'Button', variant: 'tertiary', } }"
          },
          {
            "kind": "variable",
            "name": "TertiaryDisabledInverted",
            "type": {
              "text": "object"
            },
            "default": "{ args: { disabled: true, text: 'Button', variant: 'tertiary', inverted: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "FullWidth",
            "type": {
              "text": "object"
            },
            "default": "{ args: { fullWidth: true, text: 'Button', } }"
          },
          {
            "kind": "variable",
            "name": "Small",
            "type": {
              "text": "object"
            },
            "default": "{ args: { size: 'sm', text: 'Button', } }"
          },
          {
            "kind": "variable",
            "name": "SmallInverted",
            "type": {
              "text": "object"
            },
            "default": "{ args: { size: 'sm', text: 'Button', inverted: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "SmallIconAfter",
            "type": {
              "text": "object"
            },
            "default": "{ args: { svg: svgCaretRight, iconPosition: 'after', size: 'sm', text: 'Button', } }"
          },
          {
            "kind": "variable",
            "name": "Large",
            "type": {
              "text": "object"
            },
            "default": "{ args: { size: 'lg', text: 'Button', } }"
          },
          {
            "kind": "variable",
            "name": "LargePrimaryInverted",
            "type": {
              "text": "object"
            },
            "default": "{ args: { size: 'lg', text: 'Button', inverted: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "LargeIconAfter",
            "type": {
              "text": "object"
            },
            "default": "{ args: { svg: svgCaretRight, iconPosition: 'after', size: 'lg', text: 'Button', } }"
          },
          {
            "kind": "variable",
            "name": "IconOnlyPrimary",
            "type": {
              "text": "object"
            },
            "default": "{ args: { hideText: true, svg: svgArrowRight, iconPosition: 'after', text: 'Button With Visually Hidden Text', variant: 'primary' } }",
            "description": "When implementing an icon only button, passing `hideText` will visually hide the button's text while still allowing\nit to be read by accessibility devices."
          },
          {
            "kind": "variable",
            "name": "IconOnlyPrimaryInverted",
            "type": {
              "text": "object"
            },
            "default": "{ args: { hideText: true, svg: svgArrowRight, iconPosition: 'after', text: 'Button With Visually Hidden Text', variant: 'primary', inverted: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "IconOnlySecondary",
            "type": {
              "text": "object"
            },
            "default": "{ args: { hideText: true, svg: svgArrowRight, iconPosition: 'after', text: 'Button With Visually Hidden Text', variant: 'secondary' } }"
          },
          {
            "kind": "variable",
            "name": "IconOnlySecondaryInverted",
            "type": {
              "text": "object"
            },
            "default": "{ args: { hideText: true, svg: svgArrowRight, iconPosition: 'after', text: 'Button With Visually Hidden Text', variant: 'secondary', inverted: true, }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "IconOnlyTertiary",
            "type": {
              "text": "object"
            },
            "default": "{ args: { hideText: true, svg: svgArrowRight, iconPosition: 'after', text: 'Button With Visually Hidden Text', variant: 'tertiary' } }"
          },
          {
            "kind": "variable",
            "name": "IconOnlyTertiaryInverted",
            "type": {
              "text": "object"
            },
            "default": "{ args: { hideText: true, inverted: true, svg: svgArrowRight, iconPosition: 'after', text: 'Button With Visually Hidden Text', variant: 'tertiary' }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "Loading",
            "type": {
              "text": "object"
            },
            "default": "{ args: { loading: true, text: 'Submit', variant: 'primary' } }"
          },
          {
            "kind": "variable",
            "name": "LoadingComplete",
            "type": {
              "text": "object"
            },
            "default": "{ args: { loadingComplete: true, text: 'Submit', variant: 'primary' } }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "meta",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Primary",
            "declaration": {
              "name": "Primary",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PrimarySubmit",
            "declaration": {
              "name": "PrimarySubmit",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PrimaryDisabled",
            "declaration": {
              "name": "PrimaryDisabled",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PrimaryInverted",
            "declaration": {
              "name": "PrimaryInverted",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PrimaryInvertedDisabled",
            "declaration": {
              "name": "PrimaryInvertedDisabled",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconBefore",
            "declaration": {
              "name": "IconBefore",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconAfter",
            "declaration": {
              "name": "IconAfter",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Secondary",
            "declaration": {
              "name": "Secondary",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SecondaryInverted",
            "declaration": {
              "name": "SecondaryInverted",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SecondaryDisabled",
            "declaration": {
              "name": "SecondaryDisabled",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SecondaryDisabledInverted",
            "declaration": {
              "name": "SecondaryDisabledInverted",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Tertiary",
            "declaration": {
              "name": "Tertiary",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TertiaryInverted",
            "declaration": {
              "name": "TertiaryInverted",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TertiaryDisabled",
            "declaration": {
              "name": "TertiaryDisabled",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TertiaryDisabledInverted",
            "declaration": {
              "name": "TertiaryDisabledInverted",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "FullWidth",
            "declaration": {
              "name": "FullWidth",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Small",
            "declaration": {
              "name": "Small",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SmallInverted",
            "declaration": {
              "name": "SmallInverted",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SmallIconAfter",
            "declaration": {
              "name": "SmallIconAfter",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Large",
            "declaration": {
              "name": "Large",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "LargePrimaryInverted",
            "declaration": {
              "name": "LargePrimaryInverted",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "LargeIconAfter",
            "declaration": {
              "name": "LargeIconAfter",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconOnlyPrimary",
            "declaration": {
              "name": "IconOnlyPrimary",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconOnlyPrimaryInverted",
            "declaration": {
              "name": "IconOnlyPrimaryInverted",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconOnlySecondary",
            "declaration": {
              "name": "IconOnlySecondary",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconOnlySecondaryInverted",
            "declaration": {
              "name": "IconOnlySecondaryInverted",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconOnlyTertiary",
            "declaration": {
              "name": "IconOnlyTertiary",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconOnlyTertiaryInverted",
            "declaration": {
              "name": "IconOnlyTertiaryInverted",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Loading",
            "declaration": {
              "name": "Loading",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "LoadingComplete",
            "declaration": {
              "name": "LoadingComplete",
              "module": "components/danger-button/danger-button.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/danger-button/danger-button.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The size and state of buttons on the screen serve as visual cues for the user\nabout what they can do and what they should do next.\nThey indicate the availability and priority of the action on the page.\n\n- Buttons are a single call-to-action where a single click performs that action\n- Use Danger Buttons when you are performing an action that is potentially dangerous,\nsuch as permanently deleting information\n- Use a link instead of a button when you're navigating to another place\n\n## How to Use\n\nDanger Buttons are distinguished by three key properties:\n\n- **Visual Priority**: Style and size: Primary, Secondary, or Tertiary styles;\n  each with large and small variations\n- **State**: Interaction state: hover/click (press), focus, disabled,\n  and submitting/loading (only for large buttons)\n- **Brand**: Styles determined by the site or component theme\n\n### Usage Guidelines\n\nPrimary, Secondary and Tertiary styles emphasize or de-emphasize an action. They also define\nbackground, font style, and border colors. Large and small sizing assists with visual priority by defining button\nheights, left and right internal padding, and font-size.\n\n#### System Feedback\nEach button has a default and hover/click (press) state that give the user feedback\nthat they have successfully interacted with a button.\nButton presses should always be combined with other types of timely system feedback.\nExamples of system feedback may be a page refresh, exposing additional controls or content,\ndialogs, alerts and notifications.\nIf there is perceived a delay in system response, generally due to technical constraints,\nprovide a progress or loading indicator.\n\n#### Button Text\n\n- Button text should be as short and simple as possible, ideally a maximum of 3 words.\n- Use Title Case for readability.\n- They should not include punctuation (exception: \"Loading...\").\n- They should not be used as an indicator of what happens on the next page, or as a substitute\nfor a progress meter.\n\n#### Button Styling\n\n- DO use only the styles of the brand you are working on.\n- DO NOT combine styles, even if the page is co-branded.\n\n#### Button Sizes\n- DO always pair like sizes together and maintain the hierarchy of Primary and Secondary/Tertiary.\n- DO NOT mix sizes of buttons when they are used together as a group.\n\n#### Input Pairing\n\nPrimary and Secondary buttons may be paired with input fields.\nOnly one Primary button may appear on each screen.\nUse the Secondary button when there are multiple in-context buttons\nand/or when there is an emphasized page level button.\nWhen used in a form context, the button's `type` needs to be `submit` to pass along form data.\n\n- DO use only large buttons with input fields.\n- DO NOT use small buttons with input fields.",
            "name": "Cre8DangerButton",
            "members": [
              {
                "kind": "field",
                "name": "text",
                "type": {
                  "text": "string"
                },
                "default": "'Button'",
                "description": "\nThe button text. Should be as short and simple as possible, ideally a maximum of 3 words.\n- Use Title Case for readability.\n- Should not include punctuation (exception: \"Loading...\").\n- Should not be used as an indicator of what happens on the next page, or as a substitute for a progress meter.",
                "attribute": "text"
              },
              {
                "kind": "field",
                "name": "variant",
                "type": {
                  "text": "'primary' | 'secondary' | 'tertiary' | undefined"
                },
                "default": "'primary'",
                "description": "Style variant\n- **primary** renders the button used for primary actions. Presents highest visual priority.\n  When grouped with other buttons, only one primary is allowed\n- **secondary** renders a secondary button. Presents a lower visual priority\n- **tertiary** renders a tertiary button. Presents the lowest visual priority.\n  Should be used in limited amounts - consider if a link (`<a>`) would be more appropriate",
                "attribute": "variant"
              },
              {
                "kind": "field",
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Disabled attribute",
                "attribute": "disabled",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "href",
                "type": {
                  "text": "string | undefined"
                },
                "description": "\nProvide this property if you intend to use button styles for an anchor tag (`<a>`).\nThis changes the component markup from `<button>` usage to `<a>` instead.",
                "attribute": "href"
              },
              {
                "kind": "field",
                "name": "target",
                "type": {
                  "text": "'_blank' | '_self' | '_parent' | '_top' | undefined"
                },
                "description": "Target attribute for a link if providing `href` to style a link as a button\n- **_blank** yields a link that opens in a new tab\n- **_self** yields a link that loads the URL into the same browsing context as the current one.\n  This is the default behavior\n- **_parent** yields a link that loads the URL into the parent browsing context of the current one.\n  If there is no parent, this behaves the same way as _self\n- **_top** yields a link that loads the URL into the top-level browsing context.\n  If there is no parent, this behaves the same way as _self.",
                "attribute": "target"
              },
              {
                "kind": "field",
                "name": "type",
                "type": {
                  "text": "'button' | 'submit' | 'reset'"
                },
                "default": "'button'",
                "description": "Type of button.\n- **button** (default) button has no default behavior and does nothing unless provided some sort\nof client-side trigger\n- **submit** button for submitting form data to a server",
                "attribute": "type"
              },
              {
                "kind": "field",
                "name": "rel",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Rel if this is an <a> element - this swaps <button> for <a>",
                "attribute": "rel"
              },
              {
                "kind": "field",
                "name": "svg",
                "type": {
                  "text": "string | undefined"
                },
                "description": "SVG raw string if including an icon within a button.\nMust include the icon's position with `iconPostion`. This prop is used for <cre8-icon>",
                "attribute": "svg"
              },
              {
                "kind": "field",
                "name": "iconRotateDegree",
                "type": {
                  "text": "number | undefined"
                },
                "default": "0",
                "description": "rotate is used for <cre8-icon> to set the arrow in the correct direction",
                "attribute": "iconRotateDegree"
              },
              {
                "kind": "field",
                "name": "iconFlipDirection",
                "type": {
                  "text": "string | undefined"
                },
                "description": "flip is used for <cre8-icon> to set the icon in the correct direction",
                "attribute": "iconFlipDirection"
              },
              {
                "kind": "field",
                "name": "iconPosition",
                "type": {
                  "text": "'before' | 'after' | undefined"
                },
                "default": "undefined",
                "description": "Icon position. Must include the name of the icon with `iconName`\n\n- **before** places the icon before the button text\n- **after** places the icon after the button text",
                "attribute": "iconPosition"
              },
              {
                "kind": "field",
                "name": "size",
                "type": {
                  "text": "'sm' | 'lg' | undefined"
                },
                "description": "Size variants add another way to increase or decrease visual priority of a button.\n- **sm** shrinks the button typography and overall size from the default. Use when vertical space is constrained.\n- **lg** increases the button typography and overall size from the default.",
                "attribute": "size"
              },
              {
                "kind": "field",
                "name": "hideText",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Visually hide button text. Text is still accessible to assistive technology.\nUse this for icon-only buttons for accessibility",
                "attribute": "hideText",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "fullWidth",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Full width button",
                "attribute": "fullWidth",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "loading",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "* Changes styling to an active state with a spinning icon.\n* Adds accessibility treatment by:\n  * announcing via voiceover when the loading success/error state via a aria-live region\n  * setting `aria-disabled`\n* Disables click events / form submitting while allowing focus (for accessibility)",
                "attribute": "loading",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "loadingComplete",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "* Variant of the loading button that:\n  * Removes loading spinner\n  * Informs the SR user that the loading status is now complete, with visually hidden text in the live area",
                "attribute": "loadingComplete",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "inverted",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverted colors Danger Button (onDark)",
                "attribute": "inverted"
              },
              {
                "kind": "field",
                "name": "ariaLive",
                "type": {
                  "text": "'polite' | 'assertive'"
                },
                "default": "'assertive'",
                "description": "Controls whether your loading status update to voiceover users will occur\nimmediately (used for more urgently needed updates) using `assertive` or at the next convenient\npause in their navigation using `polite`.",
                "attribute": "ariaLive"
              },
              {
                "kind": "field",
                "name": "buttonAriaExpanded",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Button aria expanded attribute",
                "attribute": "buttonAriaExpanded",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "field",
                "type": {
                  "text": "HTMLButtonElement"
                }
              },
              {
                "kind": "method",
                "name": "formSubmit"
              },
              {
                "kind": "method",
                "name": "formReset"
              },
              {
                "kind": "method",
                "name": "renderDangerButtonLink",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "componentClassName",
                    "type": {
                      "text": "string"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "renderDangerButtonIconography",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "renderDangerButtonLoading",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_buttonClick",
                "privacy": "public",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "MouseEvent | KeyboardEvent"
                    }
                  }
                ]
              }
            ],
            "attributes": [
              {
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Disabled attribute",
                "fieldName": "disabled",
                "attribute": "disabled"
              },
              {
                "name": "fullWidth",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Full width button",
                "fieldName": "fullWidth",
                "attribute": "fullWidth"
              },
              {
                "name": "loading",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "* Changes styling to an active state with a spinning icon.\n* Adds accessibility treatment by:\n  * announcing via voiceover when the loading success/error state via a aria-live region\n  * setting `aria-disabled`\n* Disables click events / form submitting while allowing focus (for accessibility)",
                "fieldName": "loading",
                "attribute": "loading"
              },
              {
                "name": "loadingComplete",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "* Variant of the loading button that:\n  * Removes loading spinner\n  * Informs the SR user that the loading status is now complete, with visually hidden text in the live area",
                "fieldName": "loadingComplete",
                "attribute": "loadingComplete"
              },
              {
                "name": "text",
                "type": {
                  "text": "string"
                },
                "default": "'Button'",
                "description": "\nThe button text. Should be as short and simple as possible, ideally a maximum of 3 words.\n- Use Title Case for readability.\n- Should not include punctuation (exception: \"Loading...\").\n- Should not be used as an indicator of what happens on the next page, or as a substitute for a progress meter.",
                "fieldName": "text"
              },
              {
                "name": "variant",
                "type": {
                  "text": "'primary' | 'secondary' | 'tertiary' | undefined"
                },
                "default": "'primary'",
                "description": "Style variant\n- **primary** renders the button used for primary actions. Presents highest visual priority.\n  When grouped with other buttons, only one primary is allowed\n- **secondary** renders a secondary button. Presents a lower visual priority\n- **tertiary** renders a tertiary button. Presents the lowest visual priority.\n  Should be used in limited amounts - consider if a link (`<a>`) would be more appropriate",
                "fieldName": "variant"
              },
              {
                "name": "href",
                "type": {
                  "text": "string | undefined"
                },
                "description": "\nProvide this property if you intend to use button styles for an anchor tag (`<a>`).\nThis changes the component markup from `<button>` usage to `<a>` instead.",
                "fieldName": "href"
              },
              {
                "name": "target",
                "type": {
                  "text": "'_blank' | '_self' | '_parent' | '_top' | undefined"
                },
                "description": "Target attribute for a link if providing `href` to style a link as a button\n- **_blank** yields a link that opens in a new tab\n- **_self** yields a link that loads the URL into the same browsing context as the current one.\n  This is the default behavior\n- **_parent** yields a link that loads the URL into the parent browsing context of the current one.\n  If there is no parent, this behaves the same way as _self\n- **_top** yields a link that loads the URL into the top-level browsing context.\n  If there is no parent, this behaves the same way as _self.",
                "fieldName": "target"
              },
              {
                "name": "type",
                "type": {
                  "text": "'button' | 'submit' | 'reset'"
                },
                "default": "'button'",
                "description": "Type of button.\n- **button** (default) button has no default behavior and does nothing unless provided some sort\nof client-side trigger\n- **submit** button for submitting form data to a server",
                "fieldName": "type"
              },
              {
                "name": "rel",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Rel if this is an <a> element - this swaps <button> for <a>",
                "fieldName": "rel"
              },
              {
                "name": "svg",
                "type": {
                  "text": "string | undefined"
                },
                "description": "SVG raw string if including an icon within a button.\nMust include the icon's position with `iconPostion`. This prop is used for <cre8-icon>",
                "fieldName": "svg"
              },
              {
                "name": "iconRotateDegree",
                "type": {
                  "text": "number | undefined"
                },
                "default": "0",
                "description": "rotate is used for <cre8-icon> to set the arrow in the correct direction",
                "fieldName": "iconRotateDegree"
              },
              {
                "name": "iconFlipDirection",
                "type": {
                  "text": "string | undefined"
                },
                "description": "flip is used for <cre8-icon> to set the icon in the correct direction",
                "fieldName": "iconFlipDirection"
              },
              {
                "name": "iconPosition",
                "type": {
                  "text": "'before' | 'after' | undefined"
                },
                "default": "undefined",
                "description": "Icon position. Must include the name of the icon with `iconName`\n\n- **before** places the icon before the button text\n- **after** places the icon after the button text",
                "fieldName": "iconPosition"
              },
              {
                "name": "size",
                "type": {
                  "text": "'sm' | 'lg' | undefined"
                },
                "description": "Size variants add another way to increase or decrease visual priority of a button.\n- **sm** shrinks the button typography and overall size from the default. Use when vertical space is constrained.\n- **lg** increases the button typography and overall size from the default.",
                "fieldName": "size"
              },
              {
                "name": "hideText",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Visually hide button text. Text is still accessible to assistive technology.\nUse this for icon-only buttons for accessibility",
                "fieldName": "hideText"
              },
              {
                "name": "inverted",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverted colors Danger Button (onDark)",
                "fieldName": "inverted"
              },
              {
                "name": "ariaLive",
                "type": {
                  "text": "'polite' | 'assertive'"
                },
                "default": "'assertive'",
                "description": "Controls whether your loading status update to voiceover users will occur\nimmediately (used for more urgently needed updates) using `assertive` or at the next convenient\npause in their navigation using `polite`.",
                "fieldName": "ariaLive"
              },
              {
                "name": "buttonAriaExpanded",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Button aria expanded attribute",
                "fieldName": "buttonAriaExpanded"
              }
            ],
            "superclass": {
              "name": "Cre8FormElement",
              "module": "/components/cre8-form-element"
            },
            "tagName": "cre8-danger-button",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8DangerButton",
            "declaration": {
              "name": "Cre8DangerButton",
              "module": "components/danger-button/danger-button.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-danger-button",
            "declaration": {
              "name": "Cre8DangerButton",
              "module": "components/danger-button/danger-button.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8DangerButton",
              "module": "components/danger-button/danger-button.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/date-picker/date-picker.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; @import '../../design-tokens/core/scss/theming/component'; @import \"design-tokens/core/scss/utilities/visibility\"; :host { display: block; } /** * Date Field Label */ .cre8-c-date-picker__label { @include label-styles; } /** * Date Field Body * 1) The div that contains the input and icons */ .cre8-c-date-picker__body { position: relative; display: flex; align-items: center; } /** * Date Field Default Calendar Icon Button * 1) Removes default calendar button and default calendar in Chrome */ input::-webkit-calendar-picker-indicator { display: none; } input[type=\"date\"]::-webkit-input-placeholder { visibility: hidden !important; } .cre8-c-date-picker__calendar-icon-button { position: absolute; right: size(1); background: var(--cre8-color-bg-default); border: none; border-radius: 0; --cre8-icon-height: size(3); --cre8-icon-width: size(3); .cre8-c-date-picker--disabled &, .cre8-c-date-picker--read-only & { background: var(--cre8-color-bg-disabled); } } /** * Date Field Input * 1) The html5 input element */ .cre8-c-date-picker__input { @include input-styles; /** * Readonly input styles */ &:read-only { background-color: var(--cre8-color-bg-disabled); border-color: var(--cre8-color-border-disabled); cursor: default; } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/date-picker/date-picker.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/date-picker/date-picker.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{}"
          },
          {
            "kind": "variable",
            "name": "DefaultWithShortcuts",
            "type": {
              "text": "object"
            },
            "default": "{ args: { hasShortcuts: \"true\", }, }"
          },
          {
            "kind": "variable",
            "name": "Readonly",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Readonly example', readonly: \"true\", value: \"2024-01-01\", }, }"
          },
          {
            "kind": "variable",
            "name": "Disabled",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Disabled example', disabled: 'true', }, }"
          },
          {
            "kind": "variable",
            "name": "Fieldnote",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Fieldnote example', fieldNote: \"This is a field note.\", }, }"
          },
          {
            "kind": "variable",
            "name": "Error",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Error Fieldnote example', errorNote: \"Short, clear error message\", isError: \"true\", fieldNote: \"This is a field note.\", }, }"
          },
          {
            "kind": "variable",
            "name": "Success",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Success Fieldnote example', isSuccess: \"true\", fieldNote: \"This is a field note.\", successNote: \"Short, clear success message\", }, }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/date-picker/date-picker.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/date-picker/date-picker.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "DefaultWithShortcuts",
            "declaration": {
              "name": "DefaultWithShortcuts",
              "module": "components/date-picker/date-picker.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Readonly",
            "declaration": {
              "name": "Readonly",
              "module": "components/date-picker/date-picker.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Disabled",
            "declaration": {
              "name": "Disabled",
              "module": "components/date-picker/date-picker.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Fieldnote",
            "declaration": {
              "name": "Fieldnote",
              "module": "components/date-picker/date-picker.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Error",
            "declaration": {
              "name": "Error",
              "module": "components/date-picker/date-picker.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Success",
            "declaration": {
              "name": "Success",
              "module": "components/date-picker/date-picker.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/date-picker/date-picker.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The Date Picker component renders a form group with label, control, help text and validation styling much\nlike the Field component but exclusively for type=date.\nCre8DatePicker inherts the Cre8Field component.",
            "name": "Cre8DatePicker",
            "members": [
              {
                "kind": "field",
                "name": "showCalendar",
                "type": {
                  "text": "boolean"
                },
                "default": "false"
              },
              {
                "kind": "field",
                "name": "hasShortcuts",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Quick Shortcuts Variant",
                "attribute": "hasShortcuts",
                "reflects": true
              },
              {
                "kind": "method",
                "name": "handleDateOnInput",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "Event"
                    }
                  }
                ],
                "description": "Handle Date On Input\n1) Set the input's value equal to the event.target.value when the input is changed.\n2) Set the internal form value of the input to the updated value"
              },
              {
                "kind": "method",
                "name": "handleCalendarSelect",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "CustomEvent"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "handleOutsideClick",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "CustomEvent"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "toggleCalendar",
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "autocomplete",
                "type": {
                  "text": "'on' | 'off' | 'name' | 'email' | 'username' | 'new-password' | 'current-password' | 'tel' | 'url' | 'address-line1' | 'address-line2' | 'country' | 'postal-code' | undefined"
                },
                "description": "Autocomplete attribute that allows input to expect certain types of information. Note: autocomplete is supported\nby most browsers, but the suggested 'completions' are also sourced from those browsers. Values come\nfrom past user stored data from past interactions in that browser, such as:\n\n 1. From past values entered by the user, but they may also come from pre-configured values. For\n instance, a browser might let the user save their name, address, phone number, and email addresses for\n autocomplete purposes.\n\n 2. Perhaps the browser offers the ability to save encrypted credit card information, for autocompletion\n following a an authentication procedure.\n See: [MDN web docs_](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\n\n NOTE:: In order to provide autocompletion, user-agents might require input, select, textarea\n elements to:\n\n 1. Have a {{name}} and/or {{id}} attribute\n 2. Be descendants of a form element\n 3. The form to have a [submit button](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/submit)",
                "attribute": "autocomplete",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "pattern",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Pattern attribute defines a regular expression to validate against input",
                "attribute": "pattern",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "type",
                "type": {
                  "text": "'text' | 'email' | 'number' | 'url' | 'tel' | 'password' | 'date'"
                },
                "default": "'text'",
                "description": "Type variants\n- **text** renders a standard text input\n- **email** renders a text input for an email format\n- **number** renders an input for number values only\n- **url** renders an input for urls only\n- **tel** renders an input for telephone number values only",
                "attribute": "type",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "placeholder",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The placeholder text that appears inside the input",
                "attribute": "placeholder",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "label",
                "type": {
                  "text": "string"
                },
                "default": "'Label'",
                "description": "The required label that appears above the input",
                "attribute": "label",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "name",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The name property on the input",
                "attribute": "name",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "fieldId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The unique id of the field\n<br/><br/> _*This property is dynamically set_",
                "attribute": "fieldId",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "fieldNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The text that displays below in text field input",
                "attribute": "fieldNote",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "ariaLive",
                "type": {
                  "text": "'polite' | 'assertive'"
                },
                "default": "'polite'",
                "description": "Controls how the voiceover will experience the new information when field note changes,\nimmediately (used for more urgently needed updates) using `assertive` or at the next convenient\npause in their navigation using `polite`.",
                "attribute": "ariaLive",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "ariaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Used to connect the field note in text field to the text menu for accessibility",
                "attribute": "ariaDescribedBy",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "required",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The required attribute on the input",
                "attribute": "required",
                "reflects": true,
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The disabled attribute on the input",
                "attribute": "disabled",
                "reflects": true,
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "isError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent an error state",
                "attribute": "isError",
                "reflects": true,
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "errorText",
                "type": {
                  "text": "string"
                },
                "default": "'Error'",
                "description": "Visually hidden text that always signifies that this is an error for screen reader usage",
                "attribute": "errorText",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "errorNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The error field note that appears below the default field note",
                "attribute": "errorNote",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "max",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The max attribute defines the maximum value that is acceptable and valid for the input containing the attribute.",
                "attribute": "max",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "min",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The min attribute defines the minimum value that is acceptable and valid for the input containing the attribute.",
                "attribute": "min",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "maxlength",
                "type": {
                  "text": "number | undefined"
                },
                "description": "The maxlength is an integer above 0 that indicates the maximum allowed characters to be entered. When using the\nmaxlength prop, you must also use the \"required\" prop to provide Constraint Validation on the input field.\nThis allows users to know why the input they attempted didn't render in the input field. see\n[MDN maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength#constraint_validation)",
                "attribute": "maxlength",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "validationAriaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Additional aria-describedby connection to id for additional success and error notes to be accessible",
                "attribute": "validationAriaDescribedBy",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "isSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent a success state",
                "attribute": "isSuccess",
                "reflects": true,
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "successText",
                "type": {
                  "text": "string"
                },
                "default": "'Success'",
                "description": "Visually hidden text that always signifies that this is successful for screen reader usage",
                "attribute": "successText",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "readonly",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Readonly attribute",
                "attribute": "readonly",
                "reflects": true,
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "successNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The success field note that appears below the default field note",
                "attribute": "successNote",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "field",
                "name": "field",
                "type": {
                  "text": "HTMLInputElement"
                },
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "method",
                "name": "initializeAria",
                "description": "Initialize aria attributes",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "method",
                "name": "fieldNoteAria",
                "description": "Aria describedby string based on field notes and error/success notes\n1) If both validationAriaDescribedBy (error/success note) and field note exists,\nrender both in the input's `aria-describedby` attribute\n2) Otherwise, if only validationAriaDescribedBy exists, then render only that as\nthe `aria-describedby` attribute (input without field note initially, but then error/success is added).\n3) Otherwise, render only the `ariaDescribedBy` property (field note only)",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "method",
                "name": "_handleOnInput",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "Event"
                    }
                  }
                ],
                "description": "Handle On Input\n1) Set the input's value equal to the event.target.value when the input is changed.\n2) Set the internal form value of the input to the updated value",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "kind": "method",
                "name": "renderSuccessErrorFieldNote",
                "description": "Render the success or error field notes\n1. If there is a successNote, then return the field note with the success message and state.\n2. If there is a errorNote, then return the field note with the error message and state.",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              }
            ],
            "attributes": [
              {
                "name": "hasShortcuts",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Quick Shortcuts Variant",
                "fieldName": "hasShortcuts",
                "attribute": "hasShortcuts"
              },
              {
                "name": "autocomplete",
                "type": {
                  "text": "'on' | 'off' | 'name' | 'email' | 'username' | 'new-password' | 'current-password' | 'tel' | 'url' | 'address-line1' | 'address-line2' | 'country' | 'postal-code' | undefined"
                },
                "description": "Autocomplete attribute that allows input to expect certain types of information. Note: autocomplete is supported\nby most browsers, but the suggested 'completions' are also sourced from those browsers. Values come\nfrom past user stored data from past interactions in that browser, such as:\n\n 1. From past values entered by the user, but they may also come from pre-configured values. For\n instance, a browser might let the user save their name, address, phone number, and email addresses for\n autocomplete purposes.\n\n 2. Perhaps the browser offers the ability to save encrypted credit card information, for autocompletion\n following a an authentication procedure.\n See: [MDN web docs_](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\n\n NOTE:: In order to provide autocompletion, user-agents might require input, select, textarea\n elements to:\n\n 1. Have a {{name}} and/or {{id}} attribute\n 2. Be descendants of a form element\n 3. The form to have a [submit button](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/submit)",
                "fieldName": "autocomplete",
                "attribute": "autocomplete",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "pattern",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Pattern attribute defines a regular expression to validate against input",
                "fieldName": "pattern",
                "attribute": "pattern",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "type",
                "type": {
                  "text": "'text' | 'email' | 'number' | 'url' | 'tel' | 'password' | 'date'"
                },
                "default": "'text'",
                "description": "Type variants\n- **text** renders a standard text input\n- **email** renders a text input for an email format\n- **number** renders an input for number values only\n- **url** renders an input for urls only\n- **tel** renders an input for telephone number values only",
                "fieldName": "type",
                "attribute": "type",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "placeholder",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The placeholder text that appears inside the input",
                "fieldName": "placeholder",
                "attribute": "placeholder",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "label",
                "type": {
                  "text": "string"
                },
                "default": "'Label'",
                "description": "The required label that appears above the input",
                "fieldName": "label",
                "attribute": "label",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "name",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The name property on the input",
                "fieldName": "name",
                "attribute": "name",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "fieldId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The unique id of the field\n<br/><br/> _*This property is dynamically set_",
                "fieldName": "fieldId",
                "attribute": "fieldId",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "fieldNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The text that displays below in text field input",
                "fieldName": "fieldNote",
                "attribute": "fieldNote",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "ariaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Used to connect the field note in text field to the text menu for accessibility",
                "fieldName": "ariaDescribedBy",
                "attribute": "ariaDescribedBy",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "required",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The required attribute on the input",
                "fieldName": "required",
                "attribute": "required",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The disabled attribute on the input",
                "fieldName": "disabled",
                "attribute": "disabled",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "isError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent an error state",
                "fieldName": "isError",
                "attribute": "isError",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "errorText",
                "type": {
                  "text": "string"
                },
                "default": "'Error'",
                "description": "Visually hidden text that always signifies that this is an error for screen reader usage",
                "fieldName": "errorText",
                "attribute": "errorText",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "errorNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The error field note that appears below the default field note",
                "fieldName": "errorNote",
                "attribute": "errorNote",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "max",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The max attribute defines the maximum value that is acceptable and valid for the input containing the attribute.",
                "fieldName": "max",
                "attribute": "max",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "min",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The min attribute defines the minimum value that is acceptable and valid for the input containing the attribute.",
                "fieldName": "min",
                "attribute": "min",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "maxlength",
                "type": {
                  "text": "number | undefined"
                },
                "description": "The maxlength is an integer above 0 that indicates the maximum allowed characters to be entered. When using the\nmaxlength prop, you must also use the \"required\" prop to provide Constraint Validation on the input field.\nThis allows users to know why the input they attempted didn't render in the input field. see\n[MDN maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength#constraint_validation)",
                "fieldName": "maxlength",
                "attribute": "maxlength",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "validationAriaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Additional aria-describedby connection to id for additional success and error notes to be accessible",
                "fieldName": "validationAriaDescribedBy",
                "attribute": "validationAriaDescribedBy",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "isSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent a success state",
                "fieldName": "isSuccess",
                "attribute": "isSuccess",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "successText",
                "type": {
                  "text": "string"
                },
                "default": "'Success'",
                "description": "Visually hidden text that always signifies that this is successful for screen reader usage",
                "fieldName": "successText",
                "attribute": "successText",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "readonly",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Readonly attribute",
                "fieldName": "readonly",
                "attribute": "readonly",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "successNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The success field note that appears below the default field note",
                "fieldName": "successNote",
                "attribute": "successNote",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              },
              {
                "name": "ariaLive",
                "type": {
                  "text": "'polite' | 'assertive'"
                },
                "default": "'polite'",
                "description": "Controls how the voiceover will experience the new information when field note changes,\nimmediately (used for more urgently needed updates) using `assertive` or at the next convenient\npause in their navigation using `polite`.",
                "fieldName": "ariaLive",
                "inheritedFrom": {
                  "name": "Cre8Field",
                  "module": "components/field/field.ts"
                }
              }
            ],
            "superclass": {
              "name": "Cre8Field",
              "module": "/components/field/field"
            },
            "tagName": "cre8-date-picker",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8DatePicker",
            "declaration": {
              "name": "Cre8DatePicker",
              "module": "components/date-picker/date-picker.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-date-picker",
            "declaration": {
              "name": "Cre8DatePicker",
              "module": "components/date-picker/date-picker.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8DatePicker",
              "module": "components/date-picker/date-picker.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/chart/chart.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css``"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/chart/chart.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/chart/chart.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Bar"
          },
          {
            "kind": "function",
            "name": "Line"
          },
          {
            "kind": "function",
            "name": "Pie"
          },
          {
            "kind": "function",
            "name": "DefaultChart"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/chart/chart.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Bar",
            "declaration": {
              "name": "Bar",
              "module": "components/chart/chart.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Line",
            "declaration": {
              "name": "Line",
              "module": "components/chart/chart.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Pie",
            "declaration": {
              "name": "Pie",
              "module": "components/chart/chart.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "DefaultChart",
            "declaration": {
              "name": "DefaultChart",
              "module": "components/chart/chart.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/chart/chart.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "PlotlyComponent",
            "members": [
              {
                "kind": "field",
                "name": "chartType",
                "type": {
                  "text": "ChartType"
                },
                "default": "'line'",
                "attribute": "chartType"
              },
              {
                "kind": "field",
                "name": "chartData",
                "type": {
                  "text": "ChartData"
                },
                "default": "{}",
                "attribute": "chartData"
              },
              {
                "kind": "field",
                "name": "chartOptions",
                "type": {
                  "text": "ChartOptions"
                },
                "default": "{}",
                "attribute": "chartOptions"
              },
              {
                "kind": "field",
                "name": "chartConfig",
                "type": {
                  "text": "ChartConfig"
                },
                "default": "{}",
                "attribute": "chartConfig"
              },
              {
                "kind": "field",
                "name": "enableTests",
                "type": {
                  "text": "boolean"
                },
                "default": "false",
                "attribute": "enableTests"
              },
              {
                "kind": "field",
                "name": "autoLoad",
                "type": {
                  "text": "boolean"
                },
                "default": "true",
                "attribute": "autoLoad"
              },
              {
                "kind": "field",
                "name": "plotlyVersion",
                "type": {
                  "text": "string"
                },
                "default": "'2.26.0'",
                "attribute": "plotlyVersion"
              },
              {
                "kind": "field",
                "name": "plotlyCdns",
                "type": {
                  "text": "string[]"
                },
                "default": "[ 'https://cdnjs.cloudflare.com/ajax/libs/plotly.js', 'https://unpkg.com/plotly.js', 'https://cdn.jsdelivr.net/npm/plotly.js' ]",
                "attribute": "plotlyCdns"
              },
              {
                "kind": "field",
                "name": "isLoading",
                "type": {
                  "text": "boolean"
                },
                "privacy": "private",
                "default": "true"
              },
              {
                "kind": "field",
                "name": "error",
                "type": {
                  "text": "string | null"
                },
                "privacy": "private",
                "default": "null"
              },
              {
                "kind": "field",
                "name": "plotlyLoaded",
                "type": {
                  "text": "boolean"
                },
                "privacy": "private",
                "default": "false"
              },
              {
                "kind": "field",
                "name": "testResults",
                "type": {
                  "text": "TestResult[]"
                },
                "privacy": "private",
                "default": "[]"
              },
              {
                "kind": "field",
                "name": "chartCreated",
                "type": {
                  "text": "boolean"
                },
                "privacy": "private",
                "default": "false"
              },
              {
                "kind": "field",
                "name": "chartContainer",
                "type": {
                  "text": "HTMLDivElement"
                },
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "testResultsContainer",
                "type": {
                  "text": "HTMLDivElement | undefined"
                },
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "plotlyInstance",
                "type": {
                  "text": "any"
                },
                "privacy": "private",
                "default": "null"
              },
              {
                "kind": "field",
                "name": "loadAttempts",
                "type": {
                  "text": "number"
                },
                "privacy": "private",
                "default": "0"
              },
              {
                "kind": "field",
                "name": "maxLoadAttempts",
                "type": {
                  "text": "number"
                },
                "privacy": "private",
                "default": "30"
              },
              {
                "kind": "field",
                "name": "currentCdnIndex",
                "type": {
                  "text": "number"
                },
                "privacy": "private",
                "default": "0"
              },
              {
                "kind": "method",
                "name": "initializeDefaults",
                "privacy": "private",
                "return": {
                  "type": {
                    "text": "void"
                  }
                }
              },
              {
                "kind": "method",
                "name": "loadPlotly",
                "privacy": "public",
                "return": {
                  "type": {
                    "text": "Promise<void>"
                  }
                }
              },
              {
                "kind": "method",
                "name": "createChart",
                "privacy": "public",
                "return": {
                  "type": {
                    "text": "Promise<{ success: boolean; message: string; error?: any }>"
                  }
                }
              },
              {
                "kind": "method",
                "name": "runTests",
                "privacy": "public",
                "return": {
                  "type": {
                    "text": "Promise<TestResult[]>"
                  }
                }
              },
              {
                "kind": "method",
                "name": "getSampleData",
                "privacy": "public",
                "return": {
                  "type": {
                    "text": "Record<ChartType, ChartData>"
                  }
                }
              },
              {
                "kind": "method",
                "name": "attemptPlotlyLoad",
                "privacy": "private",
                "return": {
                  "type": {
                    "text": "Promise<void>"
                  }
                }
              },
              {
                "kind": "method",
                "name": "loadPlotlyScript",
                "privacy": "private",
                "return": {
                  "type": {
                    "text": "void"
                  }
                }
              },
              {
                "kind": "method",
                "name": "onPlotlyLoaded",
                "privacy": "private",
                "return": {
                  "type": {
                    "text": "void"
                  }
                }
              },
              {
                "kind": "method",
                "name": "onPlotlyLoadError",
                "privacy": "private",
                "return": {
                  "type": {
                    "text": "void"
                  }
                },
                "parameters": [
                  {
                    "name": "message",
                    "type": {
                      "text": "string"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "validateChartData",
                "privacy": "private",
                "return": {
                  "type": {
                    "text": "void"
                  }
                }
              },
              {
                "kind": "method",
                "name": "createTrace",
                "privacy": "private",
                "return": {
                  "type": {
                    "text": "any"
                  }
                }
              },
              {
                "kind": "method",
                "name": "createLayout",
                "privacy": "private",
                "return": {
                  "type": {
                    "text": "any"
                  }
                }
              },
              {
                "kind": "method",
                "name": "runValidationTests",
                "privacy": "private",
                "return": {
                  "type": {
                    "text": "void"
                  }
                }
              },
              {
                "kind": "method",
                "name": "runChartCreationTests",
                "privacy": "private",
                "return": {
                  "type": {
                    "text": "Promise<void>"
                  }
                }
              },
              {
                "kind": "method",
                "name": "handleSampleChart",
                "privacy": "private",
                "return": {
                  "type": {
                    "text": "Promise<void>"
                  }
                },
                "parameters": [
                  {
                    "name": "type",
                    "type": {
                      "text": "ChartType"
                    }
                  }
                ]
              }
            ],
            "attributes": [
              {
                "name": "chartType",
                "type": {
                  "text": "ChartType"
                },
                "default": "'line'",
                "fieldName": "chartType"
              },
              {
                "name": "chartData",
                "type": {
                  "text": "ChartData"
                },
                "default": "{}",
                "fieldName": "chartData"
              },
              {
                "name": "chartOptions",
                "type": {
                  "text": "ChartOptions"
                },
                "default": "{}",
                "fieldName": "chartOptions"
              },
              {
                "name": "chartConfig",
                "type": {
                  "text": "ChartConfig"
                },
                "default": "{}",
                "fieldName": "chartConfig"
              },
              {
                "name": "enableTests",
                "type": {
                  "text": "boolean"
                },
                "default": "false",
                "fieldName": "enableTests"
              },
              {
                "name": "autoLoad",
                "type": {
                  "text": "boolean"
                },
                "default": "true",
                "fieldName": "autoLoad"
              },
              {
                "name": "plotlyVersion",
                "type": {
                  "text": "string"
                },
                "default": "'2.26.0'",
                "fieldName": "plotlyVersion"
              },
              {
                "name": "plotlyCdns",
                "type": {
                  "text": "string[]"
                },
                "default": "[ 'https://cdnjs.cloudflare.com/ajax/libs/plotly.js', 'https://unpkg.com/plotly.js', 'https://cdn.jsdelivr.net/npm/plotly.js' ]",
                "fieldName": "plotlyCdns"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            }
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "PlotlyComponent",
            "declaration": {
              "name": "PlotlyComponent",
              "module": "components/chart/chart.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/divider/divider.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #DIVIDER :host { display: flex; } /** * Divider Element */ .cre8-c-divider { background-color: var(--cre8-color-border-default); margin-top: size(1); margin-bottom: size(1); } .cre8-c-divider--horizontal { width: 100%; height: var(--cre8-border-width-default); } .cre8-c-divider--vertical { width: var(--cre8-border-width-default); height: 100%; margin-top: 0; margin-bottom: 0; margin-left: size(1); margin-right: size(1); } /** * Divider colors */ .cre8-c-divider--brand { background-color: var(--cre8-color-border-brand); } .cre8-c-divider--knockout { background-color: var(--cre8-color-border-knockout); } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/divider/divider.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/divider/divider.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{ args: { variant: 'horizontal', }, }"
          },
          {
            "kind": "variable",
            "name": "Horizontal",
            "type": {
              "text": "object"
            },
            "default": "{ args: { variant: 'horizontal', }, render: (args) => html`<p>Lorem ipsum dolor sit amet</p><cre8-divider ${spread(args)}></cre8-divider><p>Agam utroque scribentur eos id</p>`, }"
          },
          {
            "kind": "variable",
            "name": "BrandHorizontal",
            "type": {
              "text": "object"
            },
            "default": "{ args: { variant: 'horizontal', status: 'brand', }, render: (args) => html`<p>Lorem ipsum dolor sit amet</p><cre8-divider ${spread(args)}></cre8-divider><p>Agam utroque scribentur eos id</p>`, }"
          },
          {
            "kind": "variable",
            "name": "KnockoutHorizontal",
            "type": {
              "text": "object"
            },
            "default": "{ args: { variant: 'horizontal', status: 'knockout', }, render: (args) => html` <div style=\"padding: 20px; background: var(--cre8-color-bg-brand-strong); color: var(--cre8-color-content-knockout);\"> <p>Lorem ipsum dolor sit amet</p><cre8-divider ${spread(args)}></cre8-divider><p>Agam utroque scribentur eos id</p> </div>`, }"
          },
          {
            "kind": "variable",
            "name": "HorizontalInFlowContainer",
            "type": {
              "text": "object"
            },
            "default": "{ args: { variant: 'horizontal', }, render: (args) => html` <div> <p>Lorem ipsum dolor sit amet, discere evertitur adolescens ea vis, vim ad veniam labitur, ex dicat iudicabit delicatissimi cum. Ne sit dicat dolorum reformidans, an ius viris constituto. Mei id verterem ullamcorper, ad sit graece utamur quaerendum. Erant adversarium sea ex. Nostrum fabellas referrentur has in, qui duis omnis dolores ne.</p><cre8-divider ${spread(args)}></cre8-divider><p>Agam utroque scribentur eos id, ex dolore accumsan similique duo, vel cu putant vocent singulis. Habeo aeterno prompta an quo, duo natum maluisset no. Ex sint perpetua eum, mutat voluptaria comprehensam per ea, dicant mandamus eos ei. Sit ipsum tation neglegentur at. His platonem intellegam vituperatoribus ea, in molestie accusata per. Eius vituperatoribus cu mel. Nec regione minimum ut, volumus delicata duo ne.</p> </div>`, }"
          },
          {
            "kind": "variable",
            "name": "Vertical",
            "type": {
              "text": "object"
            },
            "default": "{ args: { variant: 'vertical', }, render: (args) => html` <div style=\"display: flex; width: fit-content;\"> <p>Lorem ipsum dolor sit amet</p><cre8-divider ${spread(args)}></cre8-divider><p>Agam utroque scribentur eos id</p> </div>`, }"
          },
          {
            "kind": "variable",
            "name": "VerticalInFlowContainer",
            "type": {
              "text": "object"
            },
            "default": "{ args: { variant: 'vertical', }, render: (args) => html` <div style=\"display: flex;\"> <p>Lorem ipsum dolor sit amet, discere evertitur adolescens ea vis, vim ad veniam labitur, ex dicat iudicabit delicatissimi cum. Ne sit dicat dolorum reformidans, an ius viris constituto. Mei id verterem ullamcorper, ad sit graece utamur quaerendum. Erant adversarium sea ex. Nostrum fabellas referrentur has in, qui duis omnis dolores ne.</p><cre8-divider ${spread(args)}></cre8-divider><p>Agam utroque scribentur eos id, ex dolore accumsan similique duo, vel cu putant vocent singulis. Habeo aeterno prompta an quo, duo natum maluisset no. Ex sint perpetua eum, mutat voluptaria comprehensam per ea, dicant mandamus eos ei. Sit ipsum tation neglegentur at. His platonem intellegam vituperatoribus ea, in molestie accusata per. Eius vituperatoribus cu mel. Nec regione minimum ut, volumus delicata duo ne.</p> </div>`, }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/divider/divider.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/divider/divider.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Horizontal",
            "declaration": {
              "name": "Horizontal",
              "module": "components/divider/divider.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "BrandHorizontal",
            "declaration": {
              "name": "BrandHorizontal",
              "module": "components/divider/divider.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "KnockoutHorizontal",
            "declaration": {
              "name": "KnockoutHorizontal",
              "module": "components/divider/divider.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "HorizontalInFlowContainer",
            "declaration": {
              "name": "HorizontalInFlowContainer",
              "module": "components/divider/divider.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Vertical",
            "declaration": {
              "name": "Vertical",
              "module": "components/divider/divider.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "VerticalInFlowContainer",
            "declaration": {
              "name": "VerticalInFlowContainer",
              "module": "components/divider/divider.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/divider/divider.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The divider component is a separator between sections of content or groups of items.\nIt often contains a horizontal or vertical line.",
            "name": "Cre8Divider",
            "members": [
              {
                "kind": "field",
                "name": "variant",
                "type": {
                  "text": "'horizontal' | 'vertical'"
                },
                "default": "'horizontal'",
                "description": "Divider variants\n- By default, the component renders the horizontal divider\n- **vertical** renders the vertical divider",
                "attribute": "variant"
              },
              {
                "kind": "field",
                "name": "status",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Status (a color variant prop)\n- By default, the divider has gray color.\n- **brand**, the divider has blue color.\n- **knockout**, the divider has white color.",
                "attribute": "status"
              }
            ],
            "attributes": [
              {
                "name": "variant",
                "type": {
                  "text": "'horizontal' | 'vertical'"
                },
                "default": "'horizontal'",
                "description": "Divider variants\n- By default, the component renders the horizontal divider\n- **vertical** renders the vertical divider",
                "fieldName": "variant"
              },
              {
                "name": "status",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Status (a color variant prop)\n- By default, the divider has gray color.\n- **brand**, the divider has blue color.\n- **knockout**, the divider has white color.",
                "fieldName": "status"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-divider",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Divider",
            "declaration": {
              "name": "Cre8Divider",
              "module": "components/divider/divider.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-divider",
            "declaration": {
              "name": "Cre8Divider",
              "module": "components/divider/divider.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Divider",
              "module": "components/divider/divider.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/dropdown-item/dropdown-item.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * 1) Dropdown Item */ .cre8-dropdown-item { list-style-type: none; > { button { @include cre8-typography-body-default; background-color: var(--cre8-color-bg-default); border: var(--cre8-border-width-none); border-radius: var(--cre8-border-radius-default); color: var(--cre8-color-content-default); width: 100%; cursor: pointer; margin: var(--cre8-spacing-0); padding: var(--cre8-spacing-8) var(--cre8-spacing-8); text-align: left; &:active, &:hover, &:focus { background-color: var(--cre8-color-bg-brand-hover); color: var(--cre8-color-content-default); outline: var(--cre8-border-width-none); } } } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/dropdown-item/dropdown-item.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/dropdown-item/dropdown-item.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "Default"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/dropdown-item/dropdown-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/dropdown-item/dropdown-item.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/dropdown-item/dropdown-item.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The Dropdown item component is designed to be used with Dropdown component, each item represents a\nselectable option or action within the dropdown menu. It can be configured to trigger actions, navigate\nto links, initiate commands when clicked.",
            "name": "Cre8DropdownItem",
            "members": [
              {
                "kind": "field",
                "name": "ariaLabel",
                "type": {
                  "text": "string"
                },
                "default": "''",
                "attribute": "ariaLabel"
              },
              {
                "kind": "method",
                "name": "_handleClick",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "MouseEvent"
                    }
                  }
                ]
              }
            ],
            "events": [
              {
                "name": "dropdown-item-selected",
                "type": {
                  "text": "Event"
                }
              }
            ],
            "attributes": [
              {
                "name": "ariaLabel",
                "type": {
                  "text": "string"
                },
                "default": "''",
                "fieldName": "ariaLabel"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-dropdown-item",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8DropdownItem",
            "declaration": {
              "name": "Cre8DropdownItem",
              "module": "components/dropdown-item/dropdown-item.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-dropdown-item",
            "declaration": {
              "name": "Cre8DropdownItem",
              "module": "components/dropdown-item/dropdown-item.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8DropdownItem",
              "module": "components/dropdown-item/dropdown-item.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/dropdown/dropdown.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #DROPDOWN /** * 1) Dropdown */ .cre8-c-dropdown-container { display: inline-flex; position: relative; } .cre8-c-dropdown { border: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); box-shadow: var(--cre8-shadow-default); border-radius: var(--cre8-border-radius-default); display: none; flex-direction: column; left: 0; min-width: 100%; padding: var(--cre8-spacing-8); position: absolute; top: 100%; white-space: nowrap; } .cre8-c-dropdown--open { display: flex; } .cre8-c-dropdown--icon-button { color: var(--cre8-color-button-secondary-content); margin-top: size(1); } .cre8-c-dropdown--icon-link { color: var(--cre8-color-content-link); margin-top: size(1); } .cre8-c-dropdown--toggle { @include cre8-typography-label-default; align-items: center; justify-content: space-between; display: flex; gap: var(--cre8-spacing-8); white-space: nowrap; } .cre8-c-dropdown--button { background-color: var(--cre8-color-button-secondary-bg); border: var(--cre8-border-style-default) var(--cre8-border-width-default) var(--cre8-color-button-secondary-border); border-radius: var(--cre8-border-radius-button); color: var(--cre8-color-button-secondary-content); padding: var(--cre8-spacing-8) var(--cre8-spacing-16); } .cre8-c-dropdown--link { color: var(--cre8-color-content-link); background-color: var(--cre8-color-bg-transparent); text-decoration: underline; } .cre8-c-dropdown--close { display: none; } ul { list-style-type: none; padding: var(--cre8-spacing-0); margin: 0; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/dropdown/dropdown.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/dropdown/dropdown.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "Default"
          },
          {
            "kind": "variable",
            "name": "ButtonDropdown"
          },
          {
            "kind": "variable",
            "name": "LinkDropdown"
          },
          {
            "kind": "variable",
            "name": "ButtonDropdownWithScrollBar"
          },
          {
            "kind": "variable",
            "name": "LinkDropdownWithScrollBar"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/dropdown/dropdown.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/dropdown/dropdown.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "ButtonDropdown",
            "declaration": {
              "name": "ButtonDropdown",
              "module": "components/dropdown/dropdown.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "LinkDropdown",
            "declaration": {
              "name": "LinkDropdown",
              "module": "components/dropdown/dropdown.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "ButtonDropdownWithScrollBar",
            "declaration": {
              "name": "ButtonDropdownWithScrollBar",
              "module": "components/dropdown/dropdown.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "LinkDropdownWithScrollBar",
            "declaration": {
              "name": "LinkDropdownWithScrollBar",
              "module": "components/dropdown/dropdown.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/dropdown/dropdown.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The Dropdown menu itself is a container that can host multiple interactive items, commonly formatted as a list",
            "name": "Cre8Dropdown",
            "members": [
              {
                "kind": "field",
                "name": "open",
                "type": {
                  "text": "boolean"
                },
                "default": "false"
              },
              {
                "kind": "field",
                "name": "buttonText",
                "type": {
                  "text": "string"
                },
                "default": "''",
                "description": "Dropdown header",
                "attribute": "buttonText"
              },
              {
                "kind": "field",
                "name": "maxHeight",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Enables scrolling once content reached to specified height, the height should mention in px units, ex: 100px",
                "attribute": "maxHeight"
              },
              {
                "kind": "field",
                "name": "dropdownContent",
                "type": {
                  "text": "HTMLElement"
                }
              },
              {
                "kind": "field",
                "name": "dropdownWithLink",
                "type": {
                  "text": "boolean"
                },
                "default": "false",
                "description": "button text represents as a link",
                "attribute": "dropdownWithLink"
              },
              {
                "kind": "method",
                "name": "_toggleDropdown",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "Event"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "_updateDropdownPosition",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_closeDropdown",
                "privacy": "private"
              }
            ],
            "attributes": [
              {
                "name": "buttonText",
                "type": {
                  "text": "string"
                },
                "default": "''",
                "description": "Dropdown header",
                "fieldName": "buttonText"
              },
              {
                "name": "maxHeight",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Enables scrolling once content reached to specified height, the height should mention in px units, ex: 100px",
                "fieldName": "maxHeight"
              },
              {
                "name": "dropdownWithLink",
                "type": {
                  "text": "boolean"
                },
                "default": "false",
                "description": "button text represents as a link",
                "fieldName": "dropdownWithLink"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-dropdown",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Dropdown",
            "declaration": {
              "name": "Cre8Dropdown",
              "module": "components/dropdown/dropdown.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-dropdown",
            "declaration": {
              "name": "Cre8Dropdown",
              "module": "components/dropdown/dropdown.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Dropdown",
              "module": "components/dropdown/dropdown.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/field-note/field-note.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; :host { display: flex; } /** * Field Note * 1) Messaging associated with the form field usually located below the form field input */ .cre8-c-field-note { display: flex; align-items: flex-start; gap: size(0.5); color: var(--cre8-color-content-default); margin-top: size(0.5); } .cre8-field-note-icon { margin-top: size(0.5); height: size(2); width: size(2); } /** * Field Note Error State */ .cre8-c-field-note.cre8-is-error { color: var(--cre8-color-content-error); } /** * Field Note Success State */ .cre8-c-field-note.cre8-is-success { color: var(--cre8-color-content-success); } /** * Inverted field note */ .cre8-c-field-note--inverted { color: var(--cre8-color-content-knockout); } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/field-note/field-note.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/field-note/field-note.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "meta",
            "type": {
              "text": "object"
            },
            "default": "{ title: 'cre8 Components/Field Note', render: ({slot, ...args}) => html`<cre8-field-note ${spread(args)}>${unsafeHTML(sanitizeInput(slot, 'cre8-text-link'))}</cre8-field-note>`, component: 'cre8-field-note', parameters: { status: { type: 'inProgress' } }, argTypes: { iconName: {control: 'text'}, // iconName will be deprecated isError: {control: 'boolean'}, isSuccess: {control: 'boolean'}, } }"
          },
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{ args: { slot: 'This is a field note.' }, }"
          },
          {
            "kind": "variable",
            "name": "BeginningLink",
            "type": {
              "text": "object"
            },
            "default": "{ args: { slot: `<cre8-text-link href=\"https://www.cigna.com\">Helpful link</cre8-text-link> at the beginning of a field note` }, }"
          },
          {
            "kind": "variable",
            "name": "MiddleLink",
            "type": {
              "text": "object"
            },
            "default": "{ args: { slot: `This is a field note with a <cre8-text-link href=\"https://www.cigna.com\">helpful link</cre8-text-link> in the middle of content` }, }"
          },
          {
            "kind": "variable",
            "name": "EndingLink",
            "type": {
              "text": "object"
            },
            "default": "{ args: { slot: `This is a field note with an ending <cre8-text-link href=\"https://www.cigna.com\">helpful link</cre8-text-link>` }, }"
          },
          {
            "kind": "variable",
            "name": "Error",
            "type": {
              "text": "object"
            },
            "default": "{ args: { isError: true, slot: 'This is a field note with an error state.' }, }"
          },
          {
            "kind": "variable",
            "name": "Success",
            "type": {
              "text": "object"
            },
            "default": "{ args: { isSuccess: true, slot: 'This is a field note with a success state.' }, }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "meta",
              "module": "components/field-note/field-note.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/field-note/field-note.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "BeginningLink",
            "declaration": {
              "name": "BeginningLink",
              "module": "components/field-note/field-note.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "MiddleLink",
            "declaration": {
              "name": "MiddleLink",
              "module": "components/field-note/field-note.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "EndingLink",
            "declaration": {
              "name": "EndingLink",
              "module": "components/field-note/field-note.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Error",
            "declaration": {
              "name": "Error",
              "module": "components/field-note/field-note.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Success",
            "declaration": {
              "name": "Success",
              "module": "components/field-note/field-note.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/field-note/field-note.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "Field Note gives direction on how to fill out a form field and to alert users of form errors and successes.\nIt’s used below an input field and never on its own.",
            "name": "Cre8FieldNote",
            "slots": [
              {
                "description": "The note content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "isError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent an error",
                "attribute": "isError",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "isSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent a success",
                "attribute": "isSuccess",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "iconName",
                "type": {
                  "text": "string | undefined"
                },
                "description": "DEPRECATED: Icon name used for the icon before to the field note",
                "deprecated": "true",
                "attribute": "iconName"
              },
              {
                "kind": "method",
                "name": "fieldNoteAriaLive",
                "return": {
                  "type": {
                    "text": "'polite' | 'off' | 'assertive'"
                  }
                },
                "description": "Check if there are success or error states and set \"aria-live=polite\""
              }
            ],
            "attributes": [
              {
                "name": "isError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent an error",
                "fieldName": "isError",
                "attribute": "isError"
              },
              {
                "name": "isSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent a success",
                "fieldName": "isSuccess",
                "attribute": "isSuccess"
              },
              {
                "name": "iconName",
                "type": {
                  "text": "string | undefined"
                },
                "description": "DEPRECATED: Icon name used for the icon before to the field note",
                "deprecated": "true",
                "fieldName": "iconName"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-field-note",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8FieldNote",
            "declaration": {
              "name": "Cre8FieldNote",
              "module": "components/field-note/field-note.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-field-note",
            "declaration": {
              "name": "Cre8FieldNote",
              "module": "components/field-note/field-note.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8FieldNote",
              "module": "components/field-note/field-note.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/feature/feature.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #FEATURE /** * 1) A Feature is a prominent marketing block that contains * Side by side information and an image */ .cre8-c-feature { display: flex; /* 2 */ flex-direction: column; align-items: stretch; color: var(--cre8-feature-text-color, var(--cre8-theme-color-core-text, var(--cre8-color-neutral-black))); border-radius: var(--cre8-feature-border-radius, var(--cre8-border-radius-default, 0)); @media all and (min-width:$cre8-breakpoint-md) { flex-direction: row; } } /** * Inverted feature */ .cre8-c-feature--inverted { color: var(--cre8-feature-inverted-text-color, var(--cre8-theme-color-inverted, var(--cre8-color-neutral-white))); } /** * Feature body * 1) Container within feature that usually contains an excerpt of text * 2) Take up the remaining space on medr screens */ .cre8-c-feature__body { margin-bottom: size(4); @media all and (min-width:$cre8-breakpoint-md) { display: flex; flex-direction: column; flex: 1; padding-right: size(4); margin-bottom: 0; } } /** * Feature media container */ .cre8-c-feature__media { width: 100%; @media all and (min-width:$cre8-breakpoint-md) { width: 45%; } } /** * Feature image */ .cre8-c-feature__image { display: block; width: 100%; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/feature/feature.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/feature/feature.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "Inverted"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/feature/feature.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/feature/feature.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Inverted",
            "declaration": {
              "name": "Inverted",
              "module": "components/feature/feature.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/feature/feature.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8Feature",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "imgSrc",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Image source",
                "attribute": "imgSrc"
              },
              {
                "kind": "field",
                "name": "imgAlt",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Image alt text",
                "attribute": "imgAlt"
              },
              {
                "kind": "field",
                "name": "inverted",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverted variant\n1) Used for dark backgrounds",
                "attribute": "inverted",
                "reflects": true
              }
            ],
            "attributes": [
              {
                "name": "imgSrc",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Image source",
                "fieldName": "imgSrc"
              },
              {
                "name": "imgAlt",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Image alt text",
                "fieldName": "imgAlt"
              },
              {
                "name": "inverted",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverted variant\n1) Used for dark backgrounds",
                "fieldName": "inverted"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-feature",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Feature",
            "declaration": {
              "name": "Cre8Feature",
              "module": "components/feature/feature.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-feature",
            "declaration": {
              "name": "Cre8Feature",
              "module": "components/feature/feature.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Feature",
              "module": "components/feature/feature.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/footer/footer.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; @import '@cre8_dev/cre8-design-tokens/lib/web/layouts/breakpoints.scss'; // #FOOTER /** * 1) Container used to house various Components and content for the global footer */ .cre8-c-footer { @include cre8-typography-body-default(); background: var(--cre8-color-bg-brand-xstrong); color: var(--cre8-color-content-knockout); padding-top: size(5); padding-bottom: size(6); @media all and (min-width:$cre8-breakpoint-lg) { padding-top: size(6.875); } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/footer/footer.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/footer/footer.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/footer/footer.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/footer/footer.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/footer/footer.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8Footer",
            "slots": [
              {
                "description": "The footer content",
                "name": ""
              },
              {
                "description": "The top content (above the default slot)",
                "name": "top"
              },
              {
                "description": "The bottom content (below the default slot)",
                "name": "bottom"
              }
            ],
            "members": [],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-footer",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Footer",
            "declaration": {
              "name": "Cre8Footer",
              "module": "components/footer/footer.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-footer",
            "declaration": {
              "name": "Cre8Footer",
              "module": "components/footer/footer.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Footer",
              "module": "components/footer/footer.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/global-nav/global-nav.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #GLOBAL NAV /** * Inverted Global nav */ .cre8-c-global-nav--inverted { --cre8-global-nav-link-color: var(--cre8-color-content-knockout); } /** * Global nav list * 1) Stack on small screens within the toggleable menu but place side by side on large screens */ .cre8-c-global-nav__list { display: flex; margin: 0; padding: 0; width: 100%; list-style: none; overflow: auto; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/global-nav/global-nav.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/global-nav/global-nav.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/global-nav/global-nav.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/global-nav/global-nav.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/global-nav/global-nav.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8GlobalNav",
            "slots": [
              {
                "description": "The primary navigation items",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "inverted",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverted variant\n1) Used for dark backgrounds",
                "attribute": "inverted",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "behavior",
                "type": {
                  "text": "'side-by-side' | undefined"
                },
                "description": "Behavior variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**side-by-side** keeps the primary nav item always in a horizontal pattern</li>\n</ul>\n</cre8-text-passage>",
                "attribute": "behavior"
              },
              {
                "kind": "field",
                "name": "navAriaLabel",
                "type": {
                  "text": "string"
                },
                "default": "'global'",
                "description": "aria-label attribute to designate at name for the nav. Can be override by user",
                "attribute": "navAriaLabel"
              }
            ],
            "attributes": [
              {
                "name": "inverted",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverted variant\n1) Used for dark backgrounds",
                "fieldName": "inverted"
              },
              {
                "name": "behavior",
                "type": {
                  "text": "'side-by-side' | undefined"
                },
                "description": "Behavior variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**side-by-side** keeps the primary nav item always in a horizontal pattern</li>\n</ul>\n</cre8-text-passage>",
                "fieldName": "behavior"
              },
              {
                "name": "navAriaLabel",
                "type": {
                  "text": "string"
                },
                "default": "'global'",
                "description": "aria-label attribute to designate at name for the nav. Can be override by user",
                "fieldName": "navAriaLabel"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-global-nav",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8GlobalNav",
            "declaration": {
              "name": "Cre8GlobalNav",
              "module": "components/global-nav/global-nav.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-global-nav",
            "declaration": {
              "name": "Cre8GlobalNav",
              "module": "components/global-nav/global-nav.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8GlobalNav",
              "module": "components/global-nav/global-nav.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/field/field.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css` @import '../../design-tokens/core/scss/theming/component'; :host{ display: block; } /** * Field Label */ .cre8-c-field__label { @include label-styles(); } /** * Field Body * 1) The div that contains the input and icons */ .cre8-c-field__body { position: relative; } /** * Field Input * 1) The html5 input element */ .cre8-c-field__input { @include input-styles(); /** * Readonly input styles */ &:read-only { background-color: var(--cre8-color-bg-disabled); border-color: var(--cre8-color-border-disabled); cursor: default; } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/field/field.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/field/field.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{}"
          },
          {
            "kind": "variable",
            "name": "Email",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Email Field', type: 'email', }, }"
          },
          {
            "kind": "variable",
            "name": "Number",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Number Field', type: 'number', }, }"
          },
          {
            "kind": "variable",
            "name": "Url",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Url Field', type: 'url', }, }"
          },
          {
            "kind": "variable",
            "name": "Tel",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Telephone Field', type: 'tel', }, }"
          },
          {
            "kind": "variable",
            "name": "Password",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Password Field', type: 'password' }, }"
          },
          {
            "kind": "variable",
            "name": "Date",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Date Field', type: 'date', value: '1969-06-28', }, }"
          },
          {
            "kind": "variable",
            "name": "MaxDate",
            "type": {
              "text": "object"
            },
            "default": "{ args: { type: 'date', label: 'Max date should not be 2025-01-01', max: '2025-01-01', value: '2024-01-01', }, }"
          },
          {
            "kind": "variable",
            "name": "Required",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Required Field', required: 'true', }, }"
          },
          {
            "kind": "variable",
            "name": "RequiredMaxlength",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Required Field with Max Length', maxlength: '10', required: 'true' }, }"
          },
          {
            "kind": "variable",
            "name": "Disabled",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Disabled Field', disabled: 'true', }, }"
          },
          {
            "kind": "variable",
            "name": "Readonly",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Readonly Field', readonly: 'true', value: 'value', }, }"
          },
          {
            "kind": "variable",
            "name": "Fieldnote",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Field with a Field Note', fieldNote: 'This is a field note.', }, }"
          },
          {
            "kind": "variable",
            "name": "Error",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Field with Error Message and Field Note', errorNote: 'Short, clear error message', isError: 'true', fieldNote: 'This is a field note.', }, }"
          },
          {
            "kind": "variable",
            "name": "Success",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Field with Success Message', isSuccess: 'true', fieldNote: 'This is a field note.', successNote: 'Short, clear success message', }, }"
          },
          {
            "kind": "variable",
            "name": "SingleMessage",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Field with Error Message', isError: 'true', errorNote: 'Short, clear error message', }, }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/field/field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/field/field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Email",
            "declaration": {
              "name": "Email",
              "module": "components/field/field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Number",
            "declaration": {
              "name": "Number",
              "module": "components/field/field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Url",
            "declaration": {
              "name": "Url",
              "module": "components/field/field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Tel",
            "declaration": {
              "name": "Tel",
              "module": "components/field/field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Password",
            "declaration": {
              "name": "Password",
              "module": "components/field/field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Date",
            "declaration": {
              "name": "Date",
              "module": "components/field/field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "MaxDate",
            "declaration": {
              "name": "MaxDate",
              "module": "components/field/field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Required",
            "declaration": {
              "name": "Required",
              "module": "components/field/field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "RequiredMaxlength",
            "declaration": {
              "name": "RequiredMaxlength",
              "module": "components/field/field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Disabled",
            "declaration": {
              "name": "Disabled",
              "module": "components/field/field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Readonly",
            "declaration": {
              "name": "Readonly",
              "module": "components/field/field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Fieldnote",
            "declaration": {
              "name": "Fieldnote",
              "module": "components/field/field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Error",
            "declaration": {
              "name": "Error",
              "module": "components/field/field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Success",
            "declaration": {
              "name": "Success",
              "module": "components/field/field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SingleMessage",
            "declaration": {
              "name": "SingleMessage",
              "module": "components/field/field.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/field/field.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The Field component renders a form group with label, control, help text and validation styling. There are\nconvenience variants of Field to support HTML5 input types and static content.",
            "name": "Cre8Field",
            "members": [
              {
                "kind": "field",
                "name": "autocomplete",
                "type": {
                  "text": "'on' | 'off' | 'name' | 'email' | 'username' | 'new-password' | 'current-password' | 'tel' | 'url' | 'address-line1' | 'address-line2' | 'country' | 'postal-code' | undefined"
                },
                "description": "Autocomplete attribute that allows input to expect certain types of information. Note: autocomplete is supported\nby most browsers, but the suggested 'completions' are also sourced from those browsers. Values come\nfrom past user stored data from past interactions in that browser, such as:\n\n 1. From past values entered by the user, but they may also come from pre-configured values. For\n instance, a browser might let the user save their name, address, phone number, and email addresses for\n autocomplete purposes.\n\n 2. Perhaps the browser offers the ability to save encrypted credit card information, for autocompletion\n following a an authentication procedure.\n See: [MDN web docs_](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\n\n NOTE:: In order to provide autocompletion, user-agents might require input, select, textarea\n elements to:\n\n 1. Have a {{name}} and/or {{id}} attribute\n 2. Be descendants of a form element\n 3. The form to have a [submit button](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/submit)",
                "attribute": "autocomplete"
              },
              {
                "kind": "field",
                "name": "pattern",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Pattern attribute defines a regular expression to validate against input",
                "attribute": "pattern"
              },
              {
                "kind": "field",
                "name": "type",
                "type": {
                  "text": "'text' | 'email' | 'number' | 'url' | 'tel' | 'password' | 'date'"
                },
                "default": "'text'",
                "description": "Type variants\n- **text** renders a standard text input\n- **email** renders a text input for an email format\n- **number** renders an input for number values only\n- **url** renders an input for urls only\n- **tel** renders an input for telephone number values only",
                "attribute": "type"
              },
              {
                "kind": "field",
                "name": "placeholder",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The placeholder text that appears inside the input",
                "attribute": "placeholder"
              },
              {
                "kind": "field",
                "name": "label",
                "type": {
                  "text": "string"
                },
                "default": "'Label'",
                "description": "The required label that appears above the input",
                "attribute": "label"
              },
              {
                "kind": "field",
                "name": "name",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The name property on the input",
                "attribute": "name"
              },
              {
                "kind": "field",
                "name": "fieldId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The unique id of the field\n<br/><br/> _*This property is dynamically set_",
                "attribute": "fieldId"
              },
              {
                "kind": "field",
                "name": "fieldNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The text that displays below in text field input",
                "attribute": "fieldNote"
              },
              {
                "kind": "field",
                "name": "ariaLive",
                "type": {
                  "text": "'polite' | 'assertive'"
                },
                "default": "'polite'",
                "description": "Controls how the voiceover will experience the new information when field note changes,\nimmediately (used for more urgently needed updates) using `assertive` or at the next convenient\npause in their navigation using `polite`.",
                "attribute": "ariaLive"
              },
              {
                "kind": "field",
                "name": "ariaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Used to connect the field note in text field to the text menu for accessibility",
                "attribute": "ariaDescribedBy"
              },
              {
                "kind": "field",
                "name": "required",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The required attribute on the input",
                "attribute": "required",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The disabled attribute on the input",
                "attribute": "disabled",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "isError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent an error state",
                "attribute": "isError",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "errorText",
                "type": {
                  "text": "string"
                },
                "default": "'Error'",
                "description": "Visually hidden text that always signifies that this is an error for screen reader usage",
                "attribute": "errorText"
              },
              {
                "kind": "field",
                "name": "errorNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The error field note that appears below the default field note",
                "attribute": "errorNote"
              },
              {
                "kind": "field",
                "name": "max",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The max attribute defines the maximum value that is acceptable and valid for the input containing the attribute.",
                "attribute": "max"
              },
              {
                "kind": "field",
                "name": "min",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The min attribute defines the minimum value that is acceptable and valid for the input containing the attribute.",
                "attribute": "min"
              },
              {
                "kind": "field",
                "name": "maxlength",
                "type": {
                  "text": "number | undefined"
                },
                "description": "The maxlength is an integer above 0 that indicates the maximum allowed characters to be entered. When using the\nmaxlength prop, you must also use the \"required\" prop to provide Constraint Validation on the input field.\nThis allows users to know why the input they attempted didn't render in the input field. see\n[MDN maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength#constraint_validation)",
                "attribute": "maxlength"
              },
              {
                "kind": "field",
                "name": "validationAriaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Additional aria-describedby connection to id for additional success and error notes to be accessible",
                "attribute": "validationAriaDescribedBy"
              },
              {
                "kind": "field",
                "name": "isSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent a success state",
                "attribute": "isSuccess",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "successText",
                "type": {
                  "text": "string"
                },
                "default": "'Success'",
                "description": "Visually hidden text that always signifies that this is successful for screen reader usage",
                "attribute": "successText"
              },
              {
                "kind": "field",
                "name": "readonly",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Readonly attribute",
                "attribute": "readonly",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "successNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The success field note that appears below the default field note",
                "attribute": "successNote"
              },
              {
                "kind": "field",
                "name": "field",
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              {
                "kind": "method",
                "name": "initializeAria",
                "description": "Initialize aria attributes"
              },
              {
                "kind": "method",
                "name": "fieldNoteAria",
                "description": "Aria describedby string based on field notes and error/success notes\n1) If both validationAriaDescribedBy (error/success note) and field note exists,\nrender both in the input's `aria-describedby` attribute\n2) Otherwise, if only validationAriaDescribedBy exists, then render only that as\nthe `aria-describedby` attribute (input without field note initially, but then error/success is added).\n3) Otherwise, render only the `ariaDescribedBy` property (field note only)"
              },
              {
                "kind": "method",
                "name": "_handleOnInput",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "Event"
                    }
                  }
                ],
                "description": "Handle On Input\n1) Set the input's value equal to the event.target.value when the input is changed.\n2) Set the internal form value of the input to the updated value"
              },
              {
                "kind": "method",
                "name": "renderSuccessErrorFieldNote",
                "description": "Render the success or error field notes\n1. If there is a successNote, then return the field note with the success message and state.\n2. If there is a errorNote, then return the field note with the error message and state."
              }
            ],
            "attributes": [
              {
                "name": "autocomplete",
                "type": {
                  "text": "'on' | 'off' | 'name' | 'email' | 'username' | 'new-password' | 'current-password' | 'tel' | 'url' | 'address-line1' | 'address-line2' | 'country' | 'postal-code' | undefined"
                },
                "description": "Autocomplete attribute that allows input to expect certain types of information. Note: autocomplete is supported\nby most browsers, but the suggested 'completions' are also sourced from those browsers. Values come\nfrom past user stored data from past interactions in that browser, such as:\n\n 1. From past values entered by the user, but they may also come from pre-configured values. For\n instance, a browser might let the user save their name, address, phone number, and email addresses for\n autocomplete purposes.\n\n 2. Perhaps the browser offers the ability to save encrypted credit card information, for autocompletion\n following a an authentication procedure.\n See: [MDN web docs_](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\n\n NOTE:: In order to provide autocompletion, user-agents might require input, select, textarea\n elements to:\n\n 1. Have a {{name}} and/or {{id}} attribute\n 2. Be descendants of a form element\n 3. The form to have a [submit button](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/submit)",
                "fieldName": "autocomplete",
                "attribute": "autocomplete"
              },
              {
                "name": "pattern",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Pattern attribute defines a regular expression to validate against input",
                "fieldName": "pattern",
                "attribute": "pattern"
              },
              {
                "name": "type",
                "type": {
                  "text": "'text' | 'email' | 'number' | 'url' | 'tel' | 'password' | 'date'"
                },
                "default": "'text'",
                "description": "Type variants\n- **text** renders a standard text input\n- **email** renders a text input for an email format\n- **number** renders an input for number values only\n- **url** renders an input for urls only\n- **tel** renders an input for telephone number values only",
                "fieldName": "type",
                "attribute": "type"
              },
              {
                "name": "placeholder",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The placeholder text that appears inside the input",
                "fieldName": "placeholder",
                "attribute": "placeholder"
              },
              {
                "name": "label",
                "type": {
                  "text": "string"
                },
                "default": "'Label'",
                "description": "The required label that appears above the input",
                "fieldName": "label",
                "attribute": "label"
              },
              {
                "name": "name",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The name property on the input",
                "fieldName": "name",
                "attribute": "name"
              },
              {
                "name": "fieldId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The unique id of the field\n<br/><br/> _*This property is dynamically set_",
                "fieldName": "fieldId",
                "attribute": "fieldId"
              },
              {
                "name": "fieldNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The text that displays below in text field input",
                "fieldName": "fieldNote",
                "attribute": "fieldNote"
              },
              {
                "name": "ariaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Used to connect the field note in text field to the text menu for accessibility",
                "fieldName": "ariaDescribedBy",
                "attribute": "ariaDescribedBy"
              },
              {
                "name": "required",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The required attribute on the input",
                "fieldName": "required",
                "attribute": "required"
              },
              {
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The disabled attribute on the input",
                "fieldName": "disabled",
                "attribute": "disabled"
              },
              {
                "name": "isError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent an error state",
                "fieldName": "isError",
                "attribute": "isError"
              },
              {
                "name": "errorText",
                "type": {
                  "text": "string"
                },
                "default": "'Error'",
                "description": "Visually hidden text that always signifies that this is an error for screen reader usage",
                "fieldName": "errorText",
                "attribute": "errorText"
              },
              {
                "name": "errorNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The error field note that appears below the default field note",
                "fieldName": "errorNote",
                "attribute": "errorNote"
              },
              {
                "name": "max",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The max attribute defines the maximum value that is acceptable and valid for the input containing the attribute.",
                "fieldName": "max",
                "attribute": "max"
              },
              {
                "name": "min",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The min attribute defines the minimum value that is acceptable and valid for the input containing the attribute.",
                "fieldName": "min",
                "attribute": "min"
              },
              {
                "name": "maxlength",
                "type": {
                  "text": "number | undefined"
                },
                "description": "The maxlength is an integer above 0 that indicates the maximum allowed characters to be entered. When using the\nmaxlength prop, you must also use the \"required\" prop to provide Constraint Validation on the input field.\nThis allows users to know why the input they attempted didn't render in the input field. see\n[MDN maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength#constraint_validation)",
                "fieldName": "maxlength",
                "attribute": "maxlength"
              },
              {
                "name": "validationAriaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Additional aria-describedby connection to id for additional success and error notes to be accessible",
                "fieldName": "validationAriaDescribedBy",
                "attribute": "validationAriaDescribedBy"
              },
              {
                "name": "isSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent a success state",
                "fieldName": "isSuccess",
                "attribute": "isSuccess"
              },
              {
                "name": "successText",
                "type": {
                  "text": "string"
                },
                "default": "'Success'",
                "description": "Visually hidden text that always signifies that this is successful for screen reader usage",
                "fieldName": "successText",
                "attribute": "successText"
              },
              {
                "name": "readonly",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Readonly attribute",
                "fieldName": "readonly",
                "attribute": "readonly"
              },
              {
                "name": "successNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The success field note that appears below the default field note",
                "fieldName": "successNote",
                "attribute": "successNote"
              },
              {
                "name": "ariaLive",
                "type": {
                  "text": "'polite' | 'assertive'"
                },
                "default": "'polite'",
                "description": "Controls how the voiceover will experience the new information when field note changes,\nimmediately (used for more urgently needed updates) using `assertive` or at the next convenient\npause in their navigation using `polite`.",
                "fieldName": "ariaLive"
              }
            ],
            "superclass": {
              "name": "Cre8FormElement",
              "module": "/components/cre8-form-element"
            },
            "tagName": "cre8-field",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Field",
            "declaration": {
              "name": "Cre8Field",
              "module": "components/field/field.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-field",
            "declaration": {
              "name": "Cre8Field",
              "module": "components/field/field.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Field",
              "module": "components/field/field.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/global-nav-item/global-nav-item.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #PRIMARY NAV ITEM /** * Actual primary nav list item */ /** * Content within the primary nav item */ .cre8-c-global-nav__item-content { display: flex; align-items: baseline; } /** * Primary navigation link * 1) Used to remove any sort of default button styles when a button tag is rendered */ .cre8-c-global-nav__link { @include cre8-typography-body-small; display: flex; align-items: center; appearance: none; /* 1 */ background: transparent; /* 1 */ border: none; //border: 1px solid var(--cre8-color-header-menu-border-default); /* 1 */ white-space: nowrap; width: 100%; margin: 0; padding: size(1) size(2); color: var(--cre8-global-nav-link-color, var(--cre8-color-content-subtle)); text-decoration: none; transition: all var(--cre8-anim-fade-quick) var(--cre8-anim-ease); cursor: pointer; &:hover, &:focus-visible { //border-color: var(--cre8-color-header-menu-border-hover); background: var(--cre8-color-header-menu-bg-hover); color: var(--cre8-color-header-menu-content-hover); } &:active { border-color: var(--cre8-color-header-menu-border-pressed); background: var(--cre8-color-header-menu-bg-pressed); color: var(--cre8-color-header-menu-content-pressed); } } /** * Icon within primary navigation item * 1) TODO: Figure out how to pass down size(1.5) instead of static rem value */ cre8-icon-legacy { --cre8-icon-height: #{size(1)}; /* 1 */ --cre8-icon-width: #{size(1)}; /* 1 */ margin-left: auto; transition: transform var(--cre8-anim-fade-quick) var(--cre8-anim-ease); /** * Icon within active primary nav item * 1) Rotate the icon to show that the dropdown is open */ .cre8-c-global-nav__item.cre8-is-active & { transform: rotate(-180deg); /* 1 */ } @media all and (min-width:$cre8-breakpoint-lg) { margin-left: size(1); } } .cre8-c-global-nav__item-after { --cre8-icon-height: #{size(1.5)}; --cre8-icon-width: #{size(1.5)}; margin-left: size(1); } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/global-nav-item/global-nav-item.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/global-nav-item/global-nav-item.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/global-nav-item/global-nav-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/global-nav-item/global-nav-item.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/global-nav-item/global-nav-item.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8GlobalNavItem",
            "slots": [
              {
                "description": "The label for the navigation item",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "text",
                "type": {
                  "text": "string"
                },
                "default": "'Nav item'",
                "description": "Primary nav item text",
                "attribute": "text"
              },
              {
                "kind": "field",
                "name": "href",
                "type": {
                  "text": "string"
                },
                "default": "'#'",
                "description": "Primary nav item href",
                "attribute": "href"
              },
              {
                "kind": "field",
                "name": "iconName",
                "type": {
                  "text": "string | undefined"
                },
                "default": "'keyboard-arrow-down'",
                "description": "Icon name",
                "attribute": "iconName"
              },
              {
                "kind": "field",
                "name": "megaMenu",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Append to the class name. Used for passing in utility classes",
                "attribute": "megaMenu",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "isActive",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Append to the class name. Used for passing in utility classes"
              },
              {
                "kind": "method",
                "name": "_handleOnClickOutside",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "event",
                    "type": {
                      "text": "MouseEvent"
                    }
                  }
                ],
                "description": "Handle click outside the component\n1) Close the show hide panel on click outside\n2) If the nav is already closed then we don't care about outside clicks and we\ncan bail early\n3) By the time a user clicks on the page the shadowRoot will almost certainly be\ndefined, but TypeScript isn't that trusting and sees this.shadowRoot as possibly\nundefined. To work around that we'll check that we have a shadowRoot (and a\nrendered .host) element here to appease the TypeScript compiler. This should never\nactually be shown or run for a human end user.\n4) Check to see if we clicked inside the active navigation item\n5) If the navigation is active and we've clicked outside of the nav then it should\nbe closed."
              },
              {
                "kind": "method",
                "name": "_clickHandler",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "MouseEvent"
                    }
                  }
                ],
                "description": "Toggle active state of primary nav item\n1) Remove isActive state from all sibling elements\n2) Toggle active state of element selected"
              },
              {
                "kind": "method",
                "name": "closePanel"
              },
              {
                "kind": "method",
                "name": "_handleOnKeyDown",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "KeyboardEvent"
                    }
                  }
                ]
              }
            ],
            "attributes": [
              {
                "name": "text",
                "type": {
                  "text": "string"
                },
                "default": "'Nav item'",
                "description": "Primary nav item text",
                "fieldName": "text"
              },
              {
                "name": "href",
                "type": {
                  "text": "string"
                },
                "default": "'#'",
                "description": "Primary nav item href",
                "fieldName": "href"
              },
              {
                "name": "iconName",
                "type": {
                  "text": "string | undefined"
                },
                "default": "'keyboard-arrow-down'",
                "description": "Icon name",
                "fieldName": "iconName"
              },
              {
                "name": "megaMenu",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Append to the class name. Used for passing in utility classes",
                "fieldName": "megaMenu"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-global-nav-item",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8GlobalNavItem",
            "declaration": {
              "name": "Cre8GlobalNavItem",
              "module": "components/global-nav-item/global-nav-item.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-global-nav-item",
            "declaration": {
              "name": "Cre8GlobalNavItem",
              "module": "components/global-nav-item/global-nav-item.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8GlobalNavItem",
              "module": "components/global-nav-item/global-nav-item.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/grid/grid.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #GRID /** * 1) Grid layout for items like cards, etc. */ .cre8-c-grid { display: flex; flex-direction: column; flex-wrap: wrap; margin: size(-1.5); } /** * Grid with no gap in between items */ .cre8-c-grid--gap-none { margin: 0; } /** * Small gap grid * 1) Spacing between grid items is smaller than default */ .cre8-c-grid--gap-sm { margin: size(-0.5); } /** * Large gap grid * 1) Spacing between grid items is larger than default */ .cre8-c-grid--gap-lg { margin: size(-2); } /** * Side by Side Grid * 1) Grid that stays 2 items per row on all screen sizes */ .cre8-c-grid--side-by-side { flex-direction: row; } /** * 2up grid * 1) Stacked items on small screens to 2 items per row on medium/large screens */ .cre8-c-grid--2up { @media all and (min-width:$cre8-breakpoint-md) { flex-direction: row; } /** * 2up grid that breaks faster * 1) Grid that breaks from 1 to 2up at a smaller viewport than the default */ &.cre8-c-grid--break-faster { @media all and (min-width:$cre8-breakpoint-sm) { flex-direction: row; } } /** * 2up grid that breaks slower * 1) Grid that breaks from 1 to 2up at a larger viewport than the default */ &.cre8-c-grid--break-slower { @media all and (min-width:$cre8-breakpoint-md) { flex-direction: column; } @media all and (min-width:$cre8-breakpoint-xxl) { flex-direction: row; } } } /** * 3up grid * 1) Stacked items on small screens to 3 items per row on medium/large screens */ .cre8-c-grid--3up { @media all and (min-width:$cre8-breakpoint-md) { flex-direction: row; } } /** * 1 to 3up grid * 1) Stacked items on small screens to 3 items per row on medium/large screens */ .cre8-c-grid--1-3up { @media all and (min-width:$cre8-breakpoint-lg) { flex-direction: row; } /** * 1 to 3 up grid that breaks faster * 1) Grid that breaks from 1 to 3up at a smaller viewport than the default */ &.cre8-c-grid--break-faster { @media all and (min-width:$cre8-breakpoint-md) { flex-direction: row; } } /** * 1 to 3up grid that breaks slower * 1) Grid that breaks from 1 to 3up at a larger viewport than the default */ &.cre8-c-grid--break-slower { @media all and (min-width:$cre8-breakpoint-lg) { flex-direction: column; } @media all and (min-width:$cre8-breakpoint-xl) { flex-direction: row; } } } /** * 1 to 2 to 4up grid * 1) Stacked items on small screens to 2 items per row on medium screens to 4 items per row on large screens */ .cre8-c-grid--1-2-4up { @media all and (min-width:$cre8-breakpoint-sm) { flex-direction: row; } } /** * 1 to 4up grid * 1) Stacked items on small screens to 4 items per row on medium/large screens */ .cre8-c-grid--1-4up { @media all and (min-width:$cre8-breakpoint-md) { flex-direction: row; } } /** * 1 to 2 to 4up grid * 1) Stacked items on small screens to 2 items per row on small/medium screens to * 3 items per row on medium screens and 4 items per row on large screens */ .cre8-c-grid--4up { @media all and (min-width:$cre8-breakpoint-sm) { flex-direction: row; } } /** * Slotted grid item within 4up Grid */ .cre8-c-grid--2-4-6up { flex-direction: row; } /** * Slotted grid item */ ::slotted(cre8-grid-item) { display: block; padding: size(1.5); /** * Slotted grid item within grid with no gap between items */ .cre8-c-grid--gap-none > & { padding: 0; } /** * Slotted grid item within grid with small gap between items */ .cre8-c-grid--gap-sm > & { padding: size(0.5); } /** * Slotted grid item within grid with large gap between items */ .cre8-c-grid--gap-lg > & { padding: size(2); } /** * Slotted grid item within side by side grid * 1) Grid that stays 2 items per row on all screen sizes */ .cre8-c-grid--side-by-side > & { width: 50%; } /** * Slotted grid item within 2up Grid */ .cre8-c-grid--2up > & { @media all and (min-width:$cre8-breakpoint-md) { width: 50%; } } /** * Slotted grid item within 2up break faster (small to large screens) Grid */ .cre8-c-grid--2up.cre8-c-grid--break-faster > & { @media all and (min-width:$cre8-breakpoint-sm) { width: 50%; } } /** * Slotted grid item within 2up break slower (small to large screens) Grid */ .cre8-c-grid--2up.cre8-c-grid--break-slower > & { @media all and (min-width:$cre8-breakpoint-md) { width: 100%; } @media all and (min-width:$cre8-breakpoint-xxl) { width: 50%; } } /** * Slotted grid item within 3up Grid */ .cre8-c-grid--3up > & { @media all and (min-width:$cre8-breakpoint-md) { width: 50%; } @media all and (min-width:$cre8-breakpoint-lg) { width: 33.3333%; } } /** * Slotted grid item within 1-3up Grid */ .cre8-c-grid--1-3up > & { @media all and (min-width:$cre8-breakpoint-lg) { width: 33.3333%; } } /** * Slotted grid item within 1 to 3up break faster (small to large screens) grid */ .cre8-c-grid--1-3up.cre8-c-grid--break-faster > & { @media all and (min-width:$cre8-breakpoint-md) { width: 33.33%; } } /** * Slotted grid item within 2up break slower (small to large screens) Grid */ .cre8-c-grid--1-3up.cre8-c-grid--break-slower > & { @media all and (min-width:$cre8-breakpoint-lg) { width: 100%; } @media all and (min-width:$cre8-breakpoint-xl) { width: 33.33%; } } /** * Slotted grid item within 1-2-4up Grid */ .cre8-c-grid--1-2-4up > & { @media all and (min-width:$cre8-breakpoint-sm) { width: 50%; } @media all and (min-width:$cre8-breakpoint-lg) { width: 25%; } } /** * Slotted grid item within 1-2-4up Grid */ .cre8-c-grid--1-4up > & { @media all and (min-width:$cre8-breakpoint-md) { width: 25%; } } /** * Slotted grid item within 4up Grid */ .cre8-c-grid--4up > & { @media all and (min-width:$cre8-breakpoint-sm) { width: 50%; } @media all and (min-width:$cre8-breakpoint-md) { width: 33.3333%; } @media all and (min-width:$cre8-breakpoint-lg) { width: 25%; } } /** * Slotted grid item within 4up Grid */ .cre8-c-grid--2-4-6up > & { width: 50%; @media all and (min-width:$cre8-breakpoint-lg) { width: 25%; } @media all and (min-width:$cre8-breakpoint-xl) { width: 16.66%; } } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/grid/grid.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/grid/grid.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "SideBySide"
          },
          {
            "kind": "function",
            "name": "TwoUp"
          },
          {
            "kind": "function",
            "name": "TwoUpBreakFaster"
          },
          {
            "kind": "function",
            "name": "TwoUpBreakSlower"
          },
          {
            "kind": "function",
            "name": "ThreeUp"
          },
          {
            "kind": "function",
            "name": "OneToThreeUp"
          },
          {
            "kind": "function",
            "name": "OneToThreeUpBreakFaster"
          },
          {
            "kind": "function",
            "name": "OneToThreeUpBreakSlower"
          },
          {
            "kind": "function",
            "name": "OneToFourUp"
          },
          {
            "kind": "function",
            "name": "OneToTwoToFourUp"
          },
          {
            "kind": "function",
            "name": "FourUp"
          },
          {
            "kind": "function",
            "name": "GapNoneFourUp"
          },
          {
            "kind": "function",
            "name": "GapSmallFourUp"
          },
          {
            "kind": "function",
            "name": "GapLargeFourUp"
          },
          {
            "kind": "function",
            "name": "TwoTo4to6Up"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/grid/grid.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/grid/grid.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SideBySide",
            "declaration": {
              "name": "SideBySide",
              "module": "components/grid/grid.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TwoUp",
            "declaration": {
              "name": "TwoUp",
              "module": "components/grid/grid.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TwoUpBreakFaster",
            "declaration": {
              "name": "TwoUpBreakFaster",
              "module": "components/grid/grid.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TwoUpBreakSlower",
            "declaration": {
              "name": "TwoUpBreakSlower",
              "module": "components/grid/grid.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "ThreeUp",
            "declaration": {
              "name": "ThreeUp",
              "module": "components/grid/grid.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "OneToThreeUp",
            "declaration": {
              "name": "OneToThreeUp",
              "module": "components/grid/grid.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "OneToThreeUpBreakFaster",
            "declaration": {
              "name": "OneToThreeUpBreakFaster",
              "module": "components/grid/grid.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "OneToThreeUpBreakSlower",
            "declaration": {
              "name": "OneToThreeUpBreakSlower",
              "module": "components/grid/grid.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "OneToFourUp",
            "declaration": {
              "name": "OneToFourUp",
              "module": "components/grid/grid.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "OneToTwoToFourUp",
            "declaration": {
              "name": "OneToTwoToFourUp",
              "module": "components/grid/grid.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "FourUp",
            "declaration": {
              "name": "FourUp",
              "module": "components/grid/grid.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "GapNoneFourUp",
            "declaration": {
              "name": "GapNoneFourUp",
              "module": "components/grid/grid.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "GapSmallFourUp",
            "declaration": {
              "name": "GapSmallFourUp",
              "module": "components/grid/grid.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "GapLargeFourUp",
            "declaration": {
              "name": "GapLargeFourUp",
              "module": "components/grid/grid.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TwoTo4to6Up",
            "declaration": {
              "name": "TwoTo4to6Up",
              "module": "components/grid/grid.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/grid/grid.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8Grid",
            "slots": [
              {
                "description": "The grid items",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "variant",
                "type": {
                  "text": "'side-by-side' | '2up' | '3up' | '1-3up' | '4up' | '1-4up' | '1-2-4up' | '2-4-6up' | undefined"
                },
                "description": "Style variant\n- **side-by-side** yields a grid whose grid items display side-by-side (2 per row) on all screen sizes\n- **2up** yields a grid whose grid items are stacked on small screens\n  but display side-by-side when enough screen real estate is available to do so\n- **3up** yields a grid whose grid items are stacked on small screens,\n  transforms to a 2-across pattern and then transforms again to a 3-across pattern\n- **1-3up** yields a grid whose grid items are stacked on small screens\n  and transforms to a 3-across pattern on larger screens\n- **4up** yields a grid whose grid items are stacked on small screens,\n  transforms to a 2-across pattern, transforms again to a 3-across pattern,\n  and ultimately transforms to a 4-across pattern\n- **1-2-4up** yields a grid whose grid items are stacked on small screens,\n  transforms to a 2-across pattern, and ultimately transforms to a 4-across pattern\n- **1-4up** yields a grid whose grid items are stacked on small screens,\n  transforms to a 4-across pattern on medium/large screens",
                "attribute": "variant"
              },
              {
                "kind": "field",
                "name": "gap",
                "type": {
                  "text": "'none' | 'sm' | 'lg' | undefined"
                },
                "description": "Style variant\n- **none** yields a grid whose grid items are spaced without any gutter in between\n- **sm** yields a grid whose grid items are spaced with a gap smaller than the default\n- **lg** yields a grid whose grid items are spaced with a gap larger than the default",
                "attribute": "gap"
              },
              {
                "kind": "field",
                "name": "break",
                "type": {
                  "text": "'faster' | 'slower' | undefined"
                },
                "description": "Break variant\n- **faster** breaks the grid at a smaller width than the default.\n  Example: 2up grid breaks to 2 per row at smaller width than default\n- **slower** breaks the grid at a larger width than the default.\n  Example: 2up grid breaks to 2 per row at larger width than default\n- **lg** yields a grid whose grid items are spaced with a gap larger than the default",
                "attribute": "break"
              }
            ],
            "attributes": [
              {
                "name": "variant",
                "type": {
                  "text": "'side-by-side' | '2up' | '3up' | '1-3up' | '4up' | '1-4up' | '1-2-4up' | '2-4-6up' | undefined"
                },
                "description": "Style variant\n- **side-by-side** yields a grid whose grid items display side-by-side (2 per row) on all screen sizes\n- **2up** yields a grid whose grid items are stacked on small screens\n  but display side-by-side when enough screen real estate is available to do so\n- **3up** yields a grid whose grid items are stacked on small screens,\n  transforms to a 2-across pattern and then transforms again to a 3-across pattern\n- **1-3up** yields a grid whose grid items are stacked on small screens\n  and transforms to a 3-across pattern on larger screens\n- **4up** yields a grid whose grid items are stacked on small screens,\n  transforms to a 2-across pattern, transforms again to a 3-across pattern,\n  and ultimately transforms to a 4-across pattern\n- **1-2-4up** yields a grid whose grid items are stacked on small screens,\n  transforms to a 2-across pattern, and ultimately transforms to a 4-across pattern\n- **1-4up** yields a grid whose grid items are stacked on small screens,\n  transforms to a 4-across pattern on medium/large screens",
                "fieldName": "variant"
              },
              {
                "name": "gap",
                "type": {
                  "text": "'none' | 'sm' | 'lg' | undefined"
                },
                "description": "Style variant\n- **none** yields a grid whose grid items are spaced without any gutter in between\n- **sm** yields a grid whose grid items are spaced with a gap smaller than the default\n- **lg** yields a grid whose grid items are spaced with a gap larger than the default",
                "fieldName": "gap"
              },
              {
                "name": "break",
                "type": {
                  "text": "'faster' | 'slower' | undefined"
                },
                "description": "Break variant\n- **faster** breaks the grid at a smaller width than the default.\n  Example: 2up grid breaks to 2 per row at smaller width than default\n- **slower** breaks the grid at a larger width than the default.\n  Example: 2up grid breaks to 2 per row at larger width than default\n- **lg** yields a grid whose grid items are spaced with a gap larger than the default",
                "fieldName": "break"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-grid",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Grid",
            "declaration": {
              "name": "Cre8Grid",
              "module": "components/grid/grid.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-grid",
            "declaration": {
              "name": "Cre8Grid",
              "module": "components/grid/grid.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Grid",
              "module": "components/grid/grid.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/header/header.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #HEADER /** * 1) Global header where the navigation, logo, and other content lives across the entire site */ .cre8-c-header { background: var(--cre8-header-background, var(--cre8-color-header-bg-default)); color: var(--cre8-color-content-default); position: relative; z-index: 3; } /** * Header top section * 1) Optional slot used for global navigation usually */ .cre8-c-header__top { position: relative; top: 0; width: 100%; z-index: 3; background: var(--cre8-header-top-background); } /** * Inner container of the header top section * 1) Used to cap the width of the content within the header */ .cre8-c-header__top-inner { display: flex; align-items: center; width: 100%; overflow: auto; } /** * Header middle section * 1) Section of the site used for the logo and primary navigation */ .cre8-c-header__middle { width: 100%; box-shadow: var(--cre8-theme-box-shadow-md); border-bottom: var(--cre8-header-middle-border-bottom-color); } /** * Inner container of the header middle section * 1) Used to cap the width of the content within the header */ .cre8-c-header__middle-inner { display: flex; align-items: center; width: 100%; padding-top: size(2); padding-bottom: size(2); } .cre8-c-header__bottom { background: var(--cre8-header-bottom-background); box-shadow: var(--cre8-header-bottom-box-shadow); } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/header/header.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/header/header.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/header/header.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/header/header.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/header/header.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8Header",
            "slots": [
              {
                "description": "The header content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "isActive",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Is active state\n1) Set to true when small screen menu is open"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-header",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Header",
            "declaration": {
              "name": "Cre8Header",
              "module": "components/header/header.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-header",
            "declaration": {
              "name": "Cre8Header",
              "module": "components/header/header.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Header",
              "module": "components/header/header.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/heading/heading.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; :host { display: inline; text-align: left; } /** * DefaultHeading component styling/Heading title-large */ .cre8-c-heading, .cre8-c-heading--title-large { @include cre8-typography-title-large; margin: 0; color: var(--cre8-color-content-default); } /** * Heading with theme headline-large preset applied */ .cre8-c-heading--headline-large { @include cre8-typography-headline-large; } /** * Heading with theme headline-default preset applied */ .cre8-c-heading--headline-default { @include cre8-typography-headline-default; } /** * Heading with theme headline-small preset applied */ .cre8-c-heading--headline-small { @include cre8-typography-headline-small; } /** * Heading with theme title-xlarge preset applied */ .cre8-c-heading--title-xlarge { @include cre8-typography-title-xlarge; } /** * Heading with theme title-large preset applied */ .cre8-c-heading--title-large { @include cre8-typography-title-large; } /** * Heading with theme title-default preset applied */ .cre8-c-heading--title-default { @include cre8-typography-title-default; } /** * Heading with theme title-small preset applied */ .cre8-c-heading--title-small { @include cre8-typography-title-small; } /** * Heading with theme display-small preset applied */ .cre8-c-heading--display-small { @include cre8-typography-display-small; } /** * Heading with theme display-default preset applied */ .cre8-c-heading--display-default { @include cre8-typography-display-default; } /** * Heading with theme label-large preset applied */ .cre8-c-heading--label-large { @include cre8-typography-label-large; } /** * Heading with theme label-default preset applied */ .cre8-c-heading--label-default { @include cre8-typography-label-default; } /** * Heading with theme label-small preset applied */ .cre8-c-heading--label-small { @include cre8-typography-label-small; } /** * Heading with theme meta-default preset applied */ .cre8-c-heading--meta-large { @include cre8-typography-meta-large; text-transform: uppercase; } /** * Heading with theme meta-default preset applied */ .cre8-c-heading--meta-default { @include cre8-typography-meta-default; text-transform: uppercase; } /** * Heading with theme meta-small preset applied */ .cre8-c-heading--meta-small { @include cre8-typography-meta-small; text-transform: uppercase; } /** * Heading with brand color applied */ .cre8-c-heading--brand-color { color: var(--cre8-color-content-brand-strong); &.cre8-c-heading--inverted { color: var(--cre8-color-content-brand-knockout); } } .cre8-c-heading--inverted { color: var(--cre8-color-content-knockout); } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/heading/heading.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/heading/heading.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{}"
          },
          {
            "kind": "variable",
            "name": "DisplayDefault",
            "type": {
              "text": "object"
            },
            "default": "{ args: { type: 'display-default', } }"
          },
          {
            "kind": "variable",
            "name": "DisplaySmall",
            "type": {
              "text": "object"
            },
            "default": "{ args: { type: 'display-small', } }"
          },
          {
            "kind": "variable",
            "name": "HeadlineLarge",
            "type": {
              "text": "object"
            },
            "default": "{ args: { type: 'headline-large', } }"
          },
          {
            "kind": "variable",
            "name": "HeadlineDefault",
            "type": {
              "text": "object"
            },
            "default": "{ args: { type: 'headline-default', } }"
          },
          {
            "kind": "variable",
            "name": "HeadlineSmall",
            "type": {
              "text": "object"
            },
            "default": "{ args: { type: 'headline-small', } }"
          },
          {
            "kind": "variable",
            "name": "TitleXLarge",
            "type": {
              "text": "object"
            },
            "default": "{ args: { type: 'title-xlarge', } }"
          },
          {
            "kind": "variable",
            "name": "TitleLarge",
            "type": {
              "text": "object"
            },
            "default": "{ args: { type: 'title-large', } }"
          },
          {
            "kind": "variable",
            "name": "TitleDefault",
            "type": {
              "text": "object"
            },
            "default": "{ args: { type: 'title-default', } }"
          },
          {
            "kind": "variable",
            "name": "TitleSmall",
            "type": {
              "text": "object"
            },
            "default": "{ args: { type: 'title-small', } }"
          },
          {
            "kind": "variable",
            "name": "LabelLarge",
            "type": {
              "text": "object"
            },
            "default": "{ args: { type: 'label-large', } }"
          },
          {
            "kind": "variable",
            "name": "LabelDefault",
            "type": {
              "text": "object"
            },
            "default": "{ args: { type: 'label-default', } }"
          },
          {
            "kind": "variable",
            "name": "LabelSmall",
            "type": {
              "text": "object"
            },
            "default": "{ args: { type: 'label-small', } }"
          },
          {
            "kind": "variable",
            "name": "MetaLarge",
            "type": {
              "text": "object"
            },
            "default": "{ args: { type: 'meta-large', } }"
          },
          {
            "kind": "variable",
            "name": "MetaDefault",
            "type": {
              "text": "object"
            },
            "default": "{ args: { type: 'meta-default', } }"
          },
          {
            "kind": "variable",
            "name": "MetaSmall",
            "type": {
              "text": "object"
            },
            "default": "{ args: { type: 'meta-small', } }"
          },
          {
            "kind": "variable",
            "name": "h1",
            "type": {
              "text": "object"
            },
            "default": "{ args: { tagVariant: 'h1', } }"
          },
          {
            "kind": "variable",
            "name": "h2",
            "type": {
              "text": "object"
            },
            "default": "{ args: { tagVariant: 'h2', } }"
          },
          {
            "kind": "variable",
            "name": "h3",
            "type": {
              "text": "object"
            },
            "default": "{ args: { tagVariant: 'h3', } }"
          },
          {
            "kind": "variable",
            "name": "h4",
            "type": {
              "text": "object"
            },
            "default": "{ args: { tagVariant: 'h4', } }"
          },
          {
            "kind": "variable",
            "name": "h5",
            "type": {
              "text": "object"
            },
            "default": "{ args: { tagVariant: 'h5', } }"
          },
          {
            "kind": "variable",
            "name": "h6",
            "type": {
              "text": "object"
            },
            "default": "{ args: { tagVariant: 'h6', } }"
          },
          {
            "kind": "variable",
            "name": "BrandColor",
            "type": {
              "text": "object"
            },
            "default": "{ args: { brandColor: true, } }"
          },
          {
            "kind": "variable",
            "name": "Inverted",
            "type": {
              "text": "object"
            },
            "default": "{ render: (args) => html`<div style=\"padding: 20px; background: #000;\"> <cre8-heading ${spread(args)} ?inverted=${true}>Heading style for dark backgrounds</cre8-heading> </div>`, }"
          },
          {
            "kind": "variable",
            "name": "InvertedBrandColor",
            "type": {
              "text": "object"
            },
            "default": "{ render: (args) => html`<div style=\"padding: 20px; background: #000;\"> <cre8-heading ${spread(args)} ?brandColor=${true} ?inverted=${true}>Heading with brand color for dark backgrounds</cre8-heading> </div>`, }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "DisplayDefault",
            "declaration": {
              "name": "DisplayDefault",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "DisplaySmall",
            "declaration": {
              "name": "DisplaySmall",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "HeadlineLarge",
            "declaration": {
              "name": "HeadlineLarge",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "HeadlineDefault",
            "declaration": {
              "name": "HeadlineDefault",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "HeadlineSmall",
            "declaration": {
              "name": "HeadlineSmall",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TitleXLarge",
            "declaration": {
              "name": "TitleXLarge",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TitleLarge",
            "declaration": {
              "name": "TitleLarge",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TitleDefault",
            "declaration": {
              "name": "TitleDefault",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TitleSmall",
            "declaration": {
              "name": "TitleSmall",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "LabelLarge",
            "declaration": {
              "name": "LabelLarge",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "LabelDefault",
            "declaration": {
              "name": "LabelDefault",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "LabelSmall",
            "declaration": {
              "name": "LabelSmall",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "MetaLarge",
            "declaration": {
              "name": "MetaLarge",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "MetaDefault",
            "declaration": {
              "name": "MetaDefault",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "MetaSmall",
            "declaration": {
              "name": "MetaSmall",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "h1",
            "declaration": {
              "name": "h1",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "h2",
            "declaration": {
              "name": "h2",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "h3",
            "declaration": {
              "name": "h3",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "h4",
            "declaration": {
              "name": "h4",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "h5",
            "declaration": {
              "name": "h5",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "h6",
            "declaration": {
              "name": "h6",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "BrandColor",
            "declaration": {
              "name": "BrandColor",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Inverted",
            "declaration": {
              "name": "Inverted",
              "module": "components/heading/heading.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "InvertedBrandColor",
            "declaration": {
              "name": "InvertedBrandColor",
              "module": "components/heading/heading.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/heading/heading.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "HTML headings are titles or subtitles that you want to display on a webpage. The H1 is the most important and H6\nis the least important in the content hierarchy.\n\n# How to Use\n1. The cre8-heading tag wraps around one of the six native HTML \"h\" tags, depending on your chosen variation.\n2. There are two main use cases for using this component:\n  text passage headings and Components with a title (i.e. modal, card or alert)\n3. There will be instances when the design requires the heading text to have the brand color applied\n  in which case you should set the [brandColor](?path=/story/cre8-components-heading--brand-color)\n  attribute to true on the cre8-heading tag.\n4. For dark backgrounds, add the [inverted](?path=/story/cre8-components-heading--inverted)\n  attribute to the tag for white text.",
            "name": "Cre8Heading",
            "slots": [
              {
                "description": "The heading text content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "type",
                "type": {
                  "text": "| 'display-default'\n        | 'display-small'\n        | 'headline-large'\n        | 'headline-default'\n        | 'headline-small'\n        | 'title-xlarge'\n        | 'title-large'\n        | 'title-default'\n        | 'title-small'\n        | 'label-large'\n        | 'label-default'\n        | 'label-small'\n        | 'meta-large'\n        | 'meta-default'\n        | 'meta-small' | undefined"
                },
                "description": "Heading type\n<cre8-text-passage size=\"small\">\n<ul>\n<li>**display-default** renders a heading with the heading display-default preset treatment</li>\n<li>**display-small** renders a heading with the heading display-small preset treatment</li>\n<li>**headline-large** renders a heading with the heading headline-large preset treatment</li>\n<li>**headline-default** renders a heading with the heading headline-default preset treatment</li>\n<li>**headline-small** renders a heading with the heading headline-small preset treatment</li>\n<li>**title-xlarge** renders a heading with the heading title-xlarge preset treatment</li>\n<li>**title-large** renders a heading with the heading title-large preset treatment</li>\n<li>**title-default** renders a heading with the heading title-default preset treatment</li>\n<li>**title-small** renders a heading with the heading title-small preset treatment</li>\n<li>**label-large** renders a heading with the label-large preset treatment</li>\n<li>**label** renders a heading with the label preset treatment</li>\n<li>**label-small** renders a heading with the label-small preset treatment</li>\n<li>**meta-large** renders a heading with the meta-large preset treatment</li>\n<li>**meta-default** renders a heading with the meta-default preset treatment</li>\n<li>**meta-small** renders a heading with the meta-small preset treatment</li>\n</ul>\n</cre8-text-passage>",
                "attribute": "type"
              },
              {
                "kind": "field",
                "name": "tagVariant",
                "type": {
                  "text": "'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'"
                },
                "default": "'h5'",
                "description": "Dynamic tag name for the component\n1) This is needed to use proper semantic heading treatments depending on where the banner lives on the page\n<cre8-text-passage size=\"small\">\n<ul>\n<li>**h1** renders an `h1` tag</li>\n<li>**h2** renders an `h2` tag. This is the default</li>\n<li>**h3** renders an `h3` tag</li>\n<li>**h4** renders an `h4` tag</li>\n<li>**h5** renders an `h5` tag</li>\n<li>**h6** renders an `h6` tag</li>\n</ul>\n</cre8-text-passage>",
                "attribute": "tagVariant"
              },
              {
                "kind": "field",
                "name": "inverted",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Invert the color of the font from dark to light. An inverted `heading` should be used on a dark background.",
                "attribute": "inverted",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "brandColor",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Apply the brand color to the heading text.",
                "attribute": "brandColor",
                "reflects": true
              }
            ],
            "attributes": [
              {
                "name": "tagVariant",
                "type": {
                  "text": "'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'"
                },
                "default": "'h5'",
                "description": "Dynamic tag name for the component\n1) This is needed to use proper semantic heading treatments depending on where the banner lives on the page\n<cre8-text-passage size=\"small\">\n<ul>\n<li>**h1** renders an `h1` tag</li>\n<li>**h2** renders an `h2` tag. This is the default</li>\n<li>**h3** renders an `h3` tag</li>\n<li>**h4** renders an `h4` tag</li>\n<li>**h5** renders an `h5` tag</li>\n<li>**h6** renders an `h6` tag</li>\n</ul>\n</cre8-text-passage>",
                "fieldName": "tagVariant",
                "attribute": "tagVariant"
              },
              {
                "name": "inverted",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Invert the color of the font from dark to light. An inverted `heading` should be used on a dark background.",
                "fieldName": "inverted",
                "attribute": "inverted"
              },
              {
                "name": "brandColor",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Apply the brand color to the heading text.",
                "fieldName": "brandColor",
                "attribute": "brandColor"
              },
              {
                "name": "type",
                "type": {
                  "text": "| 'display-default'\n        | 'display-small'\n        | 'headline-large'\n        | 'headline-default'\n        | 'headline-small'\n        | 'title-xlarge'\n        | 'title-large'\n        | 'title-default'\n        | 'title-small'\n        | 'label-large'\n        | 'label-default'\n        | 'label-small'\n        | 'meta-large'\n        | 'meta-default'\n        | 'meta-small' | undefined"
                },
                "description": "Heading type\n<cre8-text-passage size=\"small\">\n<ul>\n<li>**display-default** renders a heading with the heading display-default preset treatment</li>\n<li>**display-small** renders a heading with the heading display-small preset treatment</li>\n<li>**headline-large** renders a heading with the heading headline-large preset treatment</li>\n<li>**headline-default** renders a heading with the heading headline-default preset treatment</li>\n<li>**headline-small** renders a heading with the heading headline-small preset treatment</li>\n<li>**title-xlarge** renders a heading with the heading title-xlarge preset treatment</li>\n<li>**title-large** renders a heading with the heading title-large preset treatment</li>\n<li>**title-default** renders a heading with the heading title-default preset treatment</li>\n<li>**title-small** renders a heading with the heading title-small preset treatment</li>\n<li>**label-large** renders a heading with the label-large preset treatment</li>\n<li>**label** renders a heading with the label preset treatment</li>\n<li>**label-small** renders a heading with the label-small preset treatment</li>\n<li>**meta-large** renders a heading with the meta-large preset treatment</li>\n<li>**meta-default** renders a heading with the meta-default preset treatment</li>\n<li>**meta-small** renders a heading with the meta-small preset treatment</li>\n</ul>\n</cre8-text-passage>",
                "fieldName": "type"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-heading",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Heading",
            "declaration": {
              "name": "Cre8Heading",
              "module": "components/heading/heading.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-heading",
            "declaration": {
              "name": "Cre8Heading",
              "module": "components/heading/heading.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Heading",
              "module": "components/heading/heading.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/grid-item/grid-item.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * 1) Item used for the various items within the grid */ .cre8-c-grid__item { height: 100%; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/grid-item/grid-item.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/grid-item/grid-item.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8GridItem",
            "slots": [
              {
                "description": "The content of the grid item",
                "name": ""
              }
            ],
            "members": [],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-grid-item",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8GridItem",
            "declaration": {
              "name": "Cre8GridItem",
              "module": "components/grid-item/grid-item.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-grid-item",
            "declaration": {
              "name": "Cre8GridItem",
              "module": "components/grid-item/grid-item.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8GridItem",
              "module": "components/grid-item/grid-item.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/icon/icon.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * 1) Graphic used to supplement text or represent functionality */ :host{ display: flex; --cre8-u-icon-display: block; }; .cre8-c-icon-wrapper { align-items: var(--cre8-u-icon-align-items); justify-content: var(--cre8-u-icon-justify-content); animation: var(--cre8-loading-animation, --cre8-icon-animation, none); margin: var(--cre8-icon-margin, 0); } .cre8-c-icon { height: var(--cre8-icon-height, size(2)); width: var(--cre8-icon-width, size(2)); fill: var(--cre8-icon-fill, currentColor); } // stylelint-disable selector-no-qualifying-type, max-nesting-depth cre8-icon { display: inline-flex; vertical-align: middle; &[spin] { @media (prefers-reduced-motion) { &:not([spin='false']) { // stylelint-disable-next-line declaration-no-important animation-duration: 6400ms !important; } } &:not([spin='false']) { animation-duration: 2000ms; animation-iteration-count: infinite; animation-name: spin; animation-timing-function: linear; } } &[pulse] { @media (prefers-reduced-motion) { &:not([pulse='false']) { svg { * { // stylelint-disable-next-line declaration-no-important animation-duration: 3s !important; animation-timing-function: linear; } } } } &:not([pulse='false']) { svg { * { animation: pulse 1.5s ease-in-out infinite; } } } } &[flip='vertical'] { transform: scaleY(-1); } &[flip='horizontal'] { transform: scaleX(-1); } &[flip='both'] { transform: scaleX(-1) scaleY(-1); } } @keyframes spin { from { transform: rotate(0deg); } to { transform: rotate(360deg); } } @keyframes pulse { 0% { opacity: 1; } 50% { opacity: 0.5; } 100% { opacity: 1; } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/icon/icon.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/icon/icon.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/icon/icon.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/icon/icon.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/icon/icon.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "\n<svg> is a web component, which can be used with any frontend framework and use any svg.\nIt takes raw svgs as props and renders them.\n\n**'svg-legacy'** will be **deprecated** in Web Components v0.5.0\n\n- [List of new figma icons](https:/www.figma.com/file/j1a0rBkoH65XiGKfq7ppWa/Iconography?type=design&node-id=2037-5773&mode=design&t=6ZzC6KH3Gkxf3fj5-4)\n- The new `svg` from the svg package: https:/static-dev.esi-memberweb-dev.aws.evernorthcloud.com/svgs/.\n\n##Usability Considerations\n- If the icon is decorative: set `aria-hidden` to true.\n- If the icon is interactive (not decorative): set `aria-hidden` to false and add the `aria-label`\n- If the icon is key to functionality from a screen reader perspective, it is required to add `aria-label`\nwhich will describe the icon.\nFor example, if the icon is a close button, setting `aria-label=\"Close\"`will give\nthe SVG an aria-label to make it sufficiently accessible.\n\n[More information on Accessibility with svgs](https:/static-dev.esi-memberweb-dev.aws.evernorthcloud.com/svgs/?path=/story/getting-started-accessibility--page)\n\n##How to use\nCre8 Web Components (cre8-wc) includes the `cre8_dev/svgs` package.\nIf you need to install a newer version than what's included, please see\nthe [installation instructions for svgs](https:/git.express-scripts.com/ExpressScripts/svgs#installation).\n- Import the component (this is the icon container): `import '@cre8_dev/svgs';`\n- Import an svg as a string: `import svgInfo from 'cre8_dev/svgs/lib/icons/System/Regular/Info.svg?raw';`\n\nYour import paths may be different depending on your project's build configuration.\nPlease see [Importing Icons](https:/static-dev.esi-memberweb-dev.aws.evernorthcloud.com/svgs/?path=/story/icon-sets-importing-icons--page)\nof the `cre8_dev/svgs` documentation for more information.",
            "name": "Cre8Icon",
            "members": [
              {
                "kind": "field",
                "name": "focusable",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Focusable",
                "attribute": "focusable",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "name",
                "type": {
                  "text": "string"
                },
                "description": "Icon name (this method of passing in svgs is to be deprecated)",
                "attribute": "name"
              },
              {
                "kind": "field",
                "name": "svg",
                "type": {
                  "text": "string | undefined"
                },
                "attribute": "svg",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "iconUrl",
                "type": {
                  "text": "string | undefined"
                },
                "default": "iconSprite",
                "description": "Icon path\n1) This points to the file where the icon sprite lives\n2) This method of pathing will soon be depricated",
                "attribute": "iconUrl"
              },
              {
                "kind": "field",
                "name": "iconTitle",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Icon Title, this string is used for the aira-label of the svg",
                "attribute": "iconTitle"
              },
              {
                "kind": "method",
                "name": "getIconPath",
                "description": "Get the path to the icons, either by overriding it on the window\nor by using the bundled icon path"
              }
            ],
            "attributes": [
              {
                "name": "focusable",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Focusable",
                "fieldName": "focusable"
              },
              {
                "name": "name",
                "type": {
                  "text": "string"
                },
                "description": "Icon name (this method of passing in svgs is to be deprecated)",
                "fieldName": "name"
              },
              {
                "name": "svg",
                "type": {
                  "text": "string | undefined"
                },
                "fieldName": "svg"
              },
              {
                "name": "iconUrl",
                "type": {
                  "text": "string | undefined"
                },
                "default": "iconSprite",
                "description": "Icon path\n1) This points to the file where the icon sprite lives\n2) This method of pathing will soon be depricated",
                "fieldName": "iconUrl"
              },
              {
                "name": "iconTitle",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Icon Title, this string is used for the aira-label of the svg",
                "fieldName": "iconTitle"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-icon",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Icon",
            "declaration": {
              "name": "Cre8Icon",
              "module": "components/icon/icon.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-icon",
            "declaration": {
              "name": "Cre8Icon",
              "module": "components/icon/icon.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Icon",
              "module": "components/icon/icon.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/layout/layout.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #LAYOUT /** * 1) Layout wrapper that houses layout section Components to create a layouts like * sidebar layouts that are 1 row across and not a grid */ .cre8-c-layout { display: grid; flex: 1; gap: size(2); grid-template-columns: minmax(0, 1fr); @media all and (min-width:$cre8-breakpoint-lg) { gap: size(4); grid-template-columns: minmax(0, 1fr) calc(var(--cre8-sidebar-width, 40%) - (size(1))); /* 2 */ } } /** * Left sidebar layout * 1) Layout that is stacked on small screens and turns into a left sidebar with main * content to the right * 2) The main column stretches the full width minus the sidebar width and gap. * The sidebar column has a minimum width value (enough to accommodate navigation * and other sidebar content) but stretches to fit the content placed inside it. */ .cre8-c-layout--left-sidebar { @media all and (min-width:$cre8-breakpoint-lg) { grid-template-columns: calc(var(--cre8-sidebar-width, 40%) - (size(1))) minmax(0, 1fr); /* 2 */ } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/layout/layout.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/layout/layout.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "LeftSidebar"
          },
          {
            "kind": "function",
            "name": "RightSidebar"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/layout/layout.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/layout/layout.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "LeftSidebar",
            "declaration": {
              "name": "LeftSidebar",
              "module": "components/layout/layout.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "RightSidebar",
            "declaration": {
              "name": "RightSidebar",
              "module": "components/layout/layout.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/layout/layout.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8Layout",
            "slots": [
              {
                "description": "The layout content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "variant",
                "type": {
                  "text": "'left-sidebar' | undefined"
                },
                "description": "Style variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>Default is a right sidebar</li>\n<li>**left-sidebar** formats the first `layout-section` component as a left sidebar</li>\n</ul>\n</cre8-text-passage>",
                "attribute": "variant"
              }
            ],
            "attributes": [
              {
                "name": "variant",
                "type": {
                  "text": "'left-sidebar' | undefined"
                },
                "description": "Style variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>Default is a right sidebar</li>\n<li>**left-sidebar** formats the first `layout-section` component as a left sidebar</li>\n</ul>\n</cre8-text-passage>",
                "fieldName": "variant"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-layout",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Layout",
            "declaration": {
              "name": "Cre8Layout",
              "module": "components/layout/layout.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-layout",
            "declaration": {
              "name": "Cre8Layout",
              "module": "components/layout/layout.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Layout",
              "module": "components/layout/layout.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/layout-container/layout-container.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #LAYOUT CONTAINER /** * Layout Container * 1) Caps the width of the content to the maximum width * and centers the container */ .cre8-l-layout-container { width: 100%; max-width: var(--cre8-l-max-width); padding-right: size(2); padding-left: size(2); margin: 0 auto; } .cre8-l-layout-container--full-height { display: flex; flex-direction: column; flex: 1; height: 100%; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/layout-container/layout-container.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/layout-container/layout-container.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/layout-container/layout-container.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/layout-container/layout-container.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/layout-container/layout-container.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8LayoutContainer",
            "slots": [
              {
                "description": "The contents of the layout container",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "fullHeight",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Full height variant\n1) Sets the height to 100%",
                "attribute": "fullHeight",
                "reflects": true
              }
            ],
            "attributes": [
              {
                "name": "fullHeight",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Full height variant\n1) Sets the height to 100%",
                "fieldName": "fullHeight"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-layout-container",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8LayoutContainer",
            "declaration": {
              "name": "Cre8LayoutContainer",
              "module": "components/layout-container/layout-container.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-layout-container",
            "declaration": {
              "name": "Cre8LayoutContainer",
              "module": "components/layout-container/layout-container.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8LayoutContainer",
              "module": "components/layout-container/layout-container.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/hero/hero.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #HERO /** * 1) Block with an image and overlay on medium and large screens */ .cre8-c-hero { position: relative; margin-bottom: size(4); @media all and (min-width:$cre8-breakpoint-md) { height: 40vh; } } /** * Hero image */ .cre8-c-hero__image { width: 100%; height: 100%; @media all and (min-width:$cre8-breakpoint-md) { position: absolute; top: 0; left: 0; object-fit: cover; } } /** * Hero body * 1) Content is placed in the bottom left part of the image on medium/large screens by default */ .cre8-c-hero__body { display: flex; flex-direction: column; padding-top: size(2); @media all and (min-width:$cre8-breakpoint-md) { position: absolute; align-items: flex-start; justify-content: flex-end; width: 100%; height: 100%; padding-top: size(4); padding-bottom: size(4); } /** * Hero body within align top left variant * 1) Place body content in the top left part of the image on medium/large screens */ .cre8-c-hero--top-left & { @media all and (min-width:$cre8-breakpoint-md) { justify-content: flex-start; align-items: flex-start; } } /** * Hero body within align left variant * 1) Place body content along left part of the image and vertically centered on medium/large screens */ .cre8-c-hero--left & { @media all and (min-width:$cre8-breakpoint-md) { justify-content: center; } } /** * Hero body within align top center variant * 1) Place body content in the top center part of the image on medium/large screens */ .cre8-c-hero--top-center & { @media all and (min-width:$cre8-breakpoint-md) { justify-content: flex-start; align-items: center; } } /** * Hero body within align center variant * 1) Place body content horizontally and vertically centered overlaying the image on medium/large screens */ .cre8-c-hero--center & { @media all and (min-width:$cre8-breakpoint-md) { justify-content: center; align-items: center; } } /** * Hero body within align bottom center variant * 1) Place body content in the bottom center part of the image on medium/large screens */ .cre8-c-hero--bottom-center & { @media all and (min-width:$cre8-breakpoint-md) { justify-content: flex-end; align-items: center; } } .cre8-c-hero--top-right & { @media all and (min-width:$cre8-breakpoint-md) { justify-content: flex-start; align-items: flex-end; } } /** * Hero body within align right variant * 1) Place body content along right part of the image and vertically centered on medium/large screens */ .cre8-c-hero--right & { @media all and (min-width:$cre8-breakpoint-md) { justify-content: center; align-items: flex-end; } } /** * Hero body within align bottom right variant * 1) Place body content in the bottom right part of the image on medium/large screens */ .cre8-c-hero--bottom-right & { @media all and (min-width:$cre8-breakpoint-md) { justify-content: flex-end; align-items: flex-end; } } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/hero/hero.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/hero/hero.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "AlignTopLeft",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "AlignLeft",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "AlignTopCenter",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "AlignCenter",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "AlignBottomCenter",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "AlignTopRight",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "AlignRight",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "AlignBottomRight",
            "parameters": [
              {
                "name": "args"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/hero/hero.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/hero/hero.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "AlignTopLeft",
            "declaration": {
              "name": "AlignTopLeft",
              "module": "components/hero/hero.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "AlignLeft",
            "declaration": {
              "name": "AlignLeft",
              "module": "components/hero/hero.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "AlignTopCenter",
            "declaration": {
              "name": "AlignTopCenter",
              "module": "components/hero/hero.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "AlignCenter",
            "declaration": {
              "name": "AlignCenter",
              "module": "components/hero/hero.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "AlignBottomCenter",
            "declaration": {
              "name": "AlignBottomCenter",
              "module": "components/hero/hero.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "AlignTopRight",
            "declaration": {
              "name": "AlignTopRight",
              "module": "components/hero/hero.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "AlignRight",
            "declaration": {
              "name": "AlignRight",
              "module": "components/hero/hero.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "AlignBottomRight",
            "declaration": {
              "name": "AlignBottomRight",
              "module": "components/hero/hero.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/hero/hero.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8Hero",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "imgSrc",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Image source",
                "attribute": "imgSrc"
              },
              {
                "kind": "field",
                "name": "imgAlt",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Image alt text",
                "attribute": "imgAlt"
              },
              {
                "kind": "field",
                "name": "align",
                "type": {
                  "text": "'top-left' | 'left' | 'top-center' | 'center' | 'bottom-center' | 'top-right' | 'right' | 'bottom-right' | undefined"
                },
                "description": "Position variant. Bottom left is the default position\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**top-left** renders content in the top left corner of the image</li>\n<li>**left** renders content in the left, center part of the image</li>\n<li>**top-center** renders content in the top, center part of the image</li>\n<li>**center** renders content center of the image</li>\n<li>**bottom-center** renders content bottom center of the image</li>\n<li>**top-right** renders content top-right of the image</li>\n<li>**right** renders content right of the image</li>\n<li>**bottom-right** renders content bottom, right part of the image</li>\n</ul>\n</cre8-text-passage>",
                "attribute": "align"
              }
            ],
            "attributes": [
              {
                "name": "imgSrc",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Image source",
                "fieldName": "imgSrc"
              },
              {
                "name": "imgAlt",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Image alt text",
                "fieldName": "imgAlt"
              },
              {
                "name": "align",
                "type": {
                  "text": "'top-left' | 'left' | 'top-center' | 'center' | 'bottom-center' | 'top-right' | 'right' | 'bottom-right' | undefined"
                },
                "description": "Position variant. Bottom left is the default position\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**top-left** renders content in the top left corner of the image</li>\n<li>**left** renders content in the left, center part of the image</li>\n<li>**top-center** renders content in the top, center part of the image</li>\n<li>**center** renders content center of the image</li>\n<li>**bottom-center** renders content bottom center of the image</li>\n<li>**top-right** renders content top-right of the image</li>\n<li>**right** renders content right of the image</li>\n<li>**bottom-right** renders content bottom, right part of the image</li>\n</ul>\n</cre8-text-passage>",
                "fieldName": "align"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-hero",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Hero",
            "declaration": {
              "name": "Cre8Hero",
              "module": "components/hero/hero.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-hero",
            "declaration": {
              "name": "Cre8Hero",
              "module": "components/hero/hero.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Hero",
              "module": "components/hero/hero.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/inline-alert/inline-alert.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; :host { display: inline-flex; } :host([fullWidth]) { display: flex; } /** * Inline alert */ .cre8-c-inline-alert { @include cre8-typography-body-default(); font-weight: normal; display: inline-flex; align-items: flex-start; gap: size(1); padding: size(2); color: var(--cre8-color-content-default); background-color: var(--cre8-color-bg-info); border-color: var(--cre8-color-border-info); border-width: var(--cre8-border-width-default); border-style: var(--cre8-border-style-default); border-radius: var(--cre8-border-radius-default); } /** * Full-width inline alert */ .cre8-c-inline-alert--full-width { width: 100%; } /** * Inline alert with error variant */ .cre8-c-inline-alert--error { background-color: var(--cre8-color-bg-error); border-color: var(--cre8-color-border-error); } /** * Inline alert with warning variant */ .cre8-c-inline-alert--warning { background-color: var(--cre8-color-bg-warning); border-color: var(--cre8-color-border-warning); } /** * Inline alert with success variant */ .cre8-c-inline-alert--success { background-color: var(--cre8-color-bg-success); border-color: var(--cre8-color-border-success); } /** * Inline alert with attention variant */ .cre8-c-inline-alert--attention { background-color: var(--cre8-color-bg-attention); border-color: var(--cre8-color-border-attention); } /** * Inline alert with neutral variant */ .cre8-c-inline-alert--neutral { background-color: var(--cre8-color-bg-subtle); border-color: var(--cre8-color-border-strong); } /** * Inline alert with variant - transparent */ .cre8-c-inline-alert--transparent { padding: 0; border: none; background-color: transparent; gap: size(1); border-radius: none; } /** * Inline alert with variant - transparent and error */ .cre8-c-inline-alert--transparent.cre8-c-inline-alert--error { color: var(--cre8-color-content-error); } /** * Inline alert with variant - transparent and success */ .cre8-c-inline-alert--transparent.cre8-c-inline-alert--success { color: var(--cre8-color-content-success); } /** * Inline alert icon */ .cre8-c-inline-alert__icon { position: relative; color: var(--cre8-color-content-info-icon); height: size(3); width: size(3); /** * Inline alert icon for error variant */ .cre8-c-inline-alert--error & { color: var(--cre8-color-content-error-icon); } /** * Inline alert icon for warning variant */ .cre8-c-inline-alert--warning & { color: var(--cre8-color-content-warning-icon); } /** * Inline alert icon for success variant */ .cre8-c-inline-alert--success & { color: var(--cre8-color-content-success-icon); } /** * Inline alert icon for help variant * Inline alert icon for info variant */ .cre8-c-inline-alert--help, .cre8-c-inline-alert--info & { color: var(--cre8-color-content-info-icon); } /** * Inline alert icon for attention variant */ .cre8-c-inline-alert--attention & { color: var(--cre8-color-content-attention-icon); } /** * Inline alert icon for neutral variant */ .cre8-c-inline-alert--neutral & { color: var(--cre8-color-content-default); } /** * Inline alert icon */ .cre8-c-inline-alert--transparent & { top: 0; padding: size(0.25); } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/inline-alert/inline-alert.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/inline-alert/inline-alert.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'info', slot: 'In-line DEFAULT lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.', }, }"
          },
          {
            "kind": "variable",
            "name": "FullWidthTitleSmall",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'info', fullWidth: true, slot: html`<cre8-heading type=\"title-small\">Full Width Title Small</cre8-heading>`, }, }"
          },
          {
            "kind": "variable",
            "name": "Error",
            "type": {
              "text": "object"
            },
            "default": "{ args: { slot: 'In-line ERROR lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.', status: 'error', iconTitle: 'Error Message', }, }"
          },
          {
            "kind": "variable",
            "name": "Warning",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'warning', iconTitle: 'Warning Alert', slot: 'In-line WARNING lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.', }, }"
          },
          {
            "kind": "variable",
            "name": "Success",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'success', iconTitle: 'Confirmation Message', slot: 'In-line SUCCESS lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.', }, }"
          },
          {
            "kind": "variable",
            "name": "Help",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'help', iconTitle: 'Helpful Message', slot: 'In-line HELP lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.', }, }"
          },
          {
            "kind": "variable",
            "name": "Info",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'info', iconTitle: 'Important Information', slot: 'In-line INFO lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.', }, }"
          },
          {
            "kind": "variable",
            "name": "Attention",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'attention', iconTitle: 'Attention Notice', slot: 'In-line ATTENTION lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.', }, }",
            "description": "**Note** Certain brands don't currently use the `Attention` status"
          },
          {
            "kind": "variable",
            "name": "Neutral",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'neutral', slot: 'In-line NEUTRAL lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.', }, }"
          },
          {
            "kind": "variable",
            "name": "TransparentError",
            "type": {
              "text": "object"
            },
            "default": "{ args: { variant: 'transparent', status: 'error', iconTitle: 'Transparent Alert Error Message', slot: 'In-line ERROR lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.', }, }"
          },
          {
            "kind": "variable",
            "name": "TransparentWarning",
            "type": {
              "text": "object"
            },
            "default": "{ args: { variant: 'transparent', status: 'warning', iconTitle: 'Transparent Alert Warning Message', slot: 'In-line WARNING lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.', }, }"
          },
          {
            "kind": "variable",
            "name": "TransparentSuccess",
            "type": {
              "text": "object"
            },
            "default": "{ args: { variant: 'transparent', status: 'success', iconTitle: 'Transparent Alert Confirmation Message', slot: 'In-line SUCCESS lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.', }, }"
          },
          {
            "kind": "variable",
            "name": "TransparentHelp",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'help', variant: 'transparent', iconTitle: 'Transparent Alert Helpful Message', slot: 'In-line HELP lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.', }, }"
          },
          {
            "kind": "variable",
            "name": "TransparentInfo",
            "type": {
              "text": "object"
            },
            "default": "{ args: { status: 'info', variant: 'transparent', iconTitle: 'Transparent Alert Important Information', slot: 'In-line INFO lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.', }, }"
          },
          {
            "kind": "variable",
            "name": "TransparentAttention",
            "type": {
              "text": "object"
            },
            "default": "{ args: { variant: 'transparent', status: 'attention', iconTitle: 'Transparent Alert Attention Notice', slot: 'In-line ATTENTION lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.', }, }",
            "description": "**Note** Certain brands don't currently use the `Attention` status"
          },
          {
            "kind": "variable",
            "name": "TransparentNeutral",
            "type": {
              "text": "object"
            },
            "default": "{ args: { variant: 'transparent', status: 'neutral', slot: 'In-line NEUTRAL lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.', }, }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/inline-alert/inline-alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/inline-alert/inline-alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "FullWidthTitleSmall",
            "declaration": {
              "name": "FullWidthTitleSmall",
              "module": "components/inline-alert/inline-alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Error",
            "declaration": {
              "name": "Error",
              "module": "components/inline-alert/inline-alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Warning",
            "declaration": {
              "name": "Warning",
              "module": "components/inline-alert/inline-alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Success",
            "declaration": {
              "name": "Success",
              "module": "components/inline-alert/inline-alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Help",
            "declaration": {
              "name": "Help",
              "module": "components/inline-alert/inline-alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Info",
            "declaration": {
              "name": "Info",
              "module": "components/inline-alert/inline-alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Attention",
            "declaration": {
              "name": "Attention",
              "module": "components/inline-alert/inline-alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Neutral",
            "declaration": {
              "name": "Neutral",
              "module": "components/inline-alert/inline-alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TransparentError",
            "declaration": {
              "name": "TransparentError",
              "module": "components/inline-alert/inline-alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TransparentWarning",
            "declaration": {
              "name": "TransparentWarning",
              "module": "components/inline-alert/inline-alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TransparentSuccess",
            "declaration": {
              "name": "TransparentSuccess",
              "module": "components/inline-alert/inline-alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TransparentHelp",
            "declaration": {
              "name": "TransparentHelp",
              "module": "components/inline-alert/inline-alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TransparentInfo",
            "declaration": {
              "name": "TransparentInfo",
              "module": "components/inline-alert/inline-alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TransparentAttention",
            "declaration": {
              "name": "TransparentAttention",
              "module": "components/inline-alert/inline-alert.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TransparentNeutral",
            "declaration": {
              "name": "TransparentNeutral",
              "module": "components/inline-alert/inline-alert.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/inline-alert/inline-alert.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "In cases when it is necessary to alert the user but a less strong message that cannot be dismissed is desired,\nuse an in-line contextual alert message as the least \"severe\" message type.\nThese can be displayed anywhere on the page, but should never cover content.\nInline alerts do not include a title or close capability and are considered minimally intrusive user messaging.",
            "name": "Cre8InlineAlert",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "iconName",
                "type": {
                  "text": "string | undefined"
                },
                "description": "DEPRECATED: Icon name used for the icon before to the field note",
                "deprecated": "true",
                "attribute": "iconName"
              },
              {
                "kind": "field",
                "name": "fullWidth",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Full width Inline Alert",
                "attribute": "fullWidth",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "iconTitle",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Icon title used for the icon alt text",
                "attribute": "iconTitle"
              },
              {
                "kind": "field",
                "name": "variant",
                "type": {
                  "text": "'transparent' | 'subtle'"
                },
                "default": "'subtle'",
                "description": "Variant\n- **subtle** (default) renders an alert message in a padded container with a with a border and background color\n- **transparent** renders an alert message with no padded container, border, or background color",
                "attribute": "variant"
              },
              {
                "kind": "field",
                "name": "status",
                "type": {
                  "text": "'error' | 'warning' | 'success' | 'attention' | 'neutral' | 'help' | 'info' | undefined"
                },
                "default": "'info'",
                "description": "Status\n- **default** renders an inline alert with the brand colors\n- **error** renders an inline alert with an error state\n- **warning** renders an inline alert with a warning state\n- **success** renders an inline alert with a success state\n- **attention** renders an inline alert with an attention state\n- **neutral** renders an inline alert with a nuetral state",
                "attribute": "status"
              },
              {
                "kind": "method",
                "name": "mapStatusToIconInlineAlert",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "status",
                    "type": {
                      "text": "string"
                    }
                  }
                ]
              }
            ],
            "attributes": [
              {
                "name": "fullWidth",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Full width Inline Alert",
                "fieldName": "fullWidth",
                "attribute": "fullWidth"
              },
              {
                "name": "iconName",
                "type": {
                  "text": "string | undefined"
                },
                "description": "DEPRECATED: Icon name used for the icon before to the field note",
                "deprecated": "true",
                "fieldName": "iconName"
              },
              {
                "name": "iconTitle",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Icon title used for the icon alt text",
                "fieldName": "iconTitle"
              },
              {
                "name": "variant",
                "type": {
                  "text": "'transparent' | 'subtle'"
                },
                "default": "'subtle'",
                "description": "Variant\n- **subtle** (default) renders an alert message in a padded container with a with a border and background color\n- **transparent** renders an alert message with no padded container, border, or background color",
                "fieldName": "variant"
              },
              {
                "name": "status",
                "type": {
                  "text": "'error' | 'warning' | 'success' | 'attention' | 'neutral' | 'help' | 'info' | undefined"
                },
                "default": "'info'",
                "description": "Status\n- **default** renders an inline alert with the brand colors\n- **error** renders an inline alert with an error state\n- **warning** renders an inline alert with a warning state\n- **success** renders an inline alert with a success state\n- **attention** renders an inline alert with an attention state\n- **neutral** renders an inline alert with a nuetral state",
                "fieldName": "status"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-inline-alert",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8InlineAlert",
            "declaration": {
              "name": "Cre8InlineAlert",
              "module": "components/inline-alert/inline-alert.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-inline-alert",
            "declaration": {
              "name": "Cre8InlineAlert",
              "module": "components/inline-alert/inline-alert.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8InlineAlert",
              "module": "components/inline-alert/inline-alert.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/layout-section/layout-section.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * 1) Section within the layout component for each item */ .cre8-c-layout-section { width: 100%; height: 100%; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/layout-section/layout-section.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/layout-section/layout-section.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8LayoutSection",
            "slots": [
              {
                "description": "The content of the layout section",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "behavior",
                "type": {
                  "text": "'sticky' | undefined"
                },
                "description": "Behavioral variants\n- **sticky** allows the layout section to stick to the screen until the\n  section reaches the bottom of the layout or the next layout section.",
                "attribute": "behavior"
              },
              {
                "kind": "field",
                "name": "top",
                "type": {
                  "text": "string | undefined"
                },
                "default": "'1rem'",
                "description": "Top style\n1) Used to create dynamic sticky containers that can be adjusted based on the content",
                "attribute": "top"
              }
            ],
            "attributes": [
              {
                "name": "behavior",
                "type": {
                  "text": "'sticky' | undefined"
                },
                "description": "Behavioral variants\n- **sticky** allows the layout section to stick to the screen until the\n  section reaches the bottom of the layout or the next layout section.",
                "fieldName": "behavior"
              },
              {
                "name": "top",
                "type": {
                  "text": "string | undefined"
                },
                "default": "'1rem'",
                "description": "Top style\n1) Used to create dynamic sticky containers that can be adjusted based on the content",
                "fieldName": "top"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-layout-section",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8LayoutSection",
            "declaration": {
              "name": "Cre8LayoutSection",
              "module": "components/layout-section/layout-section.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-layout-section",
            "declaration": {
              "name": "Cre8LayoutSection",
              "module": "components/layout-section/layout-section.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8LayoutSection",
              "module": "components/layout-section/layout-section.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/linelength-container/linelength-container.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * 1) Container used to cap the width of a passage of text to be readable */ .cre8-c-linelength-container { max-width: var(--cre8-l-linelength-width); } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/linelength-container/linelength-container.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/linelength-container/linelength-container.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/linelength-container/linelength-container.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/linelength-container/linelength-container.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/linelength-container/linelength-container.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8LinelengthContainer",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-linelength-container",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8LinelengthContainer",
            "declaration": {
              "name": "Cre8LinelengthContainer",
              "module": "components/linelength-container/linelength-container.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-linelength-container",
            "declaration": {
              "name": "Cre8LinelengthContainer",
              "module": "components/linelength-container/linelength-container.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8LinelengthContainer",
              "module": "components/linelength-container/linelength-container.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/link-list-item/link-list-item.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * 1) An individual list item with a link inside */ /** * Link list link * 1) Set to inherit color so that the link list link. Maybe a TODO */ .cre8-c-link-list__item { display: flex; align-items: center; } /** * Link list link */ .cre8-c-link-list__link { display: flex; align-items: center; color: var(--cre8-link-list-link-color, var(--cre8-color-content-link)); text-decoration: underline; &:hover, &:focus { color: var(--cre8-link-list-link-hover-color, var(--cre8-color-content-link-hover)); text-decoration: none; } /** * Link list link within active link list item * 1) This custom property cascade is set at the link list level * 2) TODO: Discuss how we want to handle bold variants since mixins can't get passed down */ .cre8-c-link-list__item.cre8-is-active & { color: var(--cre8-link-list-item-active-text-color); font-weight: var(--cre8-font-weight-bold); /* 2 */ } } /** * Link list item after * 1) Container to place things like badges after an item */ .cre8-c-link-list__item-before { margin-right: size(1); } /** * Link list item after * 1) Container to place things like badges after an item */ .cre8-c-link-list__item-after { margin-left: size(1); } ::slotted(cre8-icon-legacy) { --cre8-icon-height: #{size(3)}; --cre8-icon-width: #{size(3)}; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/link-list-item/link-list-item.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/link-list-item/link-list-item.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8LinkListItem",
            "slots": [
              {
                "description": "The default slot to put badges or other Components",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "text",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The link text",
                "attribute": "text"
              },
              {
                "kind": "field",
                "name": "isActive",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Active link",
                "attribute": "isActive",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "href",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The link URL",
                "attribute": "href"
              }
            ],
            "attributes": [
              {
                "name": "text",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The link text",
                "fieldName": "text"
              },
              {
                "name": "isActive",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Active link",
                "fieldName": "isActive"
              },
              {
                "name": "href",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The link URL",
                "fieldName": "href"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-link-list-item",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8LinkListItem",
            "declaration": {
              "name": "Cre8LinkListItem",
              "module": "components/link-list-item/link-list-item.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-link-list-item",
            "declaration": {
              "name": "Cre8LinkListItem",
              "module": "components/link-list-item/link-list-item.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8LinkListItem",
              "module": "components/link-list-item/link-list-item.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/link-list/link-list.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * A list of hyperlinks * 1) Override preset line-height value to condense link text. Note: this should * be done sparingly to control wrapping text for specific scenarios */ .cre8-c-link-list { @include cre8-typography-body-default; display: flex; flex-direction: column; padding: 0; margin-top: size(-2); list-style: none; /** * Slotted link list item */ ::slotted(cre8-link-list-item) { margin-top: size(2); } } /** * A secondary link list * 1) Uses a more subtle treatment than the default link list * 2) TODO: Create a tier 2 token for secondary link colors */ .cre8-c-link-list--secondary { --cre8-link-list-item-active-text-color: var(--cre8-color-content-default); /* 2 */ color: var(--cre8-color-content-subtle); } /** * Inverted link list * 1) Link list on a dark background */ .cre8-c-link-list--inverted { --cre8-link-list-link-color: var(--cre8-color-content-knockout); } /** * Display link list */ .cre8-c-link-list--display { color: var(--cre8-color-content-strong); } /** * Condensed link list * 1) Removes spacing between link list items */ .cre8-c-link-list--condensed { margin-top: size(-1.25); /** * Slotted link list item within condensed link list */ ::slotted(cre8-link-list-item) { margin-top: size(1.25); } } /** * Small link list */ .cre8-c-link-list--sm { @include cre8-typography-body-small; } /** * Horizontal behavior * 1) Displays as a horizontal list */ .cre8-c-link-list--horizontal { flex-direction: row; flex-wrap: wrap; margin: size(-1) 0 0 size(-2); /** * Slotted link list item within horizontal link list */ ::slotted(cre8-link-list-item) { margin-top: size(1); margin-left: size(2); } } /** * Responsive behavior * 1) Displays as a horizontal list on small screens and moves to a vertical */ .cre8-c-link-list--responsive { @media all and (max-width:$cre8-breakpoint-md) { flex-direction: row; flex-wrap: wrap; margin: size(-1) 0 0 size(-2); /** * Slotted link list item within responsive link list */ ::slotted(cre8-link-list-item) { margin-top: size(1); margin-left: size(2); } } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/link-list/link-list.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/link-list/link-list.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "Secondary"
          },
          {
            "kind": "function",
            "name": "Inverted"
          },
          {
            "kind": "function",
            "name": "Display"
          },
          {
            "kind": "function",
            "name": "SecondaryInverted"
          },
          {
            "kind": "function",
            "name": "Condensed"
          },
          {
            "kind": "function",
            "name": "Small"
          },
          {
            "kind": "function",
            "name": "SmallCondensed"
          },
          {
            "kind": "function",
            "name": "Responsive"
          },
          {
            "kind": "function",
            "name": "Horizontal"
          },
          {
            "kind": "function",
            "name": "WithBadge"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/link-list/link-list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/link-list/link-list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Secondary",
            "declaration": {
              "name": "Secondary",
              "module": "components/link-list/link-list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Inverted",
            "declaration": {
              "name": "Inverted",
              "module": "components/link-list/link-list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Display",
            "declaration": {
              "name": "Display",
              "module": "components/link-list/link-list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SecondaryInverted",
            "declaration": {
              "name": "SecondaryInverted",
              "module": "components/link-list/link-list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Condensed",
            "declaration": {
              "name": "Condensed",
              "module": "components/link-list/link-list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Small",
            "declaration": {
              "name": "Small",
              "module": "components/link-list/link-list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SmallCondensed",
            "declaration": {
              "name": "SmallCondensed",
              "module": "components/link-list/link-list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Responsive",
            "declaration": {
              "name": "Responsive",
              "module": "components/link-list/link-list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Horizontal",
            "declaration": {
              "name": "Horizontal",
              "module": "components/link-list/link-list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "WithBadge",
            "declaration": {
              "name": "WithBadge",
              "module": "components/link-list/link-list.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/link-list/link-list.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8LinkList",
            "slots": [
              {
                "description": "The link list items",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "behavior",
                "type": {
                  "text": "'responsive' | 'horizontal' | undefined"
                },
                "description": "Behavioral variant\n- **responsive** renders a horizontal wrapping link list that converts to a stacked link list on large screens\n- **horizontal** renders a horizontal wrapping link list on all screens",
                "attribute": "behavior"
              },
              {
                "kind": "field",
                "name": "inverted",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverted variant\n1. Used for dark backgrounds",
                "attribute": "inverted",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "size",
                "type": {
                  "text": "'sm' | undefined"
                },
                "description": "Size variants\n- **sm** renders a link list with a smaller typography",
                "attribute": "size"
              },
              {
                "kind": "field",
                "name": "spacing",
                "type": {
                  "text": "'condensed' | undefined"
                },
                "description": "Spacing between link list items\n- **condensed** renders a link list with a more compact display",
                "attribute": "spacing"
              },
              {
                "kind": "field",
                "name": "variant",
                "type": {
                  "text": "'secondary' | 'display' | undefined"
                },
                "description": "Style variants\n- **secondary** renders a link list with a more subtle visual treatment\n- **display** renders a link list with a display treatment (e.g. article title)",
                "attribute": "variant"
              }
            ],
            "attributes": [
              {
                "name": "behavior",
                "type": {
                  "text": "'responsive' | 'horizontal' | undefined"
                },
                "description": "Behavioral variant\n- **responsive** renders a horizontal wrapping link list that converts to a stacked link list on large screens\n- **horizontal** renders a horizontal wrapping link list on all screens",
                "fieldName": "behavior"
              },
              {
                "name": "inverted",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverted variant\n1. Used for dark backgrounds",
                "fieldName": "inverted"
              },
              {
                "name": "size",
                "type": {
                  "text": "'sm' | undefined"
                },
                "description": "Size variants\n- **sm** renders a link list with a smaller typography",
                "fieldName": "size"
              },
              {
                "name": "spacing",
                "type": {
                  "text": "'condensed' | undefined"
                },
                "description": "Spacing between link list items\n- **condensed** renders a link list with a more compact display",
                "fieldName": "spacing"
              },
              {
                "name": "variant",
                "type": {
                  "text": "'secondary' | 'display' | undefined"
                },
                "description": "Style variants\n- **secondary** renders a link list with a more subtle visual treatment\n- **display** renders a link list with a display treatment (e.g. article title)",
                "fieldName": "variant"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-link-list",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8LinkList",
            "declaration": {
              "name": "Cre8LinkList",
              "module": "components/link-list/link-list.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-link-list",
            "declaration": {
              "name": "Cre8LinkList",
              "module": "components/link-list/link-list.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8LinkList",
              "module": "components/link-list/link-list.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/list/list.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #LIST /** * 1) Generic stacked list that allows for styling of borders in between items */ .cre8-c-list { list-style: none; padding: 0; margin: 0; margin-bottom: size(2); } /** * Slotted list item compponent * TODO: Add tier 2 variable that is used for light borders for cards, table rows, etc. */ ::slotted(cre8-list-item) { display: block; padding-top: size(2); padding-bottom: size(2); border-bottom: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-subtle); /** * List item with bare list * 1) Remove the border between items */ .cre8-c-list--bare & { border-bottom: 0; /* 1 */ } /** * List item with condensed list * 1) Reduce padding between items compared to the default */ .cre8-c-list--condensed & { padding-top: size(1); padding-bottom: size(1); } /** * List item with padded list * 1) Increase padding between items compared to the default */ .cre8-c-list--padded & { padding-top: size(4); padding-bottom: size(4); } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/list/list.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/list/list.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "Bare"
          },
          {
            "kind": "function",
            "name": "Padded"
          },
          {
            "kind": "function",
            "name": "Condensed"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/list/list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/list/list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Bare",
            "declaration": {
              "name": "Bare",
              "module": "components/list/list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Padded",
            "declaration": {
              "name": "Padded",
              "module": "components/list/list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Condensed",
            "declaration": {
              "name": "Condensed",
              "module": "components/list/list.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/list/list.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8List",
            "slots": [
              {
                "description": "The list items",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "variant",
                "type": {
                  "text": "'bare' | undefined"
                },
                "description": "Style variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**bare** removes any lines from in between list items</li>\n</ul>\n</cre8-text-passage>",
                "attribute": "variant"
              },
              {
                "kind": "field",
                "name": "spacing",
                "type": {
                  "text": "'padded' | 'condensed' | undefined"
                },
                "description": "Spacing variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**padded** applies more padding in between list items compared to the default</li>\n<li>**condensed** reduces padding in between list items compared to the default</li>\n</ul>\n</cre8-text-passage>",
                "attribute": "spacing"
              }
            ],
            "attributes": [
              {
                "name": "variant",
                "type": {
                  "text": "'bare' | undefined"
                },
                "description": "Style variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**bare** removes any lines from in between list items</li>\n</ul>\n</cre8-text-passage>",
                "fieldName": "variant"
              },
              {
                "name": "spacing",
                "type": {
                  "text": "'padded' | 'condensed' | undefined"
                },
                "description": "Spacing variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**padded** applies more padding in between list items compared to the default</li>\n<li>**condensed** reduces padding in between list items compared to the default</li>\n</ul>\n</cre8-text-passage>",
                "fieldName": "spacing"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-list",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8List",
            "declaration": {
              "name": "Cre8List",
              "module": "components/list/list.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-list",
            "declaration": {
              "name": "Cre8List",
              "module": "components/list/list.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8List",
              "module": "components/list/list.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/link/link.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; :host { display: inline-flex; } .cre8-c-link { display: inline-flex; text-decoration: none; height: 100%; color: var(--cre8-color-content-link); &:hover { .cre8-c-link__text, .cre8-c-link__text-area { color: var(--cre8-color-content-link-hover); border-color: var(--cre8-color-border-transparent); background-color: var(--cre8-color-bg-opacity-transparent); } } &:focus { outline: none; .cre8-c-link__text, .cre8-c-link__text-area { border-color: var(--cre8-color-border-transparent); background-color: var(--cre8-color-bg-active); color: var(--cre8-color-content-link-focus); } .cre8-c-link__cta-wrapper { color: var(--cre8-color-content-link-focus); @include focus; background-color: var(--cre8-color-button-primary-bg-hover); // TODO: CTA background color token not exists border: var(--cre8-border-width-focus) var(--cre8-border-style-default) var(--color-border-active-outline); } } &:active { .cre8-c-link__text, .cre8-c-link__text-area { border-color: var(--cre8-color-border-transparent); background-color: var(--cre8-color-bg-opacity-transparent); color: var(--cre8-color-content-link-active); } } } .cre8-c-link__text-area { display: inline-flex; justify-content: center; text-align: center; align-items: center; } .cre8-c-link__text { @include cre8-typography-body-default-link(); color: var(--cre8-color-content-link); display: inline-flex; .cre8-c-link--sm & { @include cre8-typography-body-small-link(); } .cre8-c-link--lg & { @include cre8-typography-body-large-link(); } } .cre8-c-link__text { .cre8-c-link__no-underline & { text-decoration: none; } } .cre8-c-link__icon-wrapper { display: inline-flex; } .cre8-c-link__icon { display: inline-flex; height: size(3); width: size(3); .cre8-c-link--sm & { --cre8-icon-height: var(--cre8-icon-size-small); --cre8-icon-width: var(--cre8-icon-size-small); height: size(2.75); width: size(2.75); } .cre8-c-link--lg & { --cre8-icon-height: var(--cre8-icon-size-large); --cre8-icon-width: var(--cre8-icon-size-large); height: size(3.25); width: size(3.25); } } .cre8-c-link__variation { display: inline-flex; justify-content: center; align-items: center; } .cre8-c-link__cta-wrapper { color: var(--cre8-color-button-primary-content); // TODO: token not defined display: inline-flex; margin-left: size(1); padding: var(--cre8-spacing-4); background-color: var(--cre8-color-content-link); border-radius: var(--cre8-border-radius-round); border-width: var(--cre8-border-width-button-default); svg { height: size(2); width: size(2); } } .cre8-c-link__icon.before { padding-right: size(1); } .cre8-c-link__icon.after { padding-left: size(1); } ::slotted([slot='badge']) { padding-left: size(1); } .cre8-c-link--inverted { .cre8-c-link__text { color: var(--cre8-color-content-inverse-link); } .cre8-c-link__icon { color: var(--cre8-color-content-inverse-link);; } .cre8-c-link__cta-wrapper { --cre8-icon-fill: var(--cre8-color-content-brand); color: var(--cre8-color-content-brand); background-color: var(--cre8-color-content-inverse-link); } &:hover { .cre8-c-link__text, .cre8-c-link__text-area { color: var(--cre8-color-content-inverse-link-hover); } .cre8-c-link__icon { fill: var(--cre8-color-content-inverse-link-hover); } } &:active { .cre8-c-link__text, .cre8-c-link__text-area { color: var(--cre8-color-content-inverse-link-active); } .cre8-c-link__icon { fill: var(--cre8-color-content-inverse-link-active); } } &:focus { outline: none; .cre8-c-link__icon { background-color: var(--cre8-color-bg-inverse-active); fill: var(--cre8-color-content-inverse-link-focus); } .cre8-c-link__text, .cre8-c-link__text-area { background-color: var(--cre8-color-bg-inverse-active); color: var(--cre8-color-content-inverse-link-focus); } .cre8-c-link__cta-wrapper { background-color: var(--cre8-color-content-inverse-link); color: var(--cre8-color-content-inverse-link-focus); outline: var(--cre8-border-width-focus) var(--cre8-border-style-default) var(--cre8-color-content-inverse-link); //TODO: token not exists cre8-color-border-inverse-active-outline outline-offset: size(0.25); } } } cre8-icon { display: flex; align-items: center; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/link/link.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/link/link.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "meta",
            "type": {
              "text": "Meta"
            },
            "default": "{ title: 'cre8 Components/Link', component: 'cre8-link', parameters: { withDesign: { type: 'figma', url: 'https://www.figma.com/file/L8rVyIvYfWAtNpgm2qps73/Evernorth-Base-Web-Library?node-id=19966%3A5158', }, status: {type: 'inProgress'}, }, argTypes: { href: {value: '#'}, noUnderline: {control: 'boolean'}, ctaLink: {control: 'boolean'}, inverted: {control: 'boolean'}, iconName: {control: 'text'}, //iconName will be deprecated, use svg svg: {control: 'text'}, iconRotateDegree: {control: 'text'}, iconFlipDirection: {control: 'text'}, iconPosition: {options: ['before', 'after'], control: {type: 'radio'}}, size: {options: ['sm', 'lg'], control: {type: 'radio'}}, }, render: (args) => html`<cre8-link ${spread(args)}>Hello World</cre8-link>`, }"
          },
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { href: '#', }, }"
          },
          {
            "kind": "variable",
            "name": "IconBefore",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { href: '#', svg: svgCalendar, iconPosition: 'before', }, }"
          },
          {
            "kind": "variable",
            "name": "IconAfter",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { href: '#', svg: svgCheck, iconPosition: 'after', }, }"
          },
          {
            "kind": "variable",
            "name": "BadgeLink",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { href: '#', }, render: (args) => html`<cre8-link ${spread(args)}>Hello World<cre8-badge slot=\"badge\" status=\"info\" variant=\"light\" text=\"17\"></cre8-badge></cre8-link>`, }"
          },
          {
            "kind": "variable",
            "name": "CallToActionLink",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { href: '#', ctaLink: 'true', noUnderline: 'true', }, }"
          },
          {
            "kind": "variable",
            "name": "CallToActionLinkInverted",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { href: '#', ctaLink: 'true', inverted: 'true' , noUnderline: 'true', }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "NoUnderline",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { href: '#', noUnderline: 'true', }, }"
          },
          {
            "kind": "variable",
            "name": "NoUnderlineWithIcon",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { href: '#', svg: svgInfoFilled, iconPosition: 'after', NoUnderline: 'true', }, }"
          },
          {
            "kind": "variable",
            "name": "Inverted",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { href: '#', inverted: 'true', }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "InvertedWithIcon",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { href: '#', inverted: 'true', svg: svgInfoFilled, iconPosition: 'after', }, parameters: { backgrounds: { default: 'dark' }, }, }"
          },
          {
            "kind": "variable",
            "name": "SmallLinkWithIcon",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { href: '#', size: 'sm', svg: svgHelp, iconPosition: 'after', }, }"
          },
          {
            "kind": "variable",
            "name": "LargeLinkWithIcon",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { href: '#', size: 'lg', svg: svgHelp, iconPosition: 'after', }, }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "meta",
              "module": "components/link/link.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/link/link.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconBefore",
            "declaration": {
              "name": "IconBefore",
              "module": "components/link/link.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconAfter",
            "declaration": {
              "name": "IconAfter",
              "module": "components/link/link.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "BadgeLink",
            "declaration": {
              "name": "BadgeLink",
              "module": "components/link/link.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "CallToActionLink",
            "declaration": {
              "name": "CallToActionLink",
              "module": "components/link/link.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "CallToActionLinkInverted",
            "declaration": {
              "name": "CallToActionLinkInverted",
              "module": "components/link/link.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "NoUnderline",
            "declaration": {
              "name": "NoUnderline",
              "module": "components/link/link.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "NoUnderlineWithIcon",
            "declaration": {
              "name": "NoUnderlineWithIcon",
              "module": "components/link/link.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Inverted",
            "declaration": {
              "name": "Inverted",
              "module": "components/link/link.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "InvertedWithIcon",
            "declaration": {
              "name": "InvertedWithIcon",
              "module": "components/link/link.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SmallLinkWithIcon",
            "declaration": {
              "name": "SmallLinkWithIcon",
              "module": "components/link/link.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "LargeLinkWithIcon",
            "declaration": {
              "name": "LargeLinkWithIcon",
              "module": "components/link/link.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/link/link.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "Link Component are strictly used in the case where the component will take\nthe user away from the current page to a new url.\nIn this vein, this component should ONLY be used in situations an anchor tag would be used (an href is required)\nThis goes for the variations as well such as the Call To Action Link\n\n**Note**\n\nFor link with icon:\n- **iconRotateDegree** & **iconFlipDirection** props are optional.\n- They are used to set up the correct direction for icons, for example,\narrows, caret up or caret down.",
            "name": "Cre8Link",
            "members": [
              {
                "kind": "field",
                "name": "href",
                "type": {
                  "text": "string"
                },
                "description": "Href attribute of the anchor tag",
                "attribute": "href"
              },
              {
                "kind": "field",
                "name": "rel",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Rel attribute of the anchor tag",
                "attribute": "rel"
              },
              {
                "kind": "field",
                "name": "target",
                "type": {
                  "text": "'_blank' | '_self' | '_parent' | '_top' | undefined"
                },
                "description": "Target attribute for a link (i.e. set to _blank to open in new tab)\n- **_blank** yields a link that opens in a new tab\n- **_self** yields a link that loads the URL into the same browsing context as the current one.\n  This is the default behavior\n- **_parent** yields a link that loads the URL into the parent browsing context of the current one.\n  If there is no parent, this behaves the same way as _self\n- **_top** yields a link that loads the URL into the top-level browsing context.\n  If there is no parent, this behaves the same way as _self.",
                "attribute": "target"
              },
              {
                "kind": "field",
                "name": "iconName",
                "type": {
                  "text": "string | undefined"
                },
                "description": "DEPRECATED: Icon name, use svg instead",
                "deprecated": "true",
                "attribute": "iconName"
              },
              {
                "kind": "field",
                "name": "svg",
                "type": {
                  "text": "string | undefined"
                },
                "description": "svg as a raw string\n- For links with icon, the icon is defined by this prop.\n- Pass in a raw svg as a String for using <cre8-icon>",
                "attribute": "svg"
              },
              {
                "kind": "field",
                "name": "iconRotateDegree",
                "type": {
                  "text": "number | undefined"
                },
                "default": "0",
                "description": "iconRotateDegree is used for <cre8-icon> to set the arrow in the correct direction",
                "attribute": "iconRotateDegree"
              },
              {
                "kind": "field",
                "name": "iconFlipDirection",
                "type": {
                  "text": "string | undefined"
                },
                "description": "iconFlipDirection is used for <cre8-icon> to set the icon in the correct direction",
                "attribute": "iconFlipDirection"
              },
              {
                "kind": "field",
                "name": "iconPosition",
                "type": {
                  "text": "'before' | 'after' | undefined"
                },
                "default": "undefined",
                "description": "Icon position\n- **before** places the icon before the button text\n- **after** places the icon after the button text",
                "attribute": "iconPosition"
              },
              {
                "kind": "field",
                "name": "ctaIcon",
                "type": {
                  "text": "string"
                },
                "default": "'arrow-forward'",
                "description": "Call To Action Icon",
                "attribute": "ctaIcon"
              },
              {
                "kind": "field",
                "name": "ctaLink",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Call To Action Link",
                "attribute": "ctaLink"
              },
              {
                "kind": "field",
                "name": "noUnderline",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Link with no underline",
                "attribute": "noUnderline"
              },
              {
                "kind": "field",
                "name": "size",
                "type": {
                  "text": "'sm' | 'lg' | undefined"
                },
                "description": "Size variant (default is medium)\n- **sm** shrinks the link typography and overall size\n- **lg** increases the link typography size and overall size",
                "attribute": "size"
              },
              {
                "kind": "field",
                "name": "inverted",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverted colors Link (onDark)",
                "attribute": "inverted"
              },
              {
                "kind": "method",
                "name": "generateIcon",
                "privacy": "private"
              }
            ],
            "attributes": [
              {
                "name": "href",
                "type": {
                  "text": "string"
                },
                "description": "Href attribute of the anchor tag",
                "fieldName": "href"
              },
              {
                "name": "rel",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Rel attribute of the anchor tag",
                "fieldName": "rel"
              },
              {
                "name": "target",
                "type": {
                  "text": "'_blank' | '_self' | '_parent' | '_top' | undefined"
                },
                "description": "Target attribute for a link (i.e. set to _blank to open in new tab)\n- **_blank** yields a link that opens in a new tab\n- **_self** yields a link that loads the URL into the same browsing context as the current one.\n  This is the default behavior\n- **_parent** yields a link that loads the URL into the parent browsing context of the current one.\n  If there is no parent, this behaves the same way as _self\n- **_top** yields a link that loads the URL into the top-level browsing context.\n  If there is no parent, this behaves the same way as _self.",
                "fieldName": "target"
              },
              {
                "name": "iconName",
                "type": {
                  "text": "string | undefined"
                },
                "description": "DEPRECATED: Icon name, use svg instead",
                "deprecated": "true",
                "fieldName": "iconName"
              },
              {
                "name": "svg",
                "type": {
                  "text": "string | undefined"
                },
                "description": "svg as a raw string\n- For links with icon, the icon is defined by this prop.\n- Pass in a raw svg as a String for using <cre8-icon>",
                "fieldName": "svg"
              },
              {
                "name": "iconRotateDegree",
                "type": {
                  "text": "number | undefined"
                },
                "default": "0",
                "description": "iconRotateDegree is used for <cre8-icon> to set the arrow in the correct direction",
                "fieldName": "iconRotateDegree"
              },
              {
                "name": "iconFlipDirection",
                "type": {
                  "text": "string | undefined"
                },
                "description": "iconFlipDirection is used for <cre8-icon> to set the icon in the correct direction",
                "fieldName": "iconFlipDirection"
              },
              {
                "name": "iconPosition",
                "type": {
                  "text": "'before' | 'after' | undefined"
                },
                "default": "undefined",
                "description": "Icon position\n- **before** places the icon before the button text\n- **after** places the icon after the button text",
                "fieldName": "iconPosition"
              },
              {
                "name": "ctaIcon",
                "type": {
                  "text": "string"
                },
                "default": "'arrow-forward'",
                "description": "Call To Action Icon",
                "fieldName": "ctaIcon"
              },
              {
                "name": "ctaLink",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Call To Action Link",
                "fieldName": "ctaLink"
              },
              {
                "name": "noUnderline",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Link with no underline",
                "fieldName": "noUnderline"
              },
              {
                "name": "size",
                "type": {
                  "text": "'sm' | 'lg' | undefined"
                },
                "description": "Size variant (default is medium)\n- **sm** shrinks the link typography and overall size\n- **lg** increases the link typography size and overall size",
                "fieldName": "size"
              },
              {
                "name": "inverted",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverted colors Link (onDark)",
                "fieldName": "inverted"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-link",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Link",
            "declaration": {
              "name": "Cre8Link",
              "module": "components/link/link.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-link",
            "declaration": {
              "name": "Cre8Link",
              "module": "components/link/link.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Link",
              "module": "components/link/link.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/logo/logo.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #LOGO /** * 1) Brand's logo */ .cre8-c-logo { display: flex; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/logo/logo.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/logo/logo.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/logo/logo.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/logo/logo.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/logo/logo.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8Logo",
            "slots": [
              {
                "description": "The logo element",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "href",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Logo link",
                "attribute": "href"
              }
            ],
            "attributes": [
              {
                "name": "href",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Logo link",
                "fieldName": "href"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-logo",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Logo",
            "declaration": {
              "name": "Cre8Logo",
              "module": "components/logo/logo.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-logo",
            "declaration": {
              "name": "Cre8Logo",
              "module": "components/logo/logo.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Logo",
              "module": "components/logo/logo.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/main/main.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #MAIN /** * 1) Container for the main content on the page between the header and footer * 2) Set to flex: 1 0 auto for a footer that gets pushed all the way to the bottom * for pages that don't have a lot of content */ :host { display: flex; flex-direction: column; flex: 1 0 auto; /* 2 */ } /** * Full height main container */ .cre8-c-main--full-height { display: flex; flex-direction: column; flex: 1; height: 100%; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/main/main.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/main/main.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/main/main.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/main/main.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/main/main.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8Main",
            "slots": [
              {
                "description": "The main content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "fullHeight",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Full height variant\n1) Sets the height to 100%",
                "attribute": "fullHeight",
                "reflects": true
              }
            ],
            "attributes": [
              {
                "name": "fullHeight",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Full height variant\n1) Sets the height to 100%",
                "fieldName": "fullHeight"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-main",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Main",
            "declaration": {
              "name": "Cre8Main",
              "module": "components/main/main.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-main",
            "declaration": {
              "name": "Cre8Main",
              "module": "components/main/main.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Main",
              "module": "components/main/main.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/list-item/list-item.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * 1) List item within the list component */ `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/list-item/list-item.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/list-item/list-item.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8ListItem",
            "slots": [
              {
                "description": "The content of the list item",
                "name": ""
              }
            ],
            "members": [],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-list-item",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8ListItem",
            "declaration": {
              "name": "Cre8ListItem",
              "module": "components/list-item/list-item.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-list-item",
            "declaration": {
              "name": "Cre8ListItem",
              "module": "components/list-item/list-item.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8ListItem",
              "module": "components/list-item/list-item.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/modal/modal.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /*------------------------------------*\\ #MODAL \\*------------------------------------*/ :host { display: block; } /** * 1) Modal Composable Component */ .cre8-c-modal { position: fixed; height: 100vh; width: 100vw; top: 0; left: 0; display: none; justify-content: center; align-items: center; background: rgba(0, 0, 0, 0.25); z-index: 1000; } .cre8-c-modal.cre8-is-active { display: flex; visibility: visible; opacity: 1; } /** * Modal Focus Trap for Window (keeps focus in modal until closed) */ .cre8-c-modal__focus-trap { display: contents; } /** * Modal Window */ .cre8-c-modal__window { display: flex; flex-direction: column; flex-shrink: 0; position: fixed; background: var(--cre8-color-bg-default); width: size(68); max-width: 100%; border-radius: var(--cre8-border-radius-container); overflow: hidden; overflow-y: auto; /** * Modal Window for mobile user screen widths */ @media all and (max-width:$cre8-breakpoint-md) { position: inherit; height: 100%; width: 100%; } &:focus-visible { @includefocus(); } } /** * Modal Window Header */ .cre8-c-modal__header { display: flex; padding: size(4) size(6) size(2); align-items: center; /** * Modal Header with Error state * 1) Icon fill prop is a custom property of cre8-icon-legacy that apply the color as a fill to the whole icon */ .cre8-c-modal--error & { .cre8-modal-icon { fill: var(--cre8-color-content-error-icon); /* 1 */ } } /** * Modal Header with Warning state * 1) Icon fill prop is a custom property of cre8-icon-legacy that apply the color as a fill to the whole icon */ .cre8-c-modal--warning & { .cre8-modal-icon { fill: var(--cre8-color-content-warning-icon); /* 1 */ } } /** * Modal Header with Success state * 1) Icon fill prop is a custom property of cre8-icon-legacy that apply the color as a fill to the whole icon */ .cre8-c-modal--success & { .cre8-modal-icon { fill: var(--cre8-color-content-success-icon); /* 1 */ } } /** * Modal Header with Info or Help State * 1) Icon fill prop is a custom property of cre8-icon-legacy that apply the color as a fill to the whole icon */ .cre8-c-modal--info &, .cre8-c-modal--help & { .cre8-modal-icon { fill: var(--cre8-color-content-info-icon); /* 1 */ } } } /** * Modal Heading */ .cre8-c-modal__header-inner { display: flex; align-items: center; gap: size(2); cre8-icon { .cre8-modal-icon { height: size(4); width: size(4); } } } /** * Modal Window Body */ .cre8-c-modal__body { max-height: 240px; // Prevent modal from getting too big based on content overflow: auto; // Force scrolling based on long amounts of content padding: 0 size(6); /** * Modal Window Body for mobile user screen widths */ @media all and (max-width:$cre8-breakpoint-md) { height: 100%; max-height: max-content; } } /** * Modal Window Footer */ .cre8-c-modal__footer { padding: size(3) size(6) calc(100vh - 95dvh); // Ensure footer slot isn't cut off on certain devices } /** * Modal Window Close button */ .cre8-c-modal__close-button { margin-left: auto; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/modal/modal.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/modal/modal.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "Error",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "Warning",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "Success",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "Info",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "Help",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "NotDismissible",
            "parameters": [
              {
                "name": "args"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/modal/modal.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/modal/modal.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Error",
            "declaration": {
              "name": "Error",
              "module": "components/modal/modal.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Warning",
            "declaration": {
              "name": "Warning",
              "module": "components/modal/modal.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Success",
            "declaration": {
              "name": "Success",
              "module": "components/modal/modal.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Info",
            "declaration": {
              "name": "Info",
              "module": "components/modal/modal.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Help",
            "declaration": {
              "name": "Help",
              "module": "components/modal/modal.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "NotDismissible",
            "declaration": {
              "name": "NotDismissible",
              "module": "components/modal/modal.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/modal/modal.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "Modal component should be used in all modal situations.\nIt is natuarally composable and can even have a custom header and remove the close button.\n(note: adding `slot=\"header\"` will insert the given element into the header section of the modal,\nsame for `slot=\"footer\"` and no given slot name will inset it into the body)\n\nIf it is desired to create a utility modal. Cre8Modal requires a status value (see props table below,\nand a UtilityModalTitle since all utility modals have a cre8-heading)",
            "name": "Cre8Modal",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "_modalWindow",
                "type": {
                  "text": "HTMLDivElement"
                },
                "description": "Query the modal window"
              },
              {
                "kind": "field",
                "name": "isActive",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Is Active attribute",
                "attribute": "isActive",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "status",
                "type": {
                  "text": "'error' | 'warning' | 'success' | 'info' | 'help' | undefined"
                },
                "description": "Status Types\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**default (no value)** renders a default modal</li>\n<li>**error** renders an error modal</li>\n<li>**warning** renders a warning modal</li>\n<li>**success** renders a success modal</li>\n<li>**info** renders an info modal</li>\n<li>**help** renders an help modal</li>\n</ul>\n</cre8-text-passage>",
                "attribute": "status"
              },
              {
                "kind": "field",
                "name": "utilityModalTitle",
                "type": {
                  "text": "string"
                },
                "description": "Utility Modal Heading (String)",
                "attribute": "utilityModalTitle"
              },
              {
                "kind": "field",
                "name": "notDismissible",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Not dismissible modal",
                "attribute": "notDismissible",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "closeButtonText",
                "type": {
                  "text": "string"
                },
                "default": "'close'",
                "description": "Close Button Text",
                "attribute": "closeButtonText"
              },
              {
                "kind": "field",
                "name": "closeButtonIcon",
                "type": {
                  "text": "string"
                },
                "default": "'close'",
                "description": "Close Button Icon",
                "attribute": "closeButtonIcon"
              },
              {
                "kind": "field",
                "name": "ariaLabel",
                "type": {
                  "text": "string"
                },
                "description": "Modal Aria Label - This is required for accessibility and provides context of the entire modal!",
                "attribute": "ariaLabel"
              },
              {
                "kind": "method",
                "name": "handleKeydown",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "KeyboardEvent"
                    }
                  }
                ],
                "description": "Handle keydown\n1) Close the modal when escape is hit when the user is focused within the modal"
              },
              {
                "kind": "method",
                "name": "handleCloseModal",
                "description": "Handle on close\n1) On close, set the modal to not active and dispatch event telling the parent the modal was closed."
              },
              {
                "kind": "method",
                "name": "handleOnClickOutside",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "Event"
                    }
                  }
                ],
                "description": "Handle \"click outside\"\n1) onClick of the area around the modal window, close the modal."
              },
              {
                "kind": "field",
                "name": "mapStatusToIconModal"
              }
            ],
            "attributes": [
              {
                "name": "isActive",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Is Active attribute",
                "fieldName": "isActive"
              },
              {
                "name": "status",
                "type": {
                  "text": "'error' | 'warning' | 'success' | 'info' | 'help' | undefined"
                },
                "description": "Status Types\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**default (no value)** renders a default modal</li>\n<li>**error** renders an error modal</li>\n<li>**warning** renders a warning modal</li>\n<li>**success** renders a success modal</li>\n<li>**info** renders an info modal</li>\n<li>**help** renders an help modal</li>\n</ul>\n</cre8-text-passage>",
                "fieldName": "status"
              },
              {
                "name": "utilityModalTitle",
                "type": {
                  "text": "string"
                },
                "description": "Utility Modal Heading (String)",
                "fieldName": "utilityModalTitle"
              },
              {
                "name": "notDismissible",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Not dismissible modal",
                "fieldName": "notDismissible"
              },
              {
                "name": "closeButtonText",
                "type": {
                  "text": "string"
                },
                "default": "'close'",
                "description": "Close Button Text",
                "fieldName": "closeButtonText"
              },
              {
                "name": "closeButtonIcon",
                "type": {
                  "text": "string"
                },
                "default": "'close'",
                "description": "Close Button Icon",
                "fieldName": "closeButtonIcon"
              },
              {
                "name": "ariaLabel",
                "type": {
                  "text": "string"
                },
                "description": "Modal Aria Label - This is required for accessibility and provides context of the entire modal!",
                "fieldName": "ariaLabel"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-modal",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Modal",
            "declaration": {
              "name": "Cre8Modal",
              "module": "components/modal/modal.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-modal",
            "declaration": {
              "name": "Cre8Modal",
              "module": "components/modal/modal.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/loading-spinner/loading-spinner.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /* ------------------------------------ *\\ #SPINNER \\* ------------------------------------ */ @keyframes loading { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } } @keyframes spinner-circle-animation { 0%, 25% { stroke-dashoffset: 280; transform: rotate(0); } 50%, 75% { stroke-dashoffset: 75; transform: rotate(45deg); } 100% { stroke-dashoffset: 280; transform: rotate(360deg); } } :host { display: inline-block; --spinner-stroke-dasharray: 282.743px; --spinner-large-stroke-width: 10; --spinner-small-stroke-width: 14; --spinner-large-width: 4.5rem; --spinner-small-width: 1.5rem; @include cre8-typography-label-small(); } .cre8-c-spinner, .cre8-c-spinner--large { --spinner-height: var(--spinner-large-width); --spinner-width: var(--spinner-large-width); --icon-color: var(--cre8-color-content-brand); .cre8-c-spinner__icon { display: block; } .cre8-c-spinner__label { display: block; margin-top: var(--cre8-spacing-8); } } .cre8-c-spinner--small { --spinner-height: var(--spinner-small-width); --spinner-width: var(--spinner-small-width); --icon-color: var(--cre8-color-content-brand); display: flex; align-items: center; .cre8-c-spinner__label { display: inline-block; margin-left: var(--cre8-spacing-8); margin-top: 0; vertical-align: 0.35rem; } } .cre8-c-spinner--inverse { --icon-color: var(--cre8-color-content-brand-knockout); --label-color: var(--cre8-color-content-brand-knockout); // --cre8-color-content-default-knockout } .cre8-c-spinner--secondary.cre8-c-spinner--inverse.cre8-c-spinner--neutral { --icon-color: var(--cre8-color-button-secondary-neutral-inverse-content-active); --label-color: var(--cre8-color-button-secondary-neutral-inverse-content-active); // --cre8-color-content-default-knockout } .cre8-c-spinner--neutral { --icon-color: var(--cre8-color-button-secondary-neutral-content-active); } .cre8-c-spinner--primary.cre8-c-spinner--inverse { --icon-color: var(--cre8-color-button-primary-inverse-content-active); } .cre8-c-spinner--secondary.cre8-c-spinner--inverse { --icon-color: var(--cre8-color-button-secondary-inverse-content-active); } .cre8-c-spinner--tertiary.cre8-c-spinner--inverse { --icon-color: var(--cre8-color-button-tertiary-inverse-content-active); } .cre8-c-spinner__label { color: var(--label-color, var(--cre8-color-content-default)); } .cre8-c-spinner__hidden-label { display: none; } .cre8-c-spinner__icon { height: var(--spinner-height, 1em); width: var(--spinner-width, 1em); circle { fill: transparent; stroke: var(--icon-color, inherit); stroke-dasharray: var(--spinner-stroke-dasharray); stroke-linecap: round; stroke-width: var(--spinner-large-stroke-width); transform-origin: 50% 50%; } } .cre8-c-spinner__icon-small { circle { stroke-width: var(--spinner-small-stroke-width); } } .cre8-c-spinner--indeterminate .cre8-c-spinner__icon { animation: loading 2s linear 0s infinite; circle { animation-duration: 1.4s; animation-iteration-count: infinite; animation-name: spinner-circle-animation; animation-timing-function: ease-in-out; } } .cre8-c-spinner--determinate .cre8-c-spinner__icon { overflow: hidden; transform: rotate(-90deg); transform-origin: center center; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/loading-spinner/loading-spinner.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/loading-spinner/loading-spinner.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "meta",
            "default": "{ title: 'cre8 Components/LoadingSpinner', component: 'cre8-loading-spinner', argTypes: { buttonVariant: { options: ['primary','secondary','tertiary'], control: { type: 'radio', } }, determinate: { control: 'boolean' }, inverse: { defaultValue: false, control: { type: 'boolean', } }, neutral: { control: { type: 'boolean' } }, label: { defaultValue: 'Loading ...', control: 'text' }, progress: { control: { type: 'number', }, }, size: { options: ['large', 'small'], control: { type: 'inline-radio' }, }, }, args: { label: 'Loading…', size: 'large', }, render: ({ size, inverse, determinate, progress, label, neutral, buttonVariant }) => { return html`<cre8-loading-spinner size=\"${size}\" ?inverse=\"${inverse}\" ?neutral=\"${neutral}\" buttonVariant=\"${buttonVariant}\" ?determinate=\"${determinate}\" progress=\"${progress}\" label=\"${label}\" ></cre8-loading-spinner >`; }, } satisfies Meta<Props>"
          },
          {
            "kind": "variable",
            "name": "large",
            "type": {
              "text": "Story"
            },
            "default": "{}"
          },
          {
            "kind": "variable",
            "name": "small",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { size: 'small' }, }"
          },
          {
            "kind": "variable",
            "name": "neutral",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { neutral: true }, }"
          },
          {
            "kind": "variable",
            "name": "primaryButtonInverseVariant",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { buttonVariant: 'primary' }, }"
          },
          {
            "kind": "variable",
            "name": "secondaryButtonInverseVariant",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { buttonVariant: 'secondary' }, }"
          },
          {
            "kind": "variable",
            "name": "tertiaryButtonInverseVariant",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { buttonVariant: 'tertiary' }, }"
          },
          {
            "kind": "variable",
            "name": "secondaryNeutralInverse",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { buttonVariant: 'secondary', neutral: true, inverse: true }, }"
          },
          {
            "kind": "variable",
            "name": "determinate",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { determinate: true, progress: 75, }, }"
          },
          {
            "kind": "variable",
            "name": "indeterminate",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { determinate: false, }, }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "meta",
              "module": "components/loading-spinner/loading-spinner.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "large",
            "declaration": {
              "name": "large",
              "module": "components/loading-spinner/loading-spinner.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "small",
            "declaration": {
              "name": "small",
              "module": "components/loading-spinner/loading-spinner.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "neutral",
            "declaration": {
              "name": "neutral",
              "module": "components/loading-spinner/loading-spinner.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "primaryButtonInverseVariant",
            "declaration": {
              "name": "primaryButtonInverseVariant",
              "module": "components/loading-spinner/loading-spinner.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "secondaryButtonInverseVariant",
            "declaration": {
              "name": "secondaryButtonInverseVariant",
              "module": "components/loading-spinner/loading-spinner.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "tertiaryButtonInverseVariant",
            "declaration": {
              "name": "tertiaryButtonInverseVariant",
              "module": "components/loading-spinner/loading-spinner.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "secondaryNeutralInverse",
            "declaration": {
              "name": "secondaryNeutralInverse",
              "module": "components/loading-spinner/loading-spinner.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "determinate",
            "declaration": {
              "name": "determinate",
              "module": "components/loading-spinner/loading-spinner.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "indeterminate",
            "declaration": {
              "name": "indeterminate",
              "module": "components/loading-spinner/loading-spinner.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/loading-spinner/loading-spinner.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "A loading spinner notifies the user that their request is being processed while the front end is retrieving data\nor performing slow computations.\n\nProviding visibility of a system's status is one of the most important rules of UI design. When the user has to\nguess or assume that the system is responding to their input, they may send a command such as submit multiple\ntimes, while also being anxious that the application is frozen or not working.\n\nWhile it is most ideal to improve system performance such that there is no perceptible delay, in some cases this\nis not possible. In these cases, the immediate response should be a progress indicator to give a visual indication\nthat their command was received and that the application is working.\n\nThe length of time for the system response is a good general guideline for which progress indicator to use.\n\n## Determinable vs indeterminate progress\n\nA progress meter provides feedback that the system is working and gives the user an indication of how much time\nthey will wait. This indicator should be used when the system response time is longer and determinable. See\nProgressMeter component for further examples and accessibility considerations.\n\n## How to Use\n\nThe loading-spinner component can be used to indicate loading state on the component level all the way up to the\npage level. There are two loading styles: determinate (loading progress represents percentage of total load time)\nand indeterminate (a spinning animation that persists while loading continues)\n\n1. Choose determinate or indeterminate. UX best practices leans more towards recommending the indeterminate\nprogress indicator if load time is unknown, while determinate is less user friendly unless the label indicates\nthe percentage loaded as well.\n2. Choose a size and use it according to context, guidance should be given by your design or content team.\n3. A common label to use is `Loading…`, guidance should be given by your design content team.\n4. If you choose to use the determinate loader then you must also control the progress attribute's value which\ncontrols the percentage of the circle that shows (values 0-100 accepted);\n5. For dark backgrounds, add the `inverse` attribute to the `<cre8-loading-spinner>` tag.\n6. For accessibility reasons, always include a label input unless explicitly informed to do otherwise by design or\naccessibility teams.\n7. The lg variant is usually suitable for containers or block level loading placeholders while the sm size is\nmeant for more inline loading states.",
            "name": "Cre8LoadingSpinner",
            "members": [
              {
                "kind": "field",
                "name": "determinate",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Mode of the spinner, defaults to indeterminate.\nIf true, renders a standard progress indicator, fills via the progress property from 0% to 100%.\nIf false or undefined, renders indeterminate spinner which animates in a spinning motion until component is\ndestroyed.",
                "attribute": "determinate",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "inverse",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverse property used for dark backgrounds.",
                "attribute": "inverse",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "neutral",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Neutral property used for secondary neutral loading button.",
                "attribute": "neutral",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "buttonVariant",
                "type": {
                  "text": "'primary' | 'secondary' | 'tertiary' | undefined"
                },
                "description": "Property that specifies which button variant is using the loading spinner",
                "attribute": "buttonVariant"
              },
              {
                "kind": "field",
                "name": "label",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Label to show along with progress indicator.\nThis is required to meet accessibility requirements for this component.",
                "attribute": "label"
              },
              {
                "kind": "field",
                "name": "progress",
                "type": {
                  "text": "number"
                },
                "default": "0",
                "description": "Progress to display, between 0 and 100. Requires determinate property to be set to true.",
                "attribute": "progress",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "size",
                "type": {
                  "text": "'large' | 'small' | undefined"
                },
                "default": "'large'",
                "description": "Size of the progress indicator and position of the label, if a label has been defined using the label property.\n- **large** renders a large progress indicator at 72px in width/height with the label below.\n- **small** renders a small progress indicator at 24px in width/height with the label to the right.",
                "attribute": "size"
              },
              {
                "kind": "field",
                "name": "labelId",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "default": "`cre8-spinner-${randomId}`"
              },
              {
                "kind": "method",
                "name": "renderDeterminateSpinner",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "renderInDeterminateSpinner",
                "privacy": "private"
              }
            ],
            "attributes": [
              {
                "name": "determinate",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Mode of the spinner, defaults to indeterminate.\nIf true, renders a standard progress indicator, fills via the progress property from 0% to 100%.\nIf false or undefined, renders indeterminate spinner which animates in a spinning motion until component is\ndestroyed.",
                "fieldName": "determinate"
              },
              {
                "name": "inverse",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverse property used for dark backgrounds.",
                "fieldName": "inverse"
              },
              {
                "name": "neutral",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Neutral property used for secondary neutral loading button.",
                "fieldName": "neutral"
              },
              {
                "name": "buttonVariant",
                "type": {
                  "text": "'primary' | 'secondary' | 'tertiary' | undefined"
                },
                "description": "Property that specifies which button variant is using the loading spinner",
                "fieldName": "buttonVariant"
              },
              {
                "name": "label",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Label to show along with progress indicator.\nThis is required to meet accessibility requirements for this component.",
                "fieldName": "label"
              },
              {
                "name": "progress",
                "type": {
                  "text": "number"
                },
                "default": "0",
                "description": "Progress to display, between 0 and 100. Requires determinate property to be set to true.",
                "fieldName": "progress"
              },
              {
                "name": "size",
                "type": {
                  "text": "'large' | 'small' | undefined"
                },
                "default": "'large'",
                "description": "Size of the progress indicator and position of the label, if a label has been defined using the label property.\n- **large** renders a large progress indicator at 72px in width/height with the label below.\n- **small** renders a small progress indicator at 24px in width/height with the label to the right.",
                "fieldName": "size"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-loading-spinner",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8LoadingSpinner",
            "declaration": {
              "name": "Cre8LoadingSpinner",
              "module": "components/loading-spinner/loading-spinner.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-loading-spinner",
            "declaration": {
              "name": "Cre8LoadingSpinner",
              "module": "components/loading-spinner/loading-spinner.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8LoadingSpinner",
              "module": "components/loading-spinner/loading-spinner.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/multi-select/multi-select.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import \"../../design-tokens/core/scss/theming/component\"; :host { display: block; } .cre8-c-multi-select { position: relative; } /** * Label */ .cre8-c-multi-select__label { @include label-styles; } /** * Body * 1) The div that contains the input and icons */ .cre8-c-multi-select__body { display: flex; align-items: center; justify-content: space-between; position: relative; @include input-styles; padding: var(--cre8-spacing-8); padding-inline-end: size(5.5); min-width: 240px; cursor: pointer; min-height: size(6); height: fit-content; .cre8-is-disabled & { box-shadow: none; background-color: var(--cre8-color-bg-disabled); border-color: var(--cre8-color-border-disabled); cursor: not-allowed; outline: none; &:hover, &:focus, &:active, &:focus-visible { outline: none; background-color: var(--cre8-color-bg-disabled); border-color: var(--cre8-color-border-disabled); color: var(--cre8-color-content-disabled); } .cre8-c-multi-select__content { border-color: var(--cre8-color-border-disabled); } } } .cre8-c-multi-select__content { display: flex; min-height: 30px; width: 100%; border-right: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); padding-right: size(5.5); } .cre8-c-multi-select__tag-wrapper { list-style-type: none; margin: 0; padding: 0; display: flex; flex-wrap: wrap; height: 100%; gap: size(0.5); } .cre8-c-multi-select__icons-wrapper { display: flex; justify-content: end; margin-right: -36px; margin-left: -48px; gap: size(3); min-width: 96px; button { background-color: inherit; border: none; padding: none; .cre8-is-disabled & { cursor: not-allowed; } } } .cre8-c-multi-select__clear_icon { .cre8-c-multi-select--no-clear-icon & { display: none; } } /** * Select Icon * 1) The icons within the body container positioned absolutely over the input */ cre8-icon { display: flex; pointer-events: none; color: var(--cre8-color-button-tertiary-content); .cre8-is-disabled & { color: var(--cre8-color-border-disabled); } } .cre8-c-multi-select__dropdown { background-color: var(--cre8-color-bg-default); border: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); box-shadow: var(--cre8-shadow-default); border-radius: var(--cre8-border-radius-default); flex-direction: column; left: 0; min-width: 100%; position: absolute; top: 100%; white-space: nowrap; margin-top: var(--cre8-spacing-4); margin-left: 0; padding: var(--cre8-spacing-8); ul { list-style-type: none; padding: 0; margin: 0; } li { @include cre8-typography-body-default; background-color: var(--cre8-color-bg-default); border: var(--cre8-border-width-focus) var(--cre8-border-style-default) var(--cre8-color-border-transparent); border-radius: var(--cre8-border-radius-default); color: var(--cre8-color-content-default); width: 100%; cursor: pointer; margin: var(--cre8-spacing-0); padding: var(--cre8-spacing-8) var(--cre8-spacing-8); text-align: left; &:active, &:hover, &:focus { background-color: var(--cre8-color-bg-brand-hover); color: var(--cre8-color-content-default); outline: var(--cre8-border-width-none); border: var(--cre8-border-width-focus) var(--cre8-border-style-default) var(--cre8-color-border-active-outline); } } } /** * Select field notes */ .cre8-c-multi-select__field-note, .cre8-c-multi-select__field-note-success, .cre8-c-multi-select__field-note-error { flex-basis: 100%; }`"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/multi-select/multi-select.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/multi-select/multi-select.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "meta",
            "type": {
              "text": "object"
            },
            "default": "{ title: 'In Development/MultiSelect', component: 'cre8-multi-select', render: (args) => html`<cre8-multi-select ${spread(args)} .items=${args.items} .preselectedItems=${args.preselectedItems} ></cre8-multi-select>`, parameters: { status: { type: 'inProgress' }, actions: { handles: ['selectedItemsChange'], }, docs: { story: { height: '350px', }, }, }, decorators: [withActions], argTypes: {}, args: { id: 'selectId', items: ['Bagel', 'Burger', 'Boat', 'Beefstick', 'Bacon'], label: 'Choose your favorite food:', }, }"
          },
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{ args: {} }"
          },
          {
            "kind": "function",
            "name": "Wrapping",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "variable",
            "name": "PreSelected",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'PreSelected', items: ['Car', 'Crumbs', 'Coco', 'Creampuff', 'Clock'], preselectedItems: ['Car', 'Crumbs'], }, }"
          },
          {
            "kind": "variable",
            "name": "Disabled",
            "type": {
              "text": "object"
            },
            "default": "{ args: { disabled: true, label: 'Disabled', } }"
          },
          {
            "kind": "variable",
            "name": "DisabledWithTags",
            "type": {
              "text": "object"
            },
            "default": "{ args: { disabled: true, label: 'Disabled', preselectedItems: ['Brisket'], } }"
          },
          {
            "kind": "variable",
            "name": "Error",
            "type": {
              "text": "object"
            },
            "default": "{ args: { errorNote: \"Short, clear error message.\", isError: true, label: 'Error', items: ['Doll', 'Dice', 'Doctor', 'Dinger', 'Derby'], } }"
          },
          {
            "kind": "variable",
            "name": "Success",
            "type": {
              "text": "object"
            },
            "default": "{ args: { isSuccess: true, successNote: \"Short, clear success message\", label: 'Success', items: ['Emu', 'Eggplant', 'Envy', 'Essence'], preselectedItems: ['Eevee'], } }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "meta",
              "module": "components/multi-select/multi-select.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/multi-select/multi-select.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Wrapping",
            "declaration": {
              "name": "Wrapping",
              "module": "components/multi-select/multi-select.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PreSelected",
            "declaration": {
              "name": "PreSelected",
              "module": "components/multi-select/multi-select.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Disabled",
            "declaration": {
              "name": "Disabled",
              "module": "components/multi-select/multi-select.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "DisabledWithTags",
            "declaration": {
              "name": "DisabledWithTags",
              "module": "components/multi-select/multi-select.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Error",
            "declaration": {
              "name": "Error",
              "module": "components/multi-select/multi-select.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Success",
            "declaration": {
              "name": "Success",
              "module": "components/multi-select/multi-select.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/multi-select/multi-select.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "Multiselect is used when multiple options can be chosen from a static dropdown\nThis component has a list of items in the dropdown that can be added as \"selected tags\"\nThe checkbox will always reflect the selected nature of the item and is not removed\nfrom the dropdown when clicked, the tags will be added and removed based on their state.\n\nEvent `selectedItemsChange` emits whenever a tag is added or remove from the list and the\ncurrent list after the change is given in the detail.",
            "name": "Cre8MultiSelect",
            "members": [
              {
                "kind": "field",
                "name": "items",
                "type": {
                  "text": "string[]"
                },
                "default": "[]",
                "description": "The list of string items the user can choose in the dropdown\n\nNote: For passing props containing arrays and complex types, you should pass the props using a\nperiod in from of the prop like so: `.items=\"[]\"`\n(this is only needed for Web Components and not the React version)",
                "attribute": "items"
              },
              {
                "kind": "field",
                "name": "selectedTagItems",
                "type": {
                  "text": "string[]"
                },
                "default": "[]"
              },
              {
                "kind": "field",
                "name": "preselectedItems",
                "type": {
                  "text": "string[]"
                },
                "description": "The list of string items that are initially in the selected list of tags\nNote: This list MUST be a subset of the array of items to function.\ni.e. if items=['cat', 'dog', 'bird'], preselectedItems=['cat'] is valid\nwhile preselectedItems=['cat', 'goat'] is not and will break the component.\n\nNote: For passing props containing arrays and complex types, you should pass the props using a\nperiod in from of the prop like so: `.items=\"[]\"`\n(this is only needed for Web Components and not the React version)",
                "attribute": "preselectedItems"
              },
              {
                "kind": "field",
                "name": "dropdownOpen",
                "type": {
                  "text": "boolean"
                },
                "default": "false"
              },
              {
                "kind": "field",
                "name": "label",
                "type": {
                  "text": "string"
                },
                "description": "The required label that appears above the multiselect",
                "attribute": "label"
              },
              {
                "kind": "field",
                "name": "fieldId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The unique id of the select",
                "attribute": "fieldId"
              },
              {
                "kind": "field",
                "name": "fieldNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Optional field note text can be added to provide additional field guidance.",
                "attribute": "fieldNote"
              },
              {
                "kind": "field",
                "name": "ariaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Used to connect the field note in text field to the text menu for accessibility",
                "attribute": "ariaDescribedBy"
              },
              {
                "kind": "field",
                "name": "validationAriaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Additional aria-describedby connection to id for additional success and error notes to be accessible",
                "attribute": "validationAriaDescribedBy"
              },
              {
                "kind": "field",
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The disabled attribute on the select",
                "attribute": "disabled",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "isError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent an error state",
                "attribute": "isError",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "errorNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The error field note that appears below the default field note",
                "attribute": "errorNote"
              },
              {
                "kind": "field",
                "name": "isSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent a success state",
                "attribute": "isSuccess",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "successNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The success field note that appears below the default field note",
                "attribute": "successNote"
              },
              {
                "kind": "method",
                "name": "_renderDropdownItems",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_renderSelectedTags",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "setPreselectedItemsinDropdown",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "clearAllTags",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "emitSelectedItems",
                "privacy": "private",
                "return": {
                  "type": {
                    "text": "void"
                  }
                }
              },
              {
                "kind": "method",
                "name": "toggleDropDown",
                "privacy": "private",
                "return": {
                  "type": {
                    "text": "void"
                  }
                }
              },
              {
                "kind": "method",
                "name": "_handleOnClick",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "event",
                    "optional": true,
                    "type": {
                      "text": "MouseEvent"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "_handleListItemClick",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "MouseEvent"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "text": "number"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "_handleDropdownItemInput",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "item",
                    "type": {
                      "text": "string"
                    }
                  },
                  {
                    "name": "e",
                    "type": {
                      "text": "InputEvent"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "_handleRemoveTagClick",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "item",
                    "type": {
                      "text": "string"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "dropdownArrowClick",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_handleButtonToListKeydown",
                "privacy": "private",
                "return": {
                  "type": {
                    "text": "void"
                  }
                },
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "KeyboardEvent"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "_handleListKeydown",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "KeyboardEvent"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "_initializeAria",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_fieldNoteAria",
                "privacy": "private",
                "description": "Aria describedby string based on field notes and error/success notes\n1) If both validationAriaDescribedBy (error/success note) and field note exists,\nrender both in the input's `aria-describedby` attribute\n2) Otherwise, if only validationAriaDescribedBy exists, then render only that as\nthe `aria-describedby` attribute (input without field note initially, but then error/success is added).\n3) Otherwise, render only the `ariaDescribedBy` property (field note only)"
              },
              {
                "kind": "method",
                "name": "_renderSuccessErrorFieldNote",
                "privacy": "private",
                "description": "Render the success or error field notes\n1. If there is a successNote, then return the field note with the success message and state.\n2. If there is a errorNote, then return the field note with the error message and state."
              }
            ],
            "attributes": [
              {
                "name": "items",
                "type": {
                  "text": "string[]"
                },
                "default": "[]",
                "description": "The list of string items the user can choose in the dropdown\n\nNote: For passing props containing arrays and complex types, you should pass the props using a\nperiod in from of the prop like so: `.items=\"[]\"`\n(this is only needed for Web Components and not the React version)",
                "fieldName": "items",
                "attribute": "items"
              },
              {
                "name": "preselectedItems",
                "type": {
                  "text": "string[]"
                },
                "description": "The list of string items that are initially in the selected list of tags\nNote: This list MUST be a subset of the array of items to function.\ni.e. if items=['cat', 'dog', 'bird'], preselectedItems=['cat'] is valid\nwhile preselectedItems=['cat', 'goat'] is not and will break the component.\n\nNote: For passing props containing arrays and complex types, you should pass the props using a\nperiod in from of the prop like so: `.items=\"[]\"`\n(this is only needed for Web Components and not the React version)",
                "fieldName": "preselectedItems",
                "attribute": "preselectedItems"
              },
              {
                "name": "label",
                "type": {
                  "text": "string"
                },
                "description": "The required label that appears above the multiselect",
                "fieldName": "label",
                "attribute": "label"
              },
              {
                "name": "fieldId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The unique id of the select",
                "fieldName": "fieldId",
                "attribute": "fieldId"
              },
              {
                "name": "fieldNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Optional field note text can be added to provide additional field guidance.",
                "fieldName": "fieldNote",
                "attribute": "fieldNote"
              },
              {
                "name": "ariaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Used to connect the field note in text field to the text menu for accessibility",
                "fieldName": "ariaDescribedBy",
                "attribute": "ariaDescribedBy"
              },
              {
                "name": "validationAriaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Additional aria-describedby connection to id for additional success and error notes to be accessible",
                "fieldName": "validationAriaDescribedBy",
                "attribute": "validationAriaDescribedBy"
              },
              {
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The disabled attribute on the select",
                "fieldName": "disabled",
                "attribute": "disabled"
              },
              {
                "name": "isError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent an error state",
                "fieldName": "isError",
                "attribute": "isError"
              },
              {
                "name": "errorNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The error field note that appears below the default field note",
                "fieldName": "errorNote",
                "attribute": "errorNote"
              },
              {
                "name": "isSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent a success state",
                "fieldName": "isSuccess",
                "attribute": "isSuccess"
              },
              {
                "name": "successNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The success field note that appears below the default field note",
                "fieldName": "successNote",
                "attribute": "successNote"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-multi-select",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8MultiSelect",
            "declaration": {
              "name": "Cre8MultiSelect",
              "module": "components/multi-select/multi-select.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-multi-select",
            "declaration": {
              "name": "Cre8MultiSelect",
              "module": "components/multi-select/multi-select.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8MultiSelect",
              "module": "components/multi-select/multi-select.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/page-header/page-header.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * 1) Headline of a page with an h1 heading and optional description */ .cre8-c-page-header { margin-bottom: size(4); } /** * Page header title */ .cre8-c-page-header__title { display: inline; margin: 0; @include cre8-typography-display-default(); } /** * Page header title after * 1) Container placed after page header title if something like a badge needs to be placed there */ .cre8-c-page-header__title-after { display: inline-block; position: relative; bottom: size(1.25); margin-left: size(2); } /** * Page header description */ .cre8-c-page-header__description { @include cre8-typography-body-default; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/page-header/page-header.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/page-header/page-header.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "WithTitcre8ter"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/page-header/page-header.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/page-header/page-header.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "WithTitcre8ter",
            "declaration": {
              "name": "WithTitcre8ter",
              "module": "components/page-header/page-header.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/page-header/page-header.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8PageHeader",
            "slots": [
              {
                "description": "The page header content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "heading",
                "type": {
                  "text": "string"
                },
                "default": "'Page header title'",
                "description": "Page header title",
                "attribute": "heading"
              }
            ],
            "attributes": [
              {
                "name": "heading",
                "type": {
                  "text": "string"
                },
                "default": "'Page header title'",
                "description": "Page header title",
                "fieldName": "heading"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-page-header",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8PageHeader",
            "declaration": {
              "name": "Cre8PageHeader",
              "module": "components/page-header/page-header.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-page-header",
            "declaration": {
              "name": "Cre8PageHeader",
              "module": "components/page-header/page-header.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8PageHeader",
              "module": "components/page-header/page-header.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/nav-container/nav-container.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * 1) Wrapper around contents that get placed into a toggleable * menu on smaller screens (usually primary nav and maybe other contents) */ :host { position: absolute; left: 0; top: 100%; width: 100%; height: 100vh; background: var(--cre8-nav-container-background, var(--cre8-color-header-submenu-bg-default)); overflow: auto; @media all and (min-width:$cre8-breakpoint-lg) { position: static; width: auto; height: auto; background: none; } } /** * Actual nav container component */ .cre8-c-nav-container { display: flex; flex-direction: column; justify-content: space-between; @media all and (min-width:$cre8-breakpoint-lg) { flex-direction: row; } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/nav-container/nav-container.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/nav-container/nav-container.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/nav-container/nav-container.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/nav-container/nav-container.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/nav-container/nav-container.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8NavContainer",
            "slots": [
              {
                "description": "The navigation container content",
                "name": ""
              }
            ],
            "members": [],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-nav-container",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8NavContainer",
            "declaration": {
              "name": "Cre8NavContainer",
              "module": "components/nav-container/nav-container.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-nav-container",
            "declaration": {
              "name": "Cre8NavContainer",
              "module": "components/nav-container/nav-container.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8NavContainer",
              "module": "components/nav-container/nav-container.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/pagination/pagination.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css` @import '../../design-tokens/core/scss/theming/component'; :host { display: var(--pagination-display, inline-flex); justify-content: var(--pagination-justify-content, center); align-items: var(--pagination-align-items, center); --cre8-button-width: 2rem; --cre8-button-height: 2rem; --cre8-button-min-width: 2rem; --cre8-button-min-height: 2rem; --cre8-button-padding-horizontal-small: 0px; --cre8-button-padding-vertical-small: 0px; } *, ::slotted(*), *:before, *:after { box-sizing: border-box; width: auto; height: auto; display: flex; justify-content: center; --cre8-button-margin-right: var(--cre8-spacing-2); --cre8-button-margin-left: var(--cre8-spacing-2); margin-right: var(--cre8-button-margin-right); margin-left: var(--cre8-button-margin-left); align-items: center; } [aria-current='true'], #current{ --cre8-color-button-tertiary-bg: var( --cre8-color-bg-strong); --cre8-color-button-tertiary-content: var(--cre8-color-content-knockout); --cre8-color-button-tertiary-border: var(--cre8-color-border-transparent); &:hover, &:active{ border-radius: var(--cre8-border-radius-button); --cre8-color-button-tertiary-bg-hover: var(--cre8-color-bg-strong); --cre8-color-button-tertiary-content-hover: var(--cre8-color-content-knockout); &:focus, &:focus-visible, &:focus-within{ border-radius: var(--cre8-border-radius-button); --cre8-color-button-tertiary-bg-active: var(--cre8-color-bg-strong); --cre8-color-button-tertiary-content-active: var(--cre8-color-content-knockout); @includefocus(); } } } .cre8-c-pagination--compact, .cre8-c-pagination--icon-only, .cre8-c-pagination--range { --cre8-button-width: 3rem; --cre8-button-height: 3rem; --cre8-button-min-width: 3rem; --cre8-button-min-height: 3rem; } .cre8-c-pagionation__icon { fill: var(--cre8-color-button-tertiary-content); } .cre8-c-pagination__icon:has(cre8-button:disabled){ color: var(--cre8-color-button-tertiary-content-disabled); } .cre8-c-pagination [aria-disabled=\"true\"]{ fill: var(--cre8-color-content-default); --cre8-color-button-tertiary-content: var(--cre8-color-content-default); } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/pagination/pagination.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/pagination/pagination.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "meta",
            "type": {
              "text": "Meta"
            },
            "default": "{ title: 'cre8 Components/Pagination', component: 'cre8-pagination', args: { currentPage: 1, totalResults: 300, pageSize: 10, visiblePages: 5, display: 'default' }, argTypes: { display: { options: ['compact', 'icon-only','range', 'default'], defaultValue: 'default', control: { type: 'select' } }, hideLastAndFirstButtons: { control: { type: 'boolean' } } }, parameters: { status: { type: 'inProgress' }, actions: { handles: ['pagination.click','button.handleOnBlur', 'pagination.keydown'], }, decorators: [withActions], }, render: ({ currentPage, hideLastAndFirstButtons, totalResults, pageSize, display, visiblePages }) => html` <cre8-pagination currentPage=\"${currentPage}\" totalResults=\"${totalResults}\" pageSize=\"${pageSize}\" visiblePages=\"${visiblePages}\" display=\"${display}\" ?hideLastAndFirstButtons=${hideLastAndFirstButtons} @pagination.click=\"${(e: Event) => console.log(e)}\" @pagination.keydown=\"${(e: Event) => console.log(e)}\" ></cre8-pagination> `}"
          },
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { display: 'default', currentPage: 1, totalResults: 300, pageSize: 25 } }"
          },
          {
            "kind": "variable",
            "name": "Compact",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { display: 'compact', currentPage: 1, totalResults: 43, pageSize: 10, } }"
          },
          {
            "kind": "variable",
            "name": "IconOnly",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { display: 'icon-only' } }"
          },
          {
            "kind": "variable",
            "name": "HideFirstAndLastButtons",
            "type": {
              "text": "Story"
            },
            "default": "{ args: { display: 'default', currentPage: 1, totalResults: 300, pageSize: 25, hideLastAndFirstButtons: true } }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "meta",
              "module": "components/pagination/pagination.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/pagination/pagination.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Compact",
            "declaration": {
              "name": "Compact",
              "module": "components/pagination/pagination.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconOnly",
            "declaration": {
              "name": "IconOnly",
              "module": "components/pagination/pagination.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "HideFirstAndLastButtons",
            "declaration": {
              "name": "HideFirstAndLastButtons",
              "module": "components/pagination/pagination.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/pagination/pagination.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The Pagination component is used to split up a large amount of results\n by showing only a certain amount on each page. You can cycle through\n the pages using Page Numbers, Next and Previous Buttons, or optional\n First Page and Last Page Buttons. This component is also used by Table\n to cycle through rows of results. Pagination has 3 display options:\n\n**default**:  Can contain up to seven Page Numbers (ellipses included)\n at a time flanked by Next and Previous Buttons. When there are more than\n seven pages, numbers start getting replaced by ellipses. Use this option\n when you have a lot of horizontal space in a layout. It should not be used\n for mobile web layouts since its buttons are smaller than the minimum touch target of 44px.\n The component has built in responsivity to mobile page size so you dont have tohandle this\n seperately\n\n\n**compact** : Best used as a summary of where you are among pages or table rows flanked by\nPrevious and Next Buttons. Use this option when you have limited horizontal space but still\nneed to show where users are among results. Great for mobile layouts.\n\n\n**icon-only** : Use this option in very tight spaces when it’s not required to show users\nwhere they are among results. Great for mobile layouts.\n\n\n## HOW TO USE\n\nSelect an option from the “display” dropdown depending on layout width\nSelect where your current page is from the “Page” dropdown\nTo show less pages when using Full Numbers, use the \"visiblePages” toggles\nTo hide the First Page and Last Page Buttons, turn on the “hideFirstLastButton” toggle\nTo change the states of page numbers or buttons, interact with the buttond to invoke each “State”\nWhen using Compact Numbers, you can choose between “compact” and “icon-only” formats\n\n\n## ACCESSIBILITY NOTE\n\nTo best orient people using screen readers, push focus to the top of\nthe list of results after any of the pagination buttons have been triggered,\n**except for the currently selected one**. Focus target could be a visual results heading,\nor the top heading of the results container of the page selected\nvia a programmatic selector, e.g. < section id=“results” aria-label=\"results-section\" > or\n< div role= “group” aria-label=“results” >.",
            "name": "Cre8Pagination",
            "cssProperties": [
              {
                "description": "controls the display css property",
                "name": "--pagination-display"
              },
              {
                "description": "controls horizontal alignment of pagination",
                "name": "--pagination-justify-content"
              },
              {
                "description": "controls vertical alignment of pagination",
                "name": "--pagination-align-items"
              }
            ],
            "cssParts": [
              {
                "description": "distinguishes the page buttons from the icon buttons",
                "name": "icon"
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "elementDefinitions",
                "type": {
                  "text": "object"
                },
                "static": true,
                "default": "{ 'cre8-button': Cre8Button, }"
              },
              {
                "kind": "field",
                "name": "_currentPage",
                "type": {
                  "text": "number"
                },
                "default": "99"
              },
              {
                "kind": "field",
                "name": "totalResults",
                "type": {
                  "text": "number"
                },
                "description": "Input the total number of elements are returned from consuming app e.g. search results",
                "attribute": "totalResults",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "pagesize",
                "description": "how many elements will displayVariant per page, indicated by business to typically be 20",
                "attribute": "pagesize",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "_pageSize",
                "type": {
                  "text": "number"
                },
                "default": "10"
              },
              {
                "kind": "field",
                "name": "visiblePages",
                "type": {
                  "text": "number | undefined"
                },
                "default": "5",
                "description": "Controls how many page buttons are displayVarianted on the page\nat once, if container size permits. recommended max = 5 pages",
                "attribute": "visiblePages",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "display",
                "type": {
                  "text": "'compact' | 'icon-only'| 'default' | undefined"
                },
                "description": "(optional) prop that allows for a compact and icon-only variant both\nfor mobile screen-sizes and for use in certain contexts as guided by design,\nthe component size will show 'default' in the absence of a value on desktop and\n'compact' on smaller views.",
                "attribute": "display",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "windowWidth",
                "type": {
                  "text": "number"
                }
              },
              {
                "kind": "field",
                "name": "buttons",
                "type": {
                  "text": "typeof Cre8Button[]"
                }
              },
              {
                "kind": "field",
                "name": "hideLastAndFirstButtons",
                "type": {
                  "text": "boolean | undefined"
                },
                "attribute": "hideLastAndFirstButtons",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "currentPage",
                "attribute": "currentPage",
                "reflects": true
              },
              {
                "kind": "method",
                "name": "connectedCallBack"
              },
              {
                "kind": "field",
                "name": "maxVisiblePages",
                "readonly": true
              },
              {
                "kind": "field",
                "name": "totalPages",
                "type": {
                  "text": "number"
                },
                "privacy": "private",
                "readonly": true
              },
              {
                "kind": "field",
                "name": "hasNoPreviousPage",
                "privacy": "private",
                "readonly": true
              },
              {
                "kind": "field",
                "name": "hasNoNextPage",
                "privacy": "private",
                "readonly": true
              },
              {
                "kind": "method",
                "name": "_onHandleResize",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "handleResize"
              },
              {
                "kind": "field",
                "name": "pageRange",
                "type": {
                  "text": "number[]"
                },
                "privacy": "protected",
                "readonly": true
              },
              {
                "kind": "method",
                "name": "displayTypes",
                "return": {
                  "type": {
                    "text": "HTMLTemplateResult"
                  }
                }
              },
              {
                "kind": "field",
                "name": "_handleKeydown",
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "_goToPage",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "goToPage",
                "privacy": "public",
                "parameters": [
                  {
                    "name": "page",
                    "type": {
                      "text": "number"
                    }
                  },
                  {
                    "name": "buttonName",
                    "optional": true,
                    "type": {
                      "text": "string"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "handleKeydown",
                "privacy": "public",
                "parameters": [
                  {
                    "name": "page",
                    "type": {
                      "text": "number"
                    }
                  },
                  {
                    "name": "buttonName",
                    "optional": true,
                    "type": {
                      "text": "string"
                    }
                  }
                ]
              }
            ],
            "attributes": [
              {
                "name": "number",
                "type": {
                  "text": "number | undefined"
                },
                "description": "Controls how many page buttons are displayVarianted on the page\nat once, if container size permits. recommended max = 5 pages",
                "fieldName": "visiblePages",
                "default": "5"
              },
              {
                "name": "'compact'",
                "type": {
                  "text": "'compact' | 'icon-only'| 'default' | undefined"
                },
                "description": "| 'icon-only' | 'default'",
                "fieldName": "display"
              },
              {
                "name": "totalResults",
                "type": {
                  "text": "number"
                },
                "description": "Input the total number of elements are returned from consuming app e.g. search results",
                "attribute": "number",
                "fieldName": "totalResults"
              },
              {
                "name": "pagesize",
                "description": "how many elements will displayVariant per page, indicated by business to typically be 20",
                "attribute": "number",
                "fieldName": "pagesize"
              },
              {
                "name": "visiblePages",
                "type": {
                  "text": "number | undefined"
                },
                "default": "5",
                "description": "Controls how many page buttons are displayVarianted on the page\nat once, if container size permits. recommended max = 5 pages",
                "attribute": "number",
                "fieldName": "visiblePages"
              },
              {
                "name": "display",
                "type": {
                  "text": "'compact' | 'icon-only'| 'default' | undefined"
                },
                "description": "(optional) prop that allows for a compact and icon-only variant both\nfor mobile screen-sizes and for use in certain contexts as guided by design,\nthe component size will show 'default' in the absence of a value on desktop and\n'compact' on smaller views.",
                "attribute": "'compact'",
                "fieldName": "display"
              },
              {
                "name": "hideLastAndFirstButtons",
                "type": {
                  "text": "boolean | undefined"
                },
                "fieldName": "hideLastAndFirstButtons"
              },
              {
                "name": "currentPage",
                "fieldName": "currentPage"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-pagination",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Pagination",
            "declaration": {
              "name": "Cre8Pagination",
              "module": "components/pagination/pagination.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-pagination",
            "declaration": {
              "name": "Cre8Pagination",
              "module": "components/pagination/pagination.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/percent-bar/percent-bar.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #PERCENT-BAR /** * Percent Bar Controls */ .cre8-c-percent-bar__controls { display: flex; flex-direction: row; justify-content: space-between; align-items: center; min-height: size(4.5); } .cre8-c-percent-bar__button { size: var(--cre8-icon-size-default); } .cre8-c-percent-bar__text-passage { color: var(--cre8-color-content-default); @include cre8-typography-body-small(); } .cre8-c-percent-bar__p { width: fit-content; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/percent-bar/percent-bar.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/percent-bar/percent-bar.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "meta",
            "type": {
              "text": "object"
            },
            "default": "{ title: 'In Development/Percent Bar', component: 'cre8-percent-bar', render: (args) => html`<cre8-percent-bar ${spread(args)}></cre8-percent-bar>`, parameters: { status: { type: 'inProgress' }, actions: { handles: ['dropdown-item-selected'], }, }, argTypes: { max: { control: 'number' }, value: { control: 'number' }, }, }"
          },
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{ args: { value: '2', max: '10', }, }"
          },
          {
            "kind": "variable",
            "name": "tenPercent",
            "type": {
              "text": "object"
            },
            "default": "{ args: { value: '1', max: '10', }, }"
          },
          {
            "kind": "variable",
            "name": "thirtyThreePercent",
            "type": {
              "text": "object"
            },
            "default": "{ args: { value: '1', max: '3', }, }"
          },
          {
            "kind": "variable",
            "name": "fiftyPercent",
            "type": {
              "text": "object"
            },
            "default": "{ args: { value: '5', max: '10', }, }"
          },
          {
            "kind": "variable",
            "name": "oneHundredPercent",
            "type": {
              "text": "object"
            },
            "default": "{ args: { value: '10', max: '10', }, }"
          },
          {
            "kind": "variable",
            "name": "disableActionLeft",
            "type": {
              "text": "object"
            },
            "default": "{ args: { value: '2', max: '10', disableActionLeft: true, }, }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "meta",
              "module": "components/percent-bar/percent-bar.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/percent-bar/percent-bar.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "tenPercent",
            "declaration": {
              "name": "tenPercent",
              "module": "components/percent-bar/percent-bar.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "thirtyThreePercent",
            "declaration": {
              "name": "thirtyThreePercent",
              "module": "components/percent-bar/percent-bar.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "fiftyPercent",
            "declaration": {
              "name": "fiftyPercent",
              "module": "components/percent-bar/percent-bar.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "oneHundredPercent",
            "declaration": {
              "name": "oneHundredPercent",
              "module": "components/percent-bar/percent-bar.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "disableActionLeft",
            "declaration": {
              "name": "disableActionLeft",
              "module": "components/percent-bar/percent-bar.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/percent-bar/percent-bar.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The percent bar visually indicates a user's current progress and has a few features: a basic display bar with\na percentage, an actionable icon that allows a user to revisit a prior step and an actionable link that\nallows a user save their progress before exiting.",
            "name": "Cre8PercentBar",
            "members": [
              {
                "kind": "field",
                "name": "value",
                "type": {
                  "text": "number"
                },
                "attribute": "value"
              },
              {
                "kind": "field",
                "name": "max",
                "type": {
                  "text": "number"
                },
                "attribute": "max"
              },
              {
                "kind": "field",
                "name": "disableActionLeft",
                "type": {
                  "text": "boolean | undefined"
                },
                "attribute": "disableActionLeft",
                "reflects": true
              },
              {
                "kind": "method",
                "name": "_handleClick",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "MouseEvent"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "fractionAsPercent",
                "privacy": "private",
                "return": {
                  "type": {
                    "text": "number"
                  }
                }
              },
              {
                "kind": "method",
                "name": "isFirstStep",
                "privacy": "private",
                "return": {
                  "type": {
                    "text": "boolean"
                  }
                }
              }
            ],
            "events": [
              {
                "name": "leftActionButtonClick",
                "type": {
                  "text": "Event"
                }
              }
            ],
            "attributes": [
              {
                "name": "value",
                "type": {
                  "text": "number"
                },
                "fieldName": "value"
              },
              {
                "name": "max",
                "type": {
                  "text": "number"
                },
                "fieldName": "max"
              },
              {
                "name": "disableActionLeft",
                "type": {
                  "text": "boolean | undefined"
                },
                "fieldName": "disableActionLeft"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-percent-bar",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8PercentBar",
            "declaration": {
              "name": "Cre8PercentBar",
              "module": "components/percent-bar/percent-bar.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-percent-bar",
            "declaration": {
              "name": "Cre8PercentBar",
              "module": "components/percent-bar/percent-bar.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8PercentBar",
              "module": "components/percent-bar/percent-bar.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/popover/popover.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /*------------------------------------*\\ #POPOVER \\*------------------------------------*/ :host { display: inline-flex; } /** * Popover * The main container that holds the trigger and panel */ .cre8-c-popover { position: relative; display: table; } /** * Popover panel * The container for the popover panel heading, content, and footer * 1. Allows the popover to appear over elements, but underneath the global header. */ .cre8-c-popover__panel { @include cre8-typography-body-default(); opacity: 0; visibility: hidden; position: absolute; inset-block-start: calc(100% + #{size(1.5)}); inset-block-end: auto; inset-inline-start: 50%; inset-inline-end: auto; transform: translateX(var(--rtlTranslateX, -50%)); display: flex; flex-direction: column; gap: size(1); width: size(32); z-index: 400; /* 1 */ background-color: var(--cre8-color-bg-default); border: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); border-radius: var(--cre8-border-radius-default); box-shadow: var(--cre8-shadow-default); padding: size(2); /** * Focus state for popover panel */ &:focus-visible { @include focus; } /** * Default Popover heading */ .cre8-c-popover__heading { @include cre8-typography-label-small(); } /** * Active state for popover panel */ .cre8-is-active:not(.cre8-is-dynamic) &, .cre8-is-active.cre8-is-dynamic-active & { opacity: 1; visibility: visible; } /** * Popover panel positioned to the top of the trigger */ .cre8-c-popover--top & { inset-block-start: auto; inset-block-end: calc(100% + #{size(1.5)}); inset-inline-start: 50%; inset-inline-end: auto; transform: translateX(var(--rtlTranslateX, -50%)); } /** * Popover panel positioned to the left of the trigger */ .cre8-c-popover--left & { inset-block-start: 50%; inset-block-end: auto; inset-inline-start: auto; inset-inline-end: calc(100% + #{size(1.5)}); transform: translateY(-50%); } /** * Popover panel positioned to the right of the trigger */ .cre8-c-popover--right & { inset-block-start: 50%; inset-block-end: auto; inset-inline-start: calc(100% + #{size(1.5)}); inset-inline-end: auto; transform: translateY(-50%); } } /** * Popover panel arrow */ .cre8-c-popover__panel::before { content: ''; display: block; width: size(1.5); height: size(1.5); position: absolute; margin: auto; background-color: var(--cre8-color-bg-default); border-block-start: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); border-inline-start: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); inset-block-start: calc((var(--cre8-border-width-default) + #{size(0.75)}) * -1); inset-inline-start: 50%; transform: translateX(var(--rtlTranslateX, -50%)) rotate(45deg); /** * Moves the popover panel arrow to the top of the panel */ .cre8-c-popover--top & { inset-block-start: auto; inset-block-end: calc((var(--cre8-border-width-default) + #{size(0.75)}) * -1); border-block-start: none; border-inline-start: none; border-block-end: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); border-inline-end: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); } /** * Moves the popover panel arrow to the right side of the panel */ .cre8-c-popover--left & { inset-block-start: 50%; inset-block-end: auto; inset-inline-start: auto; inset-inline-end: calc((var(--cre8-border-width-default) + #{size(0.75)}) * -1); border-block-start: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); border-inline-start: none; border-block-end: none; border-inline-end: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); transform: translateY(-50%) rotate(var(--rtlRotate45Inverse, 45deg)); } /** * Moves the popover panel arrow to the left side of the panel */ .cre8-c-popover--right & { inset-block-start: 50%; inset-block-end: auto; inset-inline-start: calc((var(--cre8-border-width-default) + #{size(0.75)}) * -1); inset-inline-end: auto; border-block-start: none; border-inline-start: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); border-block-end: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); border-inline-end: none; transform: translateY(-50%) rotate(var(--rtlRotate45Inverse, 45deg)); } } /** * Popover footer * 1) The footer container in the panel */ .cre8-c-popover__footer { display: flex; gap: size(2); } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/popover/popover.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/popover/popover.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{ args: { footer: '<cre8-button slot=\"footer\" variant=\"tertiary\" text=\"Button\" size=\"sm\" style=\"margin-left: auto\"></cre8-button>', } }"
          },
          {
            "kind": "variable",
            "name": "DefaultNoButton",
            "type": {
              "text": "object"
            },
            "default": "{}"
          },
          {
            "kind": "variable",
            "name": "PositionLeftContainsSmallPrimaryButton",
            "type": {
              "text": "object"
            },
            "default": "{ args: { footer: '<cre8-button slot=\"footer\" variant=\"primary\" text=\"Button\" size=\"sm\" style=\"margin-left: auto\"></cre8-button>', position: 'left' }, }"
          },
          {
            "kind": "variable",
            "name": "PositionLeftContainsSmallSecondaryButton",
            "type": {
              "text": "object"
            },
            "default": "{ args: { footer: '<cre8-button slot=\"footer\" variant=\"secondary\" text=\"Button\" size=\"sm\" style=\"margin-left: auto\"></cre8-button>', position: 'left' }, }"
          },
          {
            "kind": "variable",
            "name": "PositionLeftContainsSmallTertiaryButton",
            "type": {
              "text": "object"
            },
            "default": "{ args: { position: 'left' } }"
          },
          {
            "kind": "variable",
            "name": "PositionTop",
            "type": {
              "text": "object"
            },
            "default": "{ args: { position: \"top\", }, }"
          },
          {
            "kind": "variable",
            "name": "PositionRight",
            "type": {
              "text": "object"
            },
            "default": "{ args: { position: \"right\" }, }"
          },
          {
            "kind": "function",
            "name": "PositionDynamic"
          },
          {
            "kind": "variable",
            "name": "WithVisibleOnScroll",
            "type": {
              "text": "object"
            },
            "default": "{ args: { isVisibleOnScroll: true, }, }"
          },
          {
            "kind": "variable",
            "name": "WithSlots",
            "type": {
              "text": "object"
            },
            "default": "{ args: { heading: `<f-po slot=\"header\">Header</f-po>`, body: '<f-po>Body</f-po>', footer: '<f-po style=\"width: 100%;\" slot=\"footer\">Footer</f-po>' }, }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/popover/popover.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/popover/popover.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "DefaultNoButton",
            "declaration": {
              "name": "DefaultNoButton",
              "module": "components/popover/popover.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PositionLeftContainsSmallPrimaryButton",
            "declaration": {
              "name": "PositionLeftContainsSmallPrimaryButton",
              "module": "components/popover/popover.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PositionLeftContainsSmallSecondaryButton",
            "declaration": {
              "name": "PositionLeftContainsSmallSecondaryButton",
              "module": "components/popover/popover.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PositionLeftContainsSmallTertiaryButton",
            "declaration": {
              "name": "PositionLeftContainsSmallTertiaryButton",
              "module": "components/popover/popover.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PositionTop",
            "declaration": {
              "name": "PositionTop",
              "module": "components/popover/popover.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PositionRight",
            "declaration": {
              "name": "PositionRight",
              "module": "components/popover/popover.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PositionDynamic",
            "declaration": {
              "name": "PositionDynamic",
              "module": "components/popover/popover.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "WithVisibleOnScroll",
            "declaration": {
              "name": "WithVisibleOnScroll",
              "module": "components/popover/popover.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "WithSlots",
            "declaration": {
              "name": "WithSlots",
              "module": "components/popover/popover.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/popover/popover.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The Popover is for progressive disclosure of relevant content often hidden behind a help or info icon.\nIts content should be no longer than 3-4 lines in addition to a line of heading text and an optional button.",
            "name": "Cre8Popover",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "heading",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The heading text that appears at the top of the popover panel. Should only be 2-3 lines max.",
                "attribute": "heading"
              },
              {
                "kind": "field",
                "name": "position",
                "type": {
                  "text": "'top' | 'left' | 'right' | undefined"
                },
                "description": "Positions the popover panel absolutely to the trigger\n- **default** positions the popover panel below the trigger\n- **top** positions the popover panel below the trigger\n- **left** positions the popover panel below the trigger\n- **right** positions the popover panel below the trigger",
                "attribute": "position"
              },
              {
                "kind": "field",
                "name": "isVisibleOnScroll",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Set to prevent the popover panel from hiding on scroll",
                "attribute": "isVisibleOnScroll",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "isDynamic",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The dynamic state for the popover\n- If true, the popover panel placement is determined by its position in the viewport\n- If false, the popover panel placement will be placed according to the position value",
                "attribute": "isDynamic",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "isActiveDynamic",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The dynamic active state\n_This property is dynamically set_",
                "attribute": "isActiveDynamic",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "isActive",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The active state for the popover\n- If true, the popover panel is visible\n- If false, the popover panel is hidden\n\n_This property is dynamically set_",
                "attribute": "isActive",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "_Cre8Popover",
                "type": {
                  "text": "HTMLElement"
                },
                "description": "Query the popover panel element"
              },
              {
                "kind": "field",
                "name": "_Cre8PopoverPanel",
                "type": {
                  "text": "HTMLElement"
                },
                "description": "Query the popover panel element"
              },
              {
                "kind": "field",
                "name": "_Cre8PopoverTrigger",
                "type": {
                  "text": "Array<HTMLElement>"
                },
                "description": "Query the assigned elements in the trigger slot"
              },
              {
                "kind": "field",
                "name": "_Cre8PopoverFooter",
                "type": {
                  "text": "Array<HTMLElement>"
                },
                "description": "Query the assigned elements in the footer slot"
              },
              {
                "kind": "field",
                "name": "isRTL",
                "description": "Query the document direction value\n<br/><br/> _*This property is dynamically set_",
                "readonly": true
              },
              {
                "kind": "method",
                "name": "addAria",
                "description": "Add aria attributes on the trigger button\n1. Select the element within the trigger slot\n2. Set aria-expanded on the popover trigger to the active state if provided. Otherwise, set to false.\n3 Set the type to button."
              },
              {
                "kind": "method",
                "name": "dynamicPosition",
                "description": "Handle all dynamic placement"
              },
              {
                "kind": "method",
                "name": "_toggleActive",
                "privacy": "private",
                "description": "Set Popover Active State\n1. Toggle the active state between true and false\n2. Set attribute since aria expanded can't be passed down through the slot\n3. If the active state is toggled to false, close the panel and return focus to the dropdown trigger.\nThis accounts for both design system buttons and native HTML buttons"
              },
              {
                "kind": "method",
                "name": "_handleKeydown",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "KeyboardEvent"
                    }
                  }
                ],
                "description": "Handle Keydown\n1. If the panel is open and escape is keyed, close the popover panel and return focus to the trigger button\n2. If the panel is opened, tab away closes the popover panel\n3. The panel can be opened and closed by Enter or Space keys."
              },
              {
                "kind": "method",
                "name": "_handleTabNavigation",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "KeyboardEvent"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "_navigateInsidePopover",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "KeyboardEvent"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "_getFocusableElements",
                "privacy": "private",
                "return": {
                  "type": {
                    "text": "HTMLElement[]"
                  }
                }
              },
              {
                "kind": "method",
                "name": "_closePopoverAndFocusTrigger",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "KeyboardEvent"
                    }
                  }
                ]
              },
              {
                "kind": "field",
                "name": "handleOnClickOutside",
                "description": "Handle click outside the component\n1. Close the show/hide popover panel on click outside\n2. If the popover panel is already closed then we don't care about outside clicks and we can bail early\n3. By the time a user clicks on the page the shadowRoot will almost certainly be\ndefined, but TypeScript isn't that trusting and sees this.shadowRoot as possibly\nundefined. To work around that we'll check that we have a shadowRoot (and a\nrendered .host) element here to appease the TypeScript compiler. This should never\nactually be shown or run for a human end user.\n4. Check to see if we clicked inside the active panel\n5. If the panel is active and we've clicked outside of the panel then it should be closed."
              },
              {
                "kind": "field",
                "name": "removeActiveOnScroll",
                "description": "Remove Active State on Scroll\n1. If a scroll event is fired and visibileOnScroll is not true, remove the active state\n2. If the popover height is less than the window height, then allow the active to remove on scroll"
              },
              {
                "kind": "field",
                "name": "removeActive",
                "description": "Remove Active State\n1. If a specific event is fired, remove the active state."
              }
            ],
            "events": [
              {
                "name": "open",
                "type": {
                  "text": "CustomEvent"
                }
              },
              {
                "name": "close",
                "type": {
                  "text": "CustomEvent"
                }
              }
            ],
            "attributes": [
              {
                "name": "heading",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The heading text that appears at the top of the popover panel. Should only be 2-3 lines max.",
                "fieldName": "heading",
                "attribute": "heading"
              },
              {
                "name": "position",
                "type": {
                  "text": "'top' | 'left' | 'right' | undefined"
                },
                "description": "Positions the popover panel absolutely to the trigger\n- **default** positions the popover panel below the trigger\n- **top** positions the popover panel below the trigger\n- **left** positions the popover panel below the trigger\n- **right** positions the popover panel below the trigger",
                "fieldName": "position",
                "attribute": "position"
              },
              {
                "name": "isVisibleOnScroll",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Set to prevent the popover panel from hiding on scroll",
                "fieldName": "isVisibleOnScroll",
                "attribute": "isVisibleOnScroll"
              },
              {
                "name": "isDynamic",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The dynamic state for the popover\n- If true, the popover panel placement is determined by its position in the viewport\n- If false, the popover panel placement will be placed according to the position value",
                "fieldName": "isDynamic",
                "attribute": "isDynamic"
              },
              {
                "name": "isActiveDynamic",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The dynamic active state\n_This property is dynamically set_",
                "fieldName": "isActiveDynamic",
                "attribute": "isActiveDynamic"
              },
              {
                "name": "isActive",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The active state for the popover\n- If true, the popover panel is visible\n- If false, the popover panel is hidden\n\n_This property is dynamically set_",
                "fieldName": "isActive",
                "attribute": "isActive"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-popover",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Popover",
            "declaration": {
              "name": "Cre8Popover",
              "module": "components/popover/popover.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-popover",
            "declaration": {
              "name": "Cre8Popover",
              "module": "components/popover/popover.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Popover",
              "module": "components/popover/popover.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/primary-nav/primary-nav.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #PRIMARY NAV /** * Inverted primary nav */ .cre8-c-primary-nav--inverted { --cre8-primary-nav-link-color: var(--cre8-color-content-knockout); } /** * Primary nav list * 1) Stack on small screens within the toggleable menu but place side by side on large screens */ .cre8-c-primary-nav__list { display: flex; flex-direction: column; /* 1 */ margin: 0; padding: 0; list-style: none; /** * Primary nav list within side by side variant * 1) Always keep items side by side */ .cre8-c-primary-nav--side-by-side & { flex-direction: row; /* 1 */ } @media all and (min-width:$cre8-breakpoint-lg) { flex-direction: row; /* 1 */ } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/primary-nav/primary-nav.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/primary-nav/primary-nav.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "SideBySide"
          },
          {
            "kind": "function",
            "name": "WithMegamenu"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/primary-nav/primary-nav.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/primary-nav/primary-nav.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SideBySide",
            "declaration": {
              "name": "SideBySide",
              "module": "components/primary-nav/primary-nav.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "WithMegamenu",
            "declaration": {
              "name": "WithMegamenu",
              "module": "components/primary-nav/primary-nav.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/primary-nav/primary-nav.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8PrimaryNav",
            "slots": [
              {
                "description": "The primary navigation items",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "inverted",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverted variant\n1) Used for dark backgrounds",
                "attribute": "inverted",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "behavior",
                "type": {
                  "text": "'side-by-side' | undefined"
                },
                "description": "Behavior variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**side-by-side** keeps the primary nav item always in a horizontal pattern</li>\n</ul>\n</cre8-text-passage>",
                "attribute": "behavior"
              },
              {
                "kind": "field",
                "name": "navAriaLabel",
                "type": {
                  "text": "string"
                },
                "default": "'main'",
                "description": "aria-label attribute to designate at name for the nav. Can be override by user",
                "attribute": "navAriaLabel"
              }
            ],
            "attributes": [
              {
                "name": "inverted",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverted variant\n1) Used for dark backgrounds",
                "fieldName": "inverted"
              },
              {
                "name": "behavior",
                "type": {
                  "text": "'side-by-side' | undefined"
                },
                "description": "Behavior variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**side-by-side** keeps the primary nav item always in a horizontal pattern</li>\n</ul>\n</cre8-text-passage>",
                "fieldName": "behavior"
              },
              {
                "name": "navAriaLabel",
                "type": {
                  "text": "string"
                },
                "default": "'main'",
                "description": "aria-label attribute to designate at name for the nav. Can be override by user",
                "fieldName": "navAriaLabel"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-primary-nav",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8PrimaryNav",
            "declaration": {
              "name": "Cre8PrimaryNav",
              "module": "components/primary-nav/primary-nav.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-primary-nav",
            "declaration": {
              "name": "Cre8PrimaryNav",
              "module": "components/primary-nav/primary-nav.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8PrimaryNav",
              "module": "components/primary-nav/primary-nav.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/primary-nav-item/primary-nav-item.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #PRIMARY NAV ITEM /** * Actual primary nav list item */ .cre8-c-primary-nav__item { border-bottom-width: var(--cre8-border-width-default); border-bottom-style: var(--cre8-border-style-default); border-bottom-color: var(--cre8-color-border-subtle); @media all and (min-width:$cre8-breakpoint-lg) { border-bottom: none; } } /** * Content within the primary nav item */ .cre8-c-primary-nav__item-content { display: flex; align-items: baseline; } /** * Primary navigation link * 1) Used to remove any sort of default button styles when a button tag is rendered */ .cre8-c-primary-nav__link { @include cre8-typography-label-default; display: flex; align-items: center; appearance: none; /* 1 */ background: transparent; /* 1 */ border: none; //border: 1px solid var(--cre8-color-header-menu-border-default); /* 1 */ white-space: nowrap; width: 100%; margin: 0; padding: size(2) size(4); color: var(--cre8-primary-nav-link-color, var(--cre8-color-header-menu-content-default)); text-decoration: none; transition: all var(--cre8-anim-fade-quick) var(--cre8-anim-ease); cursor: pointer; &:hover, &:focus-visible { //border-color: var(--cre8-color-header-menu-border-hover); background: var(--cre8-color-header-menu-bg-hover); color: var(--cre8-color-header-menu-content-hover); } &:active { border-color: var(--cre8-color-header-menu-border-pressed); background: var(--cre8-color-header-menu-bg-pressed); color: var(--cre8-color-header-menu-content-pressed); } /** * Primary navigation link within active primary nav item */ .cre8-c-primary-nav__item.cre8-is-active & { background: var(--cre8-color-bg-brand); color: var(--cre8-color-header-menu-content-hover); } /** * Medium screen primary navigation */ @media all and (min-width:$cre8-breakpoint-lg) { padding: size(2) size(1); } @media all and (min-width:$cre8-breakpoint-lg) { padding: size(2); border-bottom: none; } } /** * Icon within primary navigation item */ cre8-icon-legacy { --cre8-icon-height: #{size(1.5)}; /* 1 */ --cre8-icon-width: #{size(1.5)}; /* 1 */ margin-left: auto; transition: transform var(--cre8-anim-fade-quick) var(--cre8-anim-ease); /** * Icon within active primary nav item * 1) Rotate the icon to show that the dropdown is open */ .cre8-c-primary-nav__item.cre8-is-active & { transform: rotate(-180deg); /* 1 */ } @media all and (min-width:$cre8-breakpoint-lg) { margin-left: size(1); } } /** * Primary nav item panel * 1) Panel for the dropdown content * 1) Hide when not active */ .cre8-c-primary-nav__item-panel { //display: none; visibility: hidden; /* 1 */ width: 100%; height: 0; /* 1 */ overflow: hidden; /* 1 */ background: transparent; opacity: 0; /* 1 */ transition: all 0s var(--cre8-anim-ease); z-index: -1; @media all and (min-width:$cre8-breakpoint-lg) { position: absolute; top: 100%; left: 0; height: auto; box-shadow: var(--cre8-theme-box-shadow-md); } /** * Primary nav item panel within active item * 1) Show the primary nav item dropdown */ .cre8-c-primary-nav__item.cre8-is-active & { display: block; visibility: visible; /* 1 */ height: auto; /* 1 */ padding-top: size(4); padding-bottom: size(4); background: var(--cre8-color-bg-default); opacity: 1; /* 1 */ z-index: 1; transition: opacity var(--cre8-anim-fade-quick) var(--cre8-anim-ease); } } /** * Primary nav item panel inner container * 1) Container within primary nav item panel that caps the content width and aligns */ .cre8-c-primary-nav__item-panel-inner { /** * Primary nav item inner container within megamenu item * 1) Cap the content width and center */ .cre8-c-primary-nav__item--megamenu & { max-width: 70rem; /* 1 */ padding-right: size(4); padding-left: size(4); margin: 0 auto; /* 1 */ } } .cre8-c-primary-nav__item-before { margin-right: size(1); } .cre8-c-primary-nav__item-after { margin-left: size(1); } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/primary-nav-item/primary-nav-item.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/primary-nav-item/primary-nav-item.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8PrimaryNavItem",
            "slots": [
              {
                "description": "The label for the navigation item",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "text",
                "type": {
                  "text": "string"
                },
                "default": "'Nav item'",
                "description": "Primary nav item text",
                "attribute": "text"
              },
              {
                "kind": "field",
                "name": "href",
                "type": {
                  "text": "string"
                },
                "default": "'#'",
                "description": "Primary nav item href",
                "attribute": "href"
              },
              {
                "kind": "field",
                "name": "iconName",
                "type": {
                  "text": "string | undefined"
                },
                "default": "'caret-down'",
                "description": "Icon name",
                "attribute": "iconName"
              },
              {
                "kind": "field",
                "name": "megaMenu",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Append to the class name. Used for passing in utility classes",
                "attribute": "megaMenu",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "isActive",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Append to the class name. Used for passing in utility classes"
              },
              {
                "kind": "method",
                "name": "_handleOnClickOutside",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "event",
                    "type": {
                      "text": "MouseEvent"
                    }
                  }
                ],
                "description": "Handle click outside the component\n1) Close the show hide panel on click outside\n2) If the nav is already closed then we don't care about outside clicks and we\ncan bail early\n3) By the time a user clicks on the page the shadowRoot will almost certainly be\ndefined, but TypeScript isn't that trusting and sees this.shadowRoot as possibly\nundefined. To work around that we'll check that we have a shadowRoot (and a\nrendered .host) element here to appease the TypeScript compiler. This should never\nactually be shown or run for a human end user.\n4) Check to see if we clicked inside the active navigation item\n5) If the navigation is active and we've clicked outside of the nav then it should\nbe closed."
              },
              {
                "kind": "method",
                "name": "_clickHandler",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "MouseEvent"
                    }
                  }
                ],
                "description": "Toggle active state of primary nav item\n1) Remove isActive state from all sibling elements\n2) Toggle active state of element selected"
              },
              {
                "kind": "method",
                "name": "_closePanel",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_handleOnKeyDown",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "KeyboardEvent"
                    }
                  }
                ]
              }
            ],
            "attributes": [
              {
                "name": "text",
                "type": {
                  "text": "string"
                },
                "default": "'Nav item'",
                "description": "Primary nav item text",
                "fieldName": "text"
              },
              {
                "name": "href",
                "type": {
                  "text": "string"
                },
                "default": "'#'",
                "description": "Primary nav item href",
                "fieldName": "href"
              },
              {
                "name": "iconName",
                "type": {
                  "text": "string | undefined"
                },
                "default": "'caret-down'",
                "description": "Icon name",
                "fieldName": "iconName"
              },
              {
                "name": "megaMenu",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Append to the class name. Used for passing in utility classes",
                "fieldName": "megaMenu"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-primary-nav-item",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8PrimaryNavItem",
            "declaration": {
              "name": "Cre8PrimaryNavItem",
              "module": "components/primary-nav-item/primary-nav-item.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-primary-nav-item",
            "declaration": {
              "name": "Cre8PrimaryNavItem",
              "module": "components/primary-nav-item/primary-nav-item.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8PrimaryNavItem",
              "module": "components/primary-nav-item/primary-nav-item.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/progress-meter/progress-meter.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * 1) Progress Meter * 2) Progress bar fill color custom property */ :host { display: block; } .cre8-c-progress-meter__progress { --cre8-progress-meter-background: var(--cre8-color-content-brand); /* 2 */ width: 100%; height: var(--cre8-progress-meter-height, size(1)); background: var(--cre8-color-bg-transparent); border-width: var(--cre8-border-width-default); border-style: var(--cre8-border-style-default); border-color: var(--cre8-color-border-strong); border-radius: var(--cre8-border-radius-round); .cre8-c-progress-meter--knockout & { --cre8-progress-meter-background: var(--cre8-color-content-brand-knockout); border-color: var(--cre8-color-border-default); } /** * Progress bar background styling error */ .cre8-c-progress-meter--error & { --cre8-progress-meter-background: var(--cre8-color-bg-error-strong); } /** * Progress bar background styling warning */ .cre8-c-progress-meter--warning & { --cre8-progress-meter-background: var(--cre8-color-bg-warning-strong); } /** * Progress bar background styling success */ .cre8-c-progress-meter--success & { --cre8-progress-meter-background: var(--cre8-color-bg-success-strong); } /** * Progress bar background styling indeterminate */ .cre8-c-progress-meter--indeterminate & { --cre8-progress-meter-background: repeating-linear-gradient( -45deg, #009bdf, #009bdf 10px, #00628e 10px, #00628e 20px ); // TODO Possibly tokenize these } } /** * Progress bar sr-only escriptor */ .cre8-c-progress-meter__sr-only { @include visuallyHidden; } /** * Progress bar background styling */ progress { color: var(--cre8-progress-meter-background); appearance: none; } /** * Progress bar background styling for Mozilla */ progress::-moz-progress-bar { background: var(--cre8-progress-meter-background); border-radius: var(--cre8-border-radius-round); } /** * Progress bar background styling for Safari and Chrome */ progress::-webkit-progress-bar { background: var(--cre8-color-bg-subtle); border-radius: var(--cre8-border-radius-round); } progress::-webkit-progress-value { background: var(--cre8-progress-meter-background); border-radius: var(--cre8-border-radius-round); } /** * Hide Label except for screen readers */ .cre8-c-progress-meter__label { @include visuallyHidden; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/progress-meter/progress-meter.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/progress-meter/progress-meter.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Default progress label', } }"
          },
          {
            "kind": "variable",
            "name": "KnockoutTrue",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Knockout progress label', knockout: true } }"
          },
          {
            "kind": "variable",
            "name": "Empty",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Empty progress label', value: 0, } }"
          },
          {
            "kind": "variable",
            "name": "NotStrong",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Not strong progress label', value: '25', status: 'error' } }"
          },
          {
            "kind": "variable",
            "name": "Weak",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Weak progress label', status: 'warning' } }"
          },
          {
            "kind": "variable",
            "name": "Good",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Good progress label', value: '75', status: 'success' } }"
          },
          {
            "kind": "variable",
            "name": "Excellent",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Excellent progress label', value: '100', status: 'success' } }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/progress-meter/progress-meter.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/progress-meter/progress-meter.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "KnockoutTrue",
            "declaration": {
              "name": "KnockoutTrue",
              "module": "components/progress-meter/progress-meter.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Empty",
            "declaration": {
              "name": "Empty",
              "module": "components/progress-meter/progress-meter.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "NotStrong",
            "declaration": {
              "name": "NotStrong",
              "module": "components/progress-meter/progress-meter.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Weak",
            "declaration": {
              "name": "Weak",
              "module": "components/progress-meter/progress-meter.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Good",
            "declaration": {
              "name": "Good",
              "module": "components/progress-meter/progress-meter.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Excellent",
            "declaration": {
              "name": "Excellent",
              "module": "components/progress-meter/progress-meter.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/progress-meter/progress-meter.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "A progress meter provides feedback that the system is working and gives\nthe user an indication of how much time they will wait.\nThis indicator should be used when the system response time is longer and determinable.",
            "name": "Cre8ProgressMeter",
            "members": [
              {
                "kind": "field",
                "name": "status",
                "type": {
                  "text": "'error' | 'warning' | 'success' | undefined"
                },
                "description": "Progress Status\n- **Default** renders a meter with default status fill\n- **Error** renders a meter with an error status fill\n- **Warning** renders a meter with a warning status\n- **Success** renders a meter with a success status fill",
                "attribute": "status"
              },
              {
                "kind": "field",
                "name": "knockout",
                "type": {
                  "text": "boolean | undefined"
                },
                "attribute": "knockout",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "max",
                "type": {
                  "text": "number"
                },
                "default": "100",
                "attribute": "max"
              },
              {
                "kind": "field",
                "name": "value",
                "type": {
                  "text": "number"
                },
                "attribute": "value"
              },
              {
                "kind": "field",
                "name": "fieldId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Progress Meter FieldId",
                "attribute": "fieldId"
              },
              {
                "kind": "field",
                "name": "name",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Progress Meter name",
                "attribute": "name"
              },
              {
                "kind": "field",
                "name": "label",
                "type": {
                  "text": "string"
                },
                "description": "Progress Meter label",
                "attribute": "label"
              }
            ],
            "attributes": [
              {
                "name": "status",
                "type": {
                  "text": "'error' | 'warning' | 'success' | undefined"
                },
                "description": "Progress Status\n- **Default** renders a meter with default status fill\n- **Error** renders a meter with an error status fill\n- **Warning** renders a meter with a warning status\n- **Success** renders a meter with a success status fill",
                "fieldName": "status",
                "attribute": "status"
              },
              {
                "name": "fieldId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Progress Meter FieldId",
                "fieldName": "fieldId",
                "attribute": "fieldId"
              },
              {
                "name": "name",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Progress Meter name",
                "fieldName": "name",
                "attribute": "name"
              },
              {
                "name": "label",
                "type": {
                  "text": "string"
                },
                "description": "Progress Meter label",
                "fieldName": "label",
                "attribute": "label"
              },
              {
                "name": "knockout",
                "type": {
                  "text": "boolean | undefined"
                },
                "fieldName": "knockout"
              },
              {
                "name": "max",
                "type": {
                  "text": "number"
                },
                "default": "100",
                "fieldName": "max"
              },
              {
                "name": "value",
                "type": {
                  "text": "number"
                },
                "fieldName": "value"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-progress-meter",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8ProgressMeter",
            "declaration": {
              "name": "Cre8ProgressMeter",
              "module": "components/progress-meter/progress-meter.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-progress-meter",
            "declaration": {
              "name": "Cre8ProgressMeter",
              "module": "components/progress-meter/progress-meter.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/progress-steps/progress-steps.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; ::slotted(*) { flex: 1; } .cre8-c-progress-steps { display: flex; flex-direction: row; margin: var(--cre8-spacing-24); @media (max-width:$cre8-breakpoint-md) { flex-direction: column; } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/progress-steps/progress-steps.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/progress-steps/progress-steps.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "shortExample",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "longExample",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "Error",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "Warning",
            "parameters": [
              {
                "name": "args"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/progress-steps/progress-steps.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "shortExample",
            "declaration": {
              "name": "shortExample",
              "module": "components/progress-steps/progress-steps.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "longExample",
            "declaration": {
              "name": "longExample",
              "module": "components/progress-steps/progress-steps.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Error",
            "declaration": {
              "name": "Error",
              "module": "components/progress-steps/progress-steps.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Warning",
            "declaration": {
              "name": "Warning",
              "module": "components/progress-steps/progress-steps.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/progress-steps/progress-steps.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '/design-tokens/core/scss/theming/component'; ::slotted(*) { flex: 1; } .cre8-c-progress-steps { display: flex; flex-direction: row; margin: var(--cre8-spacing-24); @media (max-width: component.$cre8-breakpoint-md) { flex-direction: column; } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/progress-steps/progress-steps.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/progress-steps-item/progress-steps-item.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; :host(:first-child)::part(left-divider), :host(:last-child)::part(right-divider){ visibility: hidden; } .cre8-c-progress-steps-item--complete { --divider-color-left: var(--cre8-color-border-brand); --divider-color-right: var(--cre8-color-border-brand); --icon-color: var(--cre8-color-content-brand); --name-color: var(--cre8-color-content-brand); } .cre8-c-progress-steps-item--current { --divider-color-left: var(--cre8-color-border-brand); --divider-color-right: var(--cre8-color-border-strong); --icon-color: var(--cre8-color-content-brand); --name-color: var(--cre8-color-content-brand); } .cre8-c-progress-steps-item--error { --divider-color-left: var(--cre8-color-border-brand); --divider-color-right: var(--cre8-color-border-strong); --icon-color: var(--cre8-color-content-error-icon); --name-color: var(--cre8-color-content-error); } .cre8-c-progress-steps-item--incomplete { --divider-color-left: var(--cre8-color-border-strong); --divider-color-right: var(--cre8-color-border-strong); --icon-color: var(--cre8-color-content-subtle); --name-color: var(--cre8-color-content-subtle); } .cre8-c-progress-steps-item--warning { --divider-color-left: var(--cre8-color-border-brand); --divider-color-right: var(--cre8-color-border-strong); --icon-color: var(--cre8-color-content-warning-icon); --name-color: var(--cre8-color-content-default); } .cre8-c-progress-steps-item { @include cre8-typography-title-small(); text-align: center; } .cre8-c-progress-steps-item__top-container { align-items: center; display: flex; padding-bottom: var(--cre8-spacing-8); } .cre8-c-progress-steps-item__svg { color: var(--icon-color); height: size(2.5); margin-left: var(--cre8-spacing-8); margin-right: var(--cre8-spacing-8); width: size(2.5); svg { height: size(2.5); width: size(2.5); } } .cre8-c-progress-steps-item__message { @include cre8-typography-body-small; padding-left: var(--cre8-spacing-16); padding-right: var(--cre8-spacing-16); } .cre8-c-progress-steps-item__name { @include cre8-typography-title-small; color: var(--name-color); padding-left: var(--cre8-spacing-16); padding-right: var(--cre8-spacing-16); } .cre8-c-progress-steps-item__divider--left, .cre8-c-progress-steps-item__divider--right{ height: size(0.25); width: 100%; } .cre8-c-progress-steps-item__divider--left { background-color: var(--divider-color-left); } .cre8-c-progress-steps-item__divider--right { background-color: var(--divider-color-right); } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/progress-steps-item/progress-steps-item.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/progress-steps-item/progress-steps-item.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "meta",
            "type": {
              "text": "object"
            },
            "default": "{ title: 'In Development/Progress Steps Item', component: 'cre8-progress-steps-item', render: (args) => html`<cre8-progress-steps-item ${spread(args)}></cre8-progress-steps-item>` }"
          },
          {
            "kind": "variable",
            "name": "Complete",
            "type": {
              "text": "object"
            },
            "default": "{ args: { message: 'Optional step message should be succinct', name: 'Step Name', state: 'complete', svg: svgCheckCircle, }, }"
          },
          {
            "kind": "variable",
            "name": "Current",
            "type": {
              "text": "object"
            },
            "default": "{ args: { message: 'Optional step message should be succinct', name: 'Step Name', state: 'current', svg: svgFilledCircleOne, }, }"
          },
          {
            "kind": "variable",
            "name": "Error",
            "type": {
              "text": "object"
            },
            "default": "{ args: { message: 'Optional step message should be succinct', name: 'Step Name', state: 'error', svg: svgError, }, }"
          },
          {
            "kind": "variable",
            "name": "Incomplete",
            "type": {
              "text": "object"
            },
            "default": "{ args: { message: 'Optional step message should be succinct', name: 'Step Name', state: 'incomplete', svg: svgRegularCircleOne, }, }"
          },
          {
            "kind": "variable",
            "name": "Warning",
            "type": {
              "text": "object"
            },
            "default": "{ args: { message: 'Optional step message should be succinct', name: 'Step Name', state: 'warning', svg: svgWarning, }, }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "meta",
              "module": "components/progress-steps-item/progress-steps-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Complete",
            "declaration": {
              "name": "Complete",
              "module": "components/progress-steps-item/progress-steps-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Current",
            "declaration": {
              "name": "Current",
              "module": "components/progress-steps-item/progress-steps-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Error",
            "declaration": {
              "name": "Error",
              "module": "components/progress-steps-item/progress-steps-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Incomplete",
            "declaration": {
              "name": "Incomplete",
              "module": "components/progress-steps-item/progress-steps-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Warning",
            "declaration": {
              "name": "Warning",
              "module": "components/progress-steps-item/progress-steps-item.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/progress-steps-item/progress-steps-item.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The Progress Steps Item component is used to display a single step in a multi-step process.\nIt should be used as a child component of `cre8-progress-steps`.\nThese Components serve a contextual purpose and don't provide any functionality.",
            "name": "Cre8ProgressStepsItem",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "message",
                "type": {
                  "text": "string"
                },
                "description": "Optional message to display under the step name.",
                "attribute": "message"
              },
              {
                "kind": "field",
                "name": "name",
                "type": {
                  "text": "string"
                },
                "description": "The name of the step.",
                "attribute": "name"
              },
              {
                "kind": "field",
                "name": "state",
                "type": {
                  "text": "string"
                },
                "description": "The state of the step: 'incomplete', 'current', 'complete', 'error', 'warning';",
                "attribute": "state"
              },
              {
                "kind": "field",
                "name": "svg",
                "type": {
                  "text": "string"
                },
                "description": "An SVG string to use as the step icon.",
                "attribute": "svg"
              }
            ],
            "attributes": [
              {
                "name": "message",
                "type": {
                  "text": "string"
                },
                "description": "Optional message to display under the step name.",
                "fieldName": "message"
              },
              {
                "name": "name",
                "type": {
                  "text": "string"
                },
                "description": "The name of the step.",
                "fieldName": "name"
              },
              {
                "name": "state",
                "type": {
                  "text": "string"
                },
                "description": "The state of the step: 'incomplete', 'current', 'complete', 'error', 'warning';",
                "fieldName": "state"
              },
              {
                "name": "svg",
                "type": {
                  "text": "string"
                },
                "description": "An SVG string to use as the step icon.",
                "fieldName": "svg"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-progress-steps-item",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8ProgressStepsItem",
            "declaration": {
              "name": "Cre8ProgressStepsItem",
              "module": "components/progress-steps-item/progress-steps-item.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-progress-steps-item",
            "declaration": {
              "name": "Cre8ProgressStepsItem",
              "module": "components/progress-steps-item/progress-steps-item.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8ProgressStepsItem",
              "module": "components/progress-steps-item/progress-steps-item.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/radio-field/radio-field.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /*------------------------------------*\\ #RADIO-FIELD \\*------------------------------------*/ :host { display: flex; } /** * 1) Fieldset used for radio items */ .cre8-c-radio-field { border: none; padding: 0; margin: 0; } /** * Radio field legend */ .cre8-c-radio-field__legend { @include cre8-typography-label-small; margin-bottom: size(1); } /** * Radio field list * 1) Remove default margin and padding form radio field list */ .cre8-c-radio-field__list { display: flex; flex-direction: column; margin: 0; /* 1 */ padding: 0; /* 1 */ }`"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/radio-field/radio-field.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/radio-field/radio-field.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{ args: { fieldNote: 'This is a field note.', disabled: false, content, } }"
          },
          {
            "kind": "variable",
            "name": "WithFieldNote",
            "type": {
              "text": "object"
            },
            "default": "{ args: { ariaDescribedBy: 'radio-field-message', fieldNote: 'This is a Field Note on the fieldset!', content, } }"
          },
          {
            "kind": "variable",
            "name": "WithErrorFieldNote",
            "type": {
              "text": "object"
            },
            "default": "{ args: { ariaDescribedBy: 'radio-field-error-message', fieldNote: 'This is an error note on the fieldset!', fieldNoteIconName: 'error', isError: true, content, } }"
          },
          {
            "kind": "variable",
            "name": "WithSuccessFieldNote",
            "type": {
              "text": "object"
            },
            "default": "{ args: { ariaDescribedBy: 'radio-field-success-message', fieldNote: 'This is a success note on the fieldset!', fieldNoteIconName: 'success', isSuccess: true, content, } }"
          },
          {
            "kind": "variable",
            "name": "WithSuccessFieldNoteDefaultChecked",
            "type": {
              "text": "object"
            },
            "default": "{ args: { ariaDescribedBy: 'radio-field-success-message', fieldNote: 'This is a success note on the fieldset!', fieldNoteIconName: 'success', isSuccess: true, content: html` <cre8-radio-field-item name='defaultNote' label=\"Default\"></cre8-radio-field-item> <cre8-radio-field-item name='defaultNote' label=\"Error\" ?isError=${true}></cre8-radio-field-item> <cre8-radio-field-item name='successNote' checked={true} label=\"Success\" ></cre8-radio-field-item>` } }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/radio-field/radio-field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/radio-field/radio-field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "WithFieldNote",
            "declaration": {
              "name": "WithFieldNote",
              "module": "components/radio-field/radio-field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "WithErrorFieldNote",
            "declaration": {
              "name": "WithErrorFieldNote",
              "module": "components/radio-field/radio-field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "WithSuccessFieldNote",
            "declaration": {
              "name": "WithSuccessFieldNote",
              "module": "components/radio-field/radio-field.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "WithSuccessFieldNoteDefaultChecked",
            "declaration": {
              "name": "WithSuccessFieldNoteDefaultChecked",
              "module": "components/radio-field/radio-field.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/radio-field/radio-field.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "Radio Field is the parent container for `radio-field-item`.\nIt is required to allow for grouping numerous radio fields that need additional context (in the form of `<legend>`).\nIt also provides accessibility roles, aria attributes and field note messaging on the group.\n\nSee [radio-field-item](?path=/story/cre8-components-radio-field-item--default) for more guidance on its usage.",
            "name": "Cre8RadioField",
            "slots": [
              {
                "description": "The component content, which should be a set of `radio-field-item`s",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "fieldNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Radio Field Note",
                "attribute": "fieldNote"
              },
              {
                "kind": "field",
                "name": "ariaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Radio container fieldnote aria describe by",
                "attribute": "ariaDescribedBy"
              },
              {
                "kind": "field",
                "name": "fieldNoteIconName",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Radio container fieldnote icon name",
                "attribute": "fieldNoteIconName"
              },
              {
                "kind": "field",
                "name": "fieldNoteKnockout",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Radio container fieldnote knockout",
                "attribute": "fieldNoteKnockout",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "isSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Radio container fieldnote isSuccess",
                "attribute": "isSuccess",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "isError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Radio container fieldnote isError",
                "attribute": "isError",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "label",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Radio field legend label",
                "attribute": "label"
              }
            ],
            "attributes": [
              {
                "name": "fieldNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Radio Field Note",
                "fieldName": "fieldNote",
                "attribute": "fieldNote"
              },
              {
                "name": "ariaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Radio container fieldnote aria describe by",
                "fieldName": "ariaDescribedBy",
                "attribute": "ariaDescribedBy"
              },
              {
                "name": "fieldNoteIconName",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Radio container fieldnote icon name",
                "fieldName": "fieldNoteIconName",
                "attribute": "fieldNoteIconName"
              },
              {
                "name": "fieldNoteKnockout",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Radio container fieldnote knockout",
                "fieldName": "fieldNoteKnockout",
                "attribute": "fieldNoteKnockout"
              },
              {
                "name": "isSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Radio container fieldnote isSuccess",
                "fieldName": "isSuccess",
                "attribute": "isSuccess"
              },
              {
                "name": "isError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Radio container fieldnote isError",
                "fieldName": "isError",
                "attribute": "isError"
              },
              {
                "name": "label",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Radio field legend label",
                "fieldName": "label"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-radio-field",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8RadioField",
            "declaration": {
              "name": "Cre8RadioField",
              "module": "components/radio-field/radio-field.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-radio-field",
            "declaration": {
              "name": "Cre8RadioField",
              "module": "components/radio-field/radio-field.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8RadioField",
              "module": "components/radio-field/radio-field.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/select/select.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /*------------------------------------*\\ #SELECT \\*------------------------------------*/ :host { display: inline-flex; flex-wrap: wrap; } /** * Select Label */ .cre8-c-select__label { @include label-styles; } /** * Select Body * 1) The div that contains the input and icons */ .cre8-c-select__body { position: relative; } /** * Select Input * 1) The html5 select element */ .cre8-c-select__input { @include input-styles; padding-inline-end: size(5.5); cursor: pointer; } /** * Select Icon * 1) The icons within the body container positioned absolutely over the input */ .cre8-c-select__icons { position: absolute; inset-block-start: 50%; transform: translateY(-50%); inset-inline-end: size(1); display: flex; align-items: center; justify-content: flex-end; gap: size(1); pointer-events: none; } /** * Select Arrow Icon */ .cre8-c-select__icon-arrow { margin-right: size(0.75); width: size(1.5); height: size(1.5); } /** * Select field notes */ .cre8-c-select__field-note, .cre8-c-select__field-note-success, .cre8-c-select__field-note-error { flex-basis: 100%; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/select/select.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/select/select.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{}"
          },
          {
            "kind": "variable",
            "name": "Disabled",
            "type": {
              "text": "object"
            },
            "default": "{ args: { disabled: true, } }"
          },
          {
            "kind": "variable",
            "name": "Preselected",
            "type": {
              "text": "object"
            },
            "default": "{ args: { value: 'option-item-1' } }"
          },
          {
            "kind": "variable",
            "name": "FieldNote",
            "type": {
              "text": "object"
            },
            "default": "{ args: { fieldNoteSlot: `<div slot=\"fieldNote\"> Some optional help text or <cre8-link href=\"#\">helpful link</cre8-link> </div>`, } }"
          },
          {
            "kind": "variable",
            "name": "Error",
            "type": {
              "text": "object"
            },
            "default": "{ args: { errorNote: \"Short, clear error message.\", isError: true, } }"
          },
          {
            "kind": "variable",
            "name": "Success",
            "type": {
              "text": "object"
            },
            "default": "{ args: { isSuccess: true, successNote: \"Short, clear success message\", } }"
          },
          {
            "kind": "variable",
            "name": "FieldNoteAndError",
            "type": {
              "text": "object"
            },
            "default": "{ args: { errorNote: \"Short, clear error message.\", fieldNote: \"This is a field note.\", isError: true, } }"
          },
          {
            "kind": "variable",
            "name": "FieldNoteAndSuccess",
            "type": {
              "text": "object"
            },
            "default": "{ args: { fieldNote: \"This is a field note.\", isSuccess: true, successNote: \"Short, clear success message\", } }"
          },
          {
            "kind": "variable",
            "name": "OptionGroup",
            "type": {
              "text": "object"
            },
            "default": "{ args: { items: optionGroupItems, } }",
            "description": "If you have a longer list of options, group related options together.\nGrouping by type allows users to select their preference more quickly.\n\nTo create an option group, create a new item object within your `items` array\nwhich contains an `optGrouplabel` for the group name and an `options` array of items for the group.\n\n```\n{\n optGroupLabel: 'Option Group',\n options: [\n   { label: 'Option Group Item 1', value: 'option-group-item-1', },\n   { label: 'Option Group Item 2', value: 'option-group-item-2', },\n   { label: 'Option Group Item 3', value: 'option-group-item-3', },\n ],\n}\n```"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/select/select.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/select/select.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Disabled",
            "declaration": {
              "name": "Disabled",
              "module": "components/select/select.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Preselected",
            "declaration": {
              "name": "Preselected",
              "module": "components/select/select.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "FieldNote",
            "declaration": {
              "name": "FieldNote",
              "module": "components/select/select.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Error",
            "declaration": {
              "name": "Error",
              "module": "components/select/select.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Success",
            "declaration": {
              "name": "Success",
              "module": "components/select/select.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "FieldNoteAndError",
            "declaration": {
              "name": "FieldNoteAndError",
              "module": "components/select/select.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "FieldNoteAndSuccess",
            "declaration": {
              "name": "FieldNoteAndSuccess",
              "module": "components/select/select.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "OptionGroup",
            "declaration": {
              "name": "OptionGroup",
              "module": "components/select/select.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/select/select.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The Select control is designed and built to be used for selecting between choices in a form.\nIt is not a Dropdown control which is generally used for displaying lists of choices\nthat act as links or actions, like filter options.\n\nConsider the use of a Select control carefully.\nWhen you have less than 5 options for the user to choose from,\nRadio or Checkbox inputs may be a better choice to display all of the options at once.\nUsers have to slow down to scan a list with more than 15 options,\nso using an option group to give the options hierarchy may help users find their choice faster.\nAlternately, a text input field might be a more appropriate control to use when there are too many options,\nespecially when used with typeahead/auto-complete.\n\n## How to use\n1. The collapsed default state always shows a default placeholder value or a selected value.\n2. Sort list items in a logical order, such as grouping highly related options together,\n   placing most common options first, using alphabetical or numeric orders or dates in chronological order.\n3. A list that includes 6+ items should show a scrollbar.\n4. Users should be able to use a keystroke to quickly jump\n   to selecting an option that begins with the entered letter.\n5. Utilize appropriate native controls for when a user is on a mobile device rather than our custom Select.\n6. Adhere to our common form field conventions and always include a Label,\n   provide short and clear error messages in context, avoid using the Read-only\n   and Disabled states as much as possible, and utilize the info/formatting tip\n   or helpful link rather than placeholder text.",
            "name": "Cre8Select",
            "slots": [
              {
                "description": "Container for optional field note content",
                "name": "fieldNote"
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "type",
                "type": {
                  "text": "string"
                },
                "readonly": true,
                "default": "'select'"
              },
              {
                "kind": "field",
                "name": "items",
                "type": {
                  "text": "Array<Cre8SelectOption|Cre8SelectOptionGroup>"
                },
                "default": "[]",
                "description": "A mix of Cre8SelectOption and Cre8SelectOptionGroup definitions:\n- Cre8SelectOption\n  - label: option label text - `string`\n  - value: option value - `number | string`\n- Cre8SelectOptionGroup\n - optGroupLabel: optgroup label text - `string`\n - options: Array of multiple Cre8SelectOption items - `Cre8SelectOption[]`",
                "attribute": "items"
              },
              {
                "kind": "field",
                "name": "label",
                "type": {
                  "text": "string"
                },
                "default": "'Label'",
                "description": "The required label that appears above the select",
                "attribute": "label"
              },
              {
                "kind": "field",
                "name": "name",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The name property on the select",
                "attribute": "name"
              },
              {
                "kind": "field",
                "name": "fieldId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The unique id of the select",
                "attribute": "fieldId"
              },
              {
                "kind": "field",
                "name": "fieldNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Optional field note text can be added to provide additional field guidance.",
                "attribute": "fieldNote"
              },
              {
                "kind": "field",
                "name": "ariaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Used to connect the field note in text field to the text menu for accessibility",
                "attribute": "ariaDescribedBy"
              },
              {
                "kind": "field",
                "name": "validationAriaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Additional aria-describedby connection to id for additional success and error notes to be accessible",
                "attribute": "validationAriaDescribedBy"
              },
              {
                "kind": "field",
                "name": "required",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The required attribute on the select",
                "attribute": "required",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The disabled attribute on the select",
                "attribute": "disabled",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "isError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent an error state",
                "attribute": "isError",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "errorNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The error field note that appears below the default field note",
                "attribute": "errorNote"
              },
              {
                "kind": "field",
                "name": "isSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent a success state",
                "attribute": "isSuccess",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "successNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The success field note that appears below the default field note",
                "attribute": "successNote"
              },
              {
                "kind": "field",
                "name": "field",
                "type": {
                  "text": "HTMLSelectElement"
                },
                "description": "Select input querySelector"
              },
              {
                "kind": "field",
                "name": "_selectOptions",
                "type": {
                  "text": "HTMLOptionElement[]"
                },
                "privacy": "private",
                "description": "Get all select option elements"
              },
              {
                "kind": "field",
                "name": "selectedItem",
                "type": {
                  "text": "string"
                },
                "privacy": "private",
                "description": "Selected item value"
              },
              {
                "kind": "method",
                "name": "_initializeAria",
                "privacy": "private",
                "description": "Initialize aria attributes"
              },
              {
                "kind": "method",
                "name": "_fieldNoteAria",
                "privacy": "private",
                "description": "Aria describedby string based on field notes and error/success notes\n1) If both validationAriaDescribedBy (error/success note) and field note exists,\nrender both in the input's `aria-describedby` attribute\n2) Otherwise, if only validationAriaDescribedBy exists, then render only that as\nthe `aria-describedby` attribute (input without field note initially, but then error/success is added).\n3) Otherwise, render only the `ariaDescribedBy` property (field note only)"
              },
              {
                "kind": "method",
                "name": "_setFormData",
                "privacy": "private",
                "description": "Set form data\n1) Set the element internals to the selected item value if it exists,\n   otherwise the default selected item is the first one"
              },
              {
                "kind": "method",
                "name": "_handleOnChange",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "Event"
                    }
                  }
                ],
                "description": "Handle On Change\n1. Set the value when the select is changed.\n2. Fire the custom event with the current value."
              },
              {
                "kind": "method",
                "name": "_renderSelectOptions",
                "privacy": "private",
                "description": "Render the select options"
              },
              {
                "kind": "method",
                "name": "_renderSuccessErrorFieldNote",
                "privacy": "private",
                "description": "Render the success or error field notes\n1. If there is a successNote, then return the field note with the success message and state.\n2. If there is a errorNote, then return the field note with the error message and state."
              }
            ],
            "attributes": [
              {
                "name": "label",
                "type": {
                  "text": "string"
                },
                "default": "'Label'",
                "description": "The required label that appears above the select",
                "fieldName": "label",
                "attribute": "label"
              },
              {
                "name": "name",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The name property on the select",
                "fieldName": "name",
                "attribute": "name"
              },
              {
                "name": "fieldId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The unique id of the select",
                "fieldName": "fieldId",
                "attribute": "fieldId"
              },
              {
                "name": "fieldNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Optional field note text can be added to provide additional field guidance.",
                "fieldName": "fieldNote",
                "attribute": "fieldNote"
              },
              {
                "name": "ariaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Used to connect the field note in text field to the text menu for accessibility",
                "fieldName": "ariaDescribedBy",
                "attribute": "ariaDescribedBy"
              },
              {
                "name": "validationAriaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Additional aria-describedby connection to id for additional success and error notes to be accessible",
                "fieldName": "validationAriaDescribedBy",
                "attribute": "validationAriaDescribedBy"
              },
              {
                "name": "required",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The required attribute on the select",
                "fieldName": "required",
                "attribute": "required"
              },
              {
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The disabled attribute on the select",
                "fieldName": "disabled",
                "attribute": "disabled"
              },
              {
                "name": "isError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent an error state",
                "fieldName": "isError",
                "attribute": "isError"
              },
              {
                "name": "errorNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The error field note that appears below the default field note",
                "fieldName": "errorNote",
                "attribute": "errorNote"
              },
              {
                "name": "isSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Changes the component's treatment to represent a success state",
                "fieldName": "isSuccess",
                "attribute": "isSuccess"
              },
              {
                "name": "successNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The success field note that appears below the default field note",
                "fieldName": "successNote",
                "attribute": "successNote"
              },
              {
                "name": "items",
                "type": {
                  "text": "Array<Cre8SelectOption|Cre8SelectOptionGroup>"
                },
                "default": "[]",
                "description": "A mix of Cre8SelectOption and Cre8SelectOptionGroup definitions:\n- Cre8SelectOption\n  - label: option label text - `string`\n  - value: option value - `number | string`\n- Cre8SelectOptionGroup\n - optGroupLabel: optgroup label text - `string`\n - options: Array of multiple Cre8SelectOption items - `Cre8SelectOption[]`",
                "fieldName": "items"
              }
            ],
            "superclass": {
              "name": "Cre8FormElement",
              "module": "/components/cre8-form-element"
            },
            "tagName": "cre8-select",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Select",
            "declaration": {
              "name": "Cre8Select",
              "module": "components/select/select.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-select",
            "declaration": {
              "name": "Cre8Select",
              "module": "components/select/select.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/radio-field-item/radio-field-item.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component.scss'; /*------------------------------------*\\ #RADIO-FIELD-ITEM \\*------------------------------------*/ :host { display: inline-flex; } /** * 1) Form field that is compose of a radio input, label, and optional fieldnote. */ .cre8-c-radio-field-item { display: flex; position: relative; align-items: center; margin-bottom: size(1); min-height: size(3); /** * 1) Form field that is compose of a radio input, label, and optional fieldnote. */ :host(:last-child) & { margin-bottom: 0; } } /** * Radio field item input */ .cre8-c-radio-field-item__input { opacity: 0; cursor: pointer; position: absolute; top: 0; left: 0; height: size(3); min-width: size(3); margin: 0; z-index: 1; .cre8-c-radio-field-item--disabled & { cursor: not-allowed; } } /** * Radio field item custom radio container */ .cre8-c-radio-field-item__custom-radio { display: flex; position: absolute; top: 0; left: 0; height: size(3); width: size(3); cursor: pointer; align-items: center; justify-content: center; border-radius: var(--cre8-border-radius-round); border-width: var(--cre8-border-width-default); border-style: var(--cre8-border-style-default); background-color: var(--cre8-color-bg-default); border-color: var(--cre8-color-border-strong); /** * Radio field item custom radio focus visible custom outline */ .cre8-c-radio-field-item__input:focus-visible + & { @include focus; .cre8-c-radio-field-item--error & { @include focusError; border-color: var(--cre8-color-border-error); } } /** * Radio field item custom radio within radio field with error */ .cre8-c-radio-field-item--error & { border-color: var(--cre8-color-border-error); } /** * Radio field item custom radio within radio field disabled */ .cre8-c-radio-field-item--disabled & { cursor: not-allowed; background-color: var(--cre8-color-bg-disabled); border-color: var(--cre8-color-border-disabled); } } /** * Radio field item inner circle */ .cre8-c-radio-field-item__inner-circle { display: none; cursor: pointer; height: size(1.5); width: size(1.5); background: var(--cre8-color-content-brand); border-radius: var(--cre8-border-radius-round); /** * Radio field item inner circle error */ .cre8-c-radio-field-item--error & { background: var(--cre8-color-bg-error-strong); } /** * Radio field item inner circle disabled */ .cre8-c-radio-field-item--disabled & { background: var(--cre8-color-content-disabled); } /** * Radio field item inner circle will display if the input is checked */ .cre8-c-radio-field-item__input:checked + .cre8-c-radio-field-item__custom-radio & { display: flex; } } /** * Radio field item input */ .cre8-c-radio-field-item__label { margin-left: size(4); @include cre8-typography-label-small; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/radio-field-item/radio-field-item.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/radio-field-item/radio-field-item.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'Default', }, }"
          },
          {
            "kind": "variable",
            "name": "Preselected",
            "type": {
              "text": "object"
            },
            "default": "{ args: { checked: 'true', label: 'Preselected', }, }"
          },
          {
            "kind": "variable",
            "name": "Required",
            "type": {
              "text": "object"
            },
            "default": "{ args: { checked: 'true', label: 'Required', required: 'true', }, }"
          },
          {
            "kind": "variable",
            "name": "RequiredError",
            "type": {
              "text": "object"
            },
            "default": "{ args: { checked: 'true', isError: 'true', label: 'Required Error', required: 'true', }, }"
          },
          {
            "kind": "variable",
            "name": "Error",
            "type": {
              "text": "object"
            },
            "default": "{ args: { checked: 'true', isError: 'true', label: 'Error', }, }"
          },
          {
            "kind": "variable",
            "name": "Disabled",
            "type": {
              "text": "object"
            },
            "default": "{ args: { disabled: 'true', label: 'Disabled', }, }"
          },
          {
            "kind": "variable",
            "name": "DefaultFieldNote",
            "type": {
              "text": "object"
            },
            "default": "{ args: { fieldNote: 'This is a default field note.', label: 'Default Field Note', ariaDescribedBy: 'fieldnote-message', }, }"
          },
          {
            "kind": "variable",
            "name": "SuccessFieldNote",
            "type": {
              "text": "object"
            },
            "default": "{ args: { fieldNote: 'This is a success field note.', fieldNoteIconName: 'check', isSuccess: 'true', label: 'Success Field Note', ariaDescribedBy: 'success-fieldnote-message', }, }"
          },
          {
            "kind": "variable",
            "name": "ErrorFieldNote",
            "type": {
              "text": "object"
            },
            "default": "{ args: { fieldNote: 'This is an error field note.', fieldNoteIconName: 'error', isError: 'true', label: 'Error Field Note', ariaDescribedBy: 'error-fieldnote-message', }, }"
          },
          {
            "kind": "variable",
            "name": "LongTitle",
            "type": {
              "text": "object"
            },
            "default": "{ args: { label: 'This could mayhaps be the longest title that has ever been put on a radio field ever!', }, }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/radio-field-item/radio-field-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/radio-field-item/radio-field-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Preselected",
            "declaration": {
              "name": "Preselected",
              "module": "components/radio-field-item/radio-field-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Required",
            "declaration": {
              "name": "Required",
              "module": "components/radio-field-item/radio-field-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "RequiredError",
            "declaration": {
              "name": "RequiredError",
              "module": "components/radio-field-item/radio-field-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Error",
            "declaration": {
              "name": "Error",
              "module": "components/radio-field-item/radio-field-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Disabled",
            "declaration": {
              "name": "Disabled",
              "module": "components/radio-field-item/radio-field-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "DefaultFieldNote",
            "declaration": {
              "name": "DefaultFieldNote",
              "module": "components/radio-field-item/radio-field-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SuccessFieldNote",
            "declaration": {
              "name": "SuccessFieldNote",
              "module": "components/radio-field-item/radio-field-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "ErrorFieldNote",
            "declaration": {
              "name": "ErrorFieldNote",
              "module": "components/radio-field-item/radio-field-item.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "LongTitle",
            "declaration": {
              "name": "LongTitle",
              "module": "components/radio-field-item/radio-field-item.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/radio-field-item/radio-field-item.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "A Radio Field Item adds a radio button to a Radio Field. Radio buttons let a user choose only one of several\noptions. Do not use a single radio button, because once selected, it cannot be de-selected. If the user can only\nchoose one, none or many options, use Checkbox instead.",
            "name": "Cre8RadioFieldItem",
            "members": [
              {
                "kind": "field",
                "name": "type",
                "type": {
                  "text": "string"
                },
                "default": "'radio'"
              },
              {
                "kind": "field",
                "name": "ariaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Identifies the element that provides a detailed, extended description for the object.",
                "attribute": "ariaDescribedBy"
              },
              {
                "kind": "field",
                "name": "checked",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "A Boolean attribute which, if present, sets the radio button as selected.",
                "attribute": "checked",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with\nthe form. The user can neither edit nor focus on the control, nor its form control descendants.",
                "attribute": "disabled",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "field",
                "type": {
                  "text": "HTMLInputElement"
                },
                "description": "Get the radio field item input"
              },
              {
                "kind": "field",
                "name": "fieldId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The fieldId attribute is assigned to the HTML input element of the radio button and the for attribute of the\ncorresponding label.",
                "attribute": "fieldId"
              },
              {
                "kind": "field",
                "name": "fieldNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "A FieldNote can be placed to provide guidance. It's frequently used to in the context of form fields for extra\ninformation or validation messages.",
                "attribute": "fieldNote"
              },
              {
                "kind": "field",
                "name": "fieldNoteIconName",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Sets the item fieldnote icon.\n\n- **check** renders a badge with success state treatment\n- **error** renders a badge with error state treatment",
                "attribute": "fieldNoteIconName"
              },
              {
                "kind": "field",
                "name": "fieldNoteKnockout",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Radio item fieldnote knockout",
                "attribute": "fieldNoteKnockout",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "fieldNoteIsError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Sets the error state of the fieldnote.",
                "attribute": "fieldNoteIsError",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "isError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The isError attribute is used to indicate an error state related to the radio button.",
                "attribute": "isError",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "isSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The isSuccess attribute is used to indicate a success state related to the radio button.",
                "attribute": "isSuccess",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "label",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The label attribute is used to assign a value to the label element corresponding to this radio button.",
                "attribute": "label"
              },
              {
                "kind": "field",
                "name": "name",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The name attribute is used to assign a value to the name attribute of the input element in the DOM.",
                "attribute": "name"
              },
              {
                "kind": "field",
                "name": "required",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Required attribute",
                "attribute": "required",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "initialChecked",
                "type": {
                  "text": "boolean | undefined"
                },
                "privacy": "private",
                "description": "Initial checked for initial checked state"
              },
              {
                "kind": "method",
                "name": "resetField",
                "privacy": "public",
                "description": "Reset the radio field"
              },
              {
                "kind": "method",
                "name": "resetTabIndeces",
                "parameters": [
                  {
                    "name": "radioFieldItems",
                    "type": {
                      "text": "Cre8RadioFieldItem[]"
                    }
                  }
                ],
                "description": "Reset the radio field items tab indeces"
              },
              {
                "kind": "method",
                "name": "removeChecked",
                "description": "Remove checked\n1) Remove checked property from all items and set tabindex to -1\n2) Reset the form field to not checked"
              },
              {
                "kind": "method",
                "name": "formResetCallback",
                "return": {
                  "type": {
                    "text": "void"
                  }
                },
                "description": "Reset form callback\n1) Remove the checked state from all radio elements\n2) Set the checked state to the initial checked state\n3) Set the radio field input checked attribute to the initial checked state"
              },
              {
                "kind": "method",
                "name": "_getRole",
                "privacy": "private",
                "description": "access role when radio-field-item embedded in radio-field"
              },
              {
                "kind": "method",
                "name": "_clickHandler",
                "privacy": "private",
                "description": "Toggle active state of primary nav item\n1) Remove isActive state from all sibling elements\n2) Toggle active state of element selected"
              },
              {
                "kind": "method",
                "name": "_updateSibling",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "event",
                    "type": {
                      "text": "KeyboardEvent"
                    }
                  },
                  {
                    "name": "sibling",
                    "type": {
                      "text": "Element"
                    }
                  },
                  {
                    "name": "element",
                    "type": {
                      "text": "HTMLElement"
                    }
                  }
                ],
                "description": "Handle sibling element updates during handleKeyDown function\n1) Prevent default keyboard functionality to disable scroll with up/down keys\n2) Trigger removeChecked\n3) Focus sibling shadowRoot element\n4) Click sibling shadowRoot element\n5) Set sibling element `tabindex` to `0`\n6) Set sibling element `checked` value"
              },
              {
                "kind": "method",
                "name": "handleKeyDown",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "KeyboardEvent"
                    }
                  }
                ],
                "description": "Handle keydown\n1) If left or up arrow key is struck and radio field item exists before current item,\n   remove checked from all items and add it to the next item\n2) If right or down arrow key is struck and radio field item exists after current item,\n   remove checked from all items and add checked to the next item. Focus on this item\n   and set tabindex for when focusing out of radio field and back onto checked item.\n3) If the element is in focused, then for event emission the current\n   focues element should be clicked to emit event.\n4) If the Tab key is pressed, and none of the items are checked\n   then jump away from field set to the next tabbable item"
              }
            ],
            "attributes": [
              {
                "name": "ariaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Identifies the element that provides a detailed, extended description for the object.",
                "fieldName": "ariaDescribedBy",
                "attribute": "ariaDescribedBy"
              },
              {
                "name": "checked",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "A Boolean attribute which, if present, sets the radio button as selected.",
                "fieldName": "checked",
                "attribute": "checked"
              },
              {
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with\nthe form. The user can neither edit nor focus on the control, nor its form control descendants.",
                "fieldName": "disabled",
                "attribute": "disabled"
              },
              {
                "name": "fieldNoteKnockout",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Radio item fieldnote knockout",
                "fieldName": "fieldNoteKnockout",
                "attribute": "fieldNoteKnockout"
              },
              {
                "name": "fieldNoteIsError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Sets the error state of the fieldnote.",
                "fieldName": "fieldNoteIsError",
                "attribute": "fieldNoteIsError"
              },
              {
                "name": "isError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The isError attribute is used to indicate an error state related to the radio button.",
                "fieldName": "isError",
                "attribute": "isError"
              },
              {
                "name": "isSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The isSuccess attribute is used to indicate a success state related to the radio button.",
                "fieldName": "isSuccess",
                "attribute": "isSuccess"
              },
              {
                "name": "required",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Required attribute",
                "fieldName": "required",
                "attribute": "required"
              },
              {
                "name": "fieldId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The fieldId attribute is assigned to the HTML input element of the radio button and the for attribute of the\ncorresponding label.",
                "fieldName": "fieldId"
              },
              {
                "name": "fieldNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "A FieldNote can be placed to provide guidance. It's frequently used to in the context of form fields for extra\ninformation or validation messages.",
                "fieldName": "fieldNote"
              },
              {
                "name": "fieldNoteIconName",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Sets the item fieldnote icon.\n\n- **check** renders a badge with success state treatment\n- **error** renders a badge with error state treatment",
                "fieldName": "fieldNoteIconName"
              },
              {
                "name": "label",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The label attribute is used to assign a value to the label element corresponding to this radio button.",
                "fieldName": "label"
              },
              {
                "name": "name",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The name attribute is used to assign a value to the name attribute of the input element in the DOM.",
                "fieldName": "name"
              }
            ],
            "superclass": {
              "name": "Cre8FormElement",
              "module": "/components/cre8-form-element"
            },
            "tagName": "cre8-radio-field-item",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8RadioFieldItem",
            "declaration": {
              "name": "Cre8RadioFieldItem",
              "module": "components/radio-field-item/radio-field-item.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-radio-field-item",
            "declaration": {
              "name": "Cre8RadioFieldItem",
              "module": "components/radio-field-item/radio-field-item.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8RadioFieldItem",
              "module": "components/radio-field-item/radio-field-item.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/remove-tag/remove-tag.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * Remove Tags are buttons with text accompanied by a Close icon. */ .cre8-c-remove-tag { @include cre8-typography-label-small; display: flex; align-items: center; align-content: center; appearance: none; white-space: nowrap; padding-left: var(--cre8-spacing-16); padding-right: var(--cre8-spacing-16); padding-top: var(--cre8-spacing-4); padding-bottom: var(--cre8-spacing-4); gap: var(--cre8-spacing-8); border-width: var(--cre8-border-width-default); border-style: var(--cre8-border-style-default); cursor: pointer; &:focus-visible { @include focus; } /** * Neutral remove tag */ &.cre8-c-remove-tag--neutral { background-color: var(--cre8-color-bg-default); color: var(--cre8-color-content-default); border-color: var(--cre8-color-border-strong); &:hover, &:focus { background-color: var(--cre8-color-bg-default-hover); } } /** * Branded remove tag */ &.cre8-c-remove-tag--branded { background-color: var(--cre8-color-bg-brand); color: var(--cre8-color-content-default); border-color: var(--cre8-color-border-transparent); &:hover, &:focus { background-color: var(--cre8-color-bg-brand-hover); } } /** * Neutral Hybrid remove tag */ &.cre8-c-remove-tag--neutral-hybrid { background-color: var(--cre8-color-bg-default); color: var(--cre8-color-content-brand); border-color: var(--cre8-color-border-strong); &:hover, &:focus { background-color: var(--cre8-color-bg-default-hover); } } /** * Round remove tag */ &.cre8-c-remove-tag--round { border-radius: var(--cre8-border-radius-round); } /** * Square remove tag */ &.cre8-c-remove-tag--square { border-radius: var(--cre8-border-radius-small); } &:disabled { background-color: var(--cre8-color-bg-disabled); color: var(--cre8-color-content-disabled); border-color: var(--cre8-color-border-disabled); cursor: not-allowed; &:hover, &:focus { background-color: var(--cre8-color-bg-disabled); } } } .cre8-c-remove-tag-item__icon { align-items: center; width: size(2); height: size(2); }`"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/remove-tag/remove-tag.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/remove-tag/remove-tag.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "meta",
            "type": {
              "text": "object"
            },
            "default": "{ title: 'In Development/Remove Tag', component: 'cre8-remove-tag', parameters: { status: { type: 'inProgress' }, actions: { handles: ['click'], }, }, decorators: [withActions], render: (args) => html`<cre8-remove-tag ${spread(args)}></cre8-remove-tag>`, argTypes: { text: { control: 'text' }, color: { options: ['neutral', 'branded', 'neutral-hybrid'], control: { type: 'radio' } }, shape: { options: ['round', 'square'], control: { type: 'radio' } }, removed: { control: 'boolean' }, }, args: { text: 'Tag text', shape: 'neutral', color: 'round' } }"
          },
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Tag text', color: 'neutral', shape: 'round', }, }"
          },
          {
            "kind": "variable",
            "name": "NeutralSquare",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Tag text', color: 'neutral', shape: 'square', }, }",
            "description": "When used inside Multi-Select, the Remove Tag should always be `Neutral` and `Square`.  This is a very common use case for this component."
          },
          {
            "kind": "variable",
            "name": "NeutralHybridRound",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Tag text', color: 'neutral-hybrid', shape: 'round', } }",
            "description": "When used on its own, the Remove Tag should always be `Neutral Hybrid` and `Round`.  This is a common use case for this component."
          },
          {
            "kind": "variable",
            "name": "NeutralHybridSquare",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Tag text', color: 'neutral-hybrid', shape: 'square', } }"
          },
          {
            "kind": "variable",
            "name": "BrandedRound",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Tag text', color: 'branded', shape: 'round', } }",
            "description": "When used in a marketing context, the Remove Tag should be `Branded` and `Round`.  This is a common use case for this component."
          },
          {
            "kind": "variable",
            "name": "BrandedSquare",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Tag text', color: 'branded', shape: 'square', } }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "meta",
              "module": "components/remove-tag/remove-tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/remove-tag/remove-tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "NeutralSquare",
            "declaration": {
              "name": "NeutralSquare",
              "module": "components/remove-tag/remove-tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "NeutralHybridRound",
            "declaration": {
              "name": "NeutralHybridRound",
              "module": "components/remove-tag/remove-tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "NeutralHybridSquare",
            "declaration": {
              "name": "NeutralHybridSquare",
              "module": "components/remove-tag/remove-tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "BrandedRound",
            "declaration": {
              "name": "BrandedRound",
              "module": "components/remove-tag/remove-tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "BrandedSquare",
            "declaration": {
              "name": "BrandedSquare",
              "module": "components/remove-tag/remove-tag.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/remove-tag/remove-tag.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "Clicking a Remove Tag causes it to disappear from the page or field (in the case of Multi-Select).\nThese tags always display a \"Close\" icon.",
            "name": "Cre8RemoveTag",
            "members": [
              {
                "kind": "field",
                "name": "text",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The tag text",
                "attribute": "text"
              },
              {
                "kind": "field",
                "name": "color",
                "type": {
                  "text": "Color.Neutral | Color.Branded | Color.NeutralHybrid"
                },
                "description": "The tag color scheme\n\n - **neutral** should be used when doing non-link actions such as filters or multi-select, within forms, etc.\n - **neutral-hybrid** should be used for when tags are doing an action like a button or a link\n - **branded** should be used like Neutral, but for marketing / actionable items",
                "attribute": "color"
              },
              {
                "kind": "field",
                "name": "shape",
                "type": {
                  "text": "Shape.Round | Shape.Square"
                },
                "description": "The tag shape\n\n- **round** will give the tag a rounded border\n- **square** will give the tag a squared border",
                "attribute": "shape"
              },
              {
                "kind": "field",
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Disabled state for remove tag",
                "attribute": "disabled"
              },
              {
                "kind": "method",
                "name": "_handleRemoveTagClicked",
                "privacy": "private",
                "description": "Dispatches an event when the tag is clicked"
              }
            ],
            "attributes": [
              {
                "name": "text",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The tag text",
                "fieldName": "text"
              },
              {
                "name": "color",
                "type": {
                  "text": "Color.Neutral | Color.Branded | Color.NeutralHybrid"
                },
                "description": "The tag color scheme\n\n - **neutral** should be used when doing non-link actions such as filters or multi-select, within forms, etc.\n - **neutral-hybrid** should be used for when tags are doing an action like a button or a link\n - **branded** should be used like Neutral, but for marketing / actionable items",
                "fieldName": "color"
              },
              {
                "name": "shape",
                "type": {
                  "text": "Shape.Round | Shape.Square"
                },
                "description": "The tag shape\n\n- **round** will give the tag a rounded border\n- **square** will give the tag a squared border",
                "fieldName": "shape"
              },
              {
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Disabled state for remove tag",
                "fieldName": "disabled"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-remove-tag",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8RemoveTag",
            "declaration": {
              "name": "Cre8RemoveTag",
              "module": "components/remove-tag/remove-tag.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-remove-tag",
            "declaration": {
              "name": "Cre8RemoveTag",
              "module": "components/remove-tag/remove-tag.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8RemoveTag",
              "module": "components/remove-tag/remove-tag.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/section/section.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; #SECTION /** * 1) A major section of a page (<section> tag) with a title and optional description. */ .cre8-c-section { margin-bottom: size(4); display: block; } /** * Section header * 1) Contains the section title and possibly a description */ .cre8-c-section-header { display: flex; justify-content: space-between; } /** * Section body */ .cre8-c-section__body { padding-top: size(2); @media all and (min-width:$cre8-breakpoint-lg) { padding-top: size(4); } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/section/section.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/section/section.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "meta",
            "default": "{ title: 'cre8 Components/Section', component: 'cre8-section', parameters: { status: { type: 'inProgress' }, controls: { hideNoControlsWarning: true, }, }, argTypes:{ headline:{ control:{ type: 'text' } }, contents: { control:{ type: 'text' } } }, args: { headline: 'Section Headline', contents: `<cre8-text-passage> <p> This is a paragraph of text. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. </p> <p> <a href=\"#\">Lorem ipsum dolor sit amet</a>, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. </p> <blockquote style=\"margin-left:20px;\"> <p>This is a quotation from something.</p> <cite>Cite source</cite> </blockquote> <p> This is another paragraph of text. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. </p> </cre8-text-passage>`, }, render: ({headline, contents}) =>{ return html` <cre8-section headline=\"${headline}\"> ${unsafeHTML(sanitizeInput(contents, 'cre8-text-passage', 'cre8-heading', 'cre8-button'))} </cre8-section>` } } satisfies Meta<Props>"
          },
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "Story"
            },
            "default": "{}"
          },
          {
            "kind": "variable",
            "name": "CustomHeading",
            "type": {
              "text": "Story"
            },
            "default": "{ args:{ headline: undefined, contents: `<div style=\"display:flex; justify-content: space-between;\" slot=\"header\"> <cre8-heading tagVariant=\"h2\" slot=\"header\"> Section Heading </cre8-heading> <cre8-button iconPosition=\"before\" variant=\"secondary\" iconName=\"search\" text=\"ID cards\"></cre8-button> </div> <cre8-text-passage> <p> This is a paragraph of text. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. </p> <p> <a href=\"#\">Lorem ipsum dolor sit amet</a>, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. </p> </cre8-text-passage>` } }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "meta",
              "module": "components/section/section.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/section/section.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "CustomHeading",
            "declaration": {
              "name": "CustomHeading",
              "module": "components/section/section.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/section/section.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The section component acts as a block level HTML element that takes a 'headline' property\nthat renders the section's heading which wraps around any HTML template\nthat is found under this heading in the page layout.\n\n# How to Use\n1. Use the headline attribute to create the section header, or if you need a more custom header\n   there is a slot=\"header\" that you can target for inserting a custom template.\n2. For the main body contents, any html template can be placed inside the cre8-section component\n   and will automatically render below the header.\n\nNote: for a section with a dark background please control this with the internal Components' inverted attributes.",
            "name": "Cre8Section",
            "slots": [
              {
                "description": "content of the section should go here. It could be a cre8-text-passage, a cre8-card or any other block level html.",
                "name": "The"
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "headline",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The Headline will be rendered as the Section Headline with the correct brand styling applied",
                "attribute": "headline"
              }
            ],
            "attributes": [
              {
                "name": "headline",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The Headline will be rendered as the Section Headline with the correct brand styling applied",
                "fieldName": "headline"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-section",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Section",
            "declaration": {
              "name": "Cre8Section",
              "module": "components/section/section.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-section",
            "declaration": {
              "name": "Cre8Section",
              "module": "components/section/section.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Section",
              "module": "components/section/section.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/skeleton-loader/skeleton-loader.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; :host { display: block; } /** * Skeleton Loader * The hard coded value for color here is intentional and is uniform across all brands */ .cre8-c-skeleton-loader { width: 100%; height: auto; border-radius: var(--cre8-border-radius-small); aspect-ratio: 16 / 3; background: linear-gradient(-90deg, #f6f6f6 0%, #ebebeb 50%, #f6f6f6 100%); background-size: 400% 400%; animation: pulse 1.25s linear infinite; } /** * Skeleton Loader - Rectangle */ .cre8-c-skeleton-loader--rectangle { aspect-ratio: 16 / 6; } /** * Skeleton Loader - Square */ .cre8-c-skeleton-loader--square { aspect-ratio: 1 / 1; } /** * Skeleton Loader - Circle */ .cre8-c-skeleton-loader--circle { aspect-ratio: 1 / 1; border-radius: 50%; } /** * Pulsing animation for loading look */ @keyframes pulse { 0% { background-position: 0% 0%; } 100% { background-position: -135% 0%; } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/skeleton-loader/skeleton-loader.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/skeleton-loader/skeleton-loader.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{}"
          },
          {
            "kind": "variable",
            "name": "Rectangle",
            "type": {
              "text": "object"
            },
            "default": "{ args: { variant: 'rectangle', }, }"
          },
          {
            "kind": "variable",
            "name": "Square",
            "type": {
              "text": "object"
            },
            "default": "{ args: { variant: 'square', }, }"
          },
          {
            "kind": "variable",
            "name": "Circle",
            "type": {
              "text": "object"
            },
            "default": "{ args: { variant: 'circle', }, }"
          },
          {
            "kind": "variable",
            "name": "CustomHeightWidth",
            "type": {
              "text": "object"
            },
            "default": "{ args: { height: '20px', width: '300px', }, }"
          },
          {
            "kind": "variable",
            "name": "CustomHeight",
            "type": {
              "text": "object"
            },
            "default": "{ args: { height: '100px', }, }"
          },
          {
            "kind": "variable",
            "name": "CustomWidth",
            "type": {
              "text": "object"
            },
            "default": "{ args: { width: '100px', }, }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/skeleton-loader/skeleton-loader.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/skeleton-loader/skeleton-loader.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Rectangle",
            "declaration": {
              "name": "Rectangle",
              "module": "components/skeleton-loader/skeleton-loader.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Square",
            "declaration": {
              "name": "Square",
              "module": "components/skeleton-loader/skeleton-loader.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Circle",
            "declaration": {
              "name": "Circle",
              "module": "components/skeleton-loader/skeleton-loader.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "CustomHeightWidth",
            "declaration": {
              "name": "CustomHeightWidth",
              "module": "components/skeleton-loader/skeleton-loader.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "CustomHeight",
            "declaration": {
              "name": "CustomHeight",
              "module": "components/skeleton-loader/skeleton-loader.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "CustomWidth",
            "declaration": {
              "name": "CustomWidth",
              "module": "components/skeleton-loader/skeleton-loader.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/skeleton-loader/skeleton-loader.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "Skeleton Loader allows for the ability to create placeholder UI loading states.\nDevelopers are encouraged to pass into the Skeleton Loader their own parameters\nto create simple (or complex) loading screens.\n\n## How to Use\nSkeleton states are simplified versions of components used on an initial page load\nto indicate that the information on the page has not fully loaded yet.\nThey only appear for only a few seconds, disappearing once components and content populate the page.\nThese loaders use motion to convey that the page is not stuck and that data is still being loaded.\nThis can help to reduce user uncertainty. Skeleton objects should generally be visualized\nby simple primitives which mimic the original content in a recognizable way.\nIt is recommended to use a more elaborate form if that is needed to make the component recognizable.\n\nNever represent toast notifications, overflow menus, dropdown items, modals, and loaders with skeleton states.\nElements inside a modal may have a skeleton state, but the modal itself should not.\n\n**IMPORTANT!** This is not a loading element and will provide no value to a screen reader user,\nthis is a decorative element only!",
            "name": "Cre8SkeletonLoader",
            "members": [
              {
                "kind": "field",
                "name": "variant",
                "type": {
                  "text": "\"rectangle\" | \"square\" | \"circle\""
                },
                "default": "'rectangle'",
                "description": "Style variant\n- **rectangle** renders a featureless rectangle as a placeholder for loading elements\n- **square** renders a featureless square as a placeholder for loading elements\n- **circle** renders a featureless circle as a placeholder for loading elements",
                "attribute": "variant"
              },
              {
                "kind": "field",
                "name": "height",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Height inline style\n1. Used to set a height on the skeleton if specific size is needed",
                "attribute": "height"
              },
              {
                "kind": "field",
                "name": "width",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Width inline style\n1. Used to set a width on the skeleton if specific size is needed",
                "attribute": "width"
              }
            ],
            "attributes": [
              {
                "name": "variant",
                "type": {
                  "text": "\"rectangle\" | \"square\" | \"circle\""
                },
                "default": "'rectangle'",
                "description": "Style variant\n- **rectangle** renders a featureless rectangle as a placeholder for loading elements\n- **square** renders a featureless square as a placeholder for loading elements\n- **circle** renders a featureless circle as a placeholder for loading elements",
                "fieldName": "variant",
                "attribute": "variant"
              },
              {
                "name": "height",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Height inline style\n1. Used to set a height on the skeleton if specific size is needed",
                "fieldName": "height",
                "attribute": "height"
              },
              {
                "name": "width",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Width inline style\n1. Used to set a width on the skeleton if specific size is needed",
                "fieldName": "width",
                "attribute": "width"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-skeleton-loader",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8SkeletonLoader",
            "declaration": {
              "name": "Cre8SkeletonLoader",
              "module": "components/skeleton-loader/skeleton-loader.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-skeleton-loader",
            "declaration": {
              "name": "Cre8SkeletonLoader",
              "module": "components/skeleton-loader/skeleton-loader.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8SkeletonLoader",
              "module": "components/skeleton-loader/skeleton-loader.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/select-tile/select-tile-checkbox-controller.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "This Controller handles the special checkbox logic.\nThis should be a lot simpler than the radio version.\n\nSee https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/checkbox_role",
            "name": "SelectTileCheckboxController",
            "members": [
              {
                "kind": "field",
                "name": "host",
                "type": {
                  "text": "FormElement"
                },
                "privacy": "private",
                "default": "host"
              },
              {
                "kind": "method",
                "name": "hostConnected",
                "return": {
                  "type": {
                    "text": "void"
                  }
                }
              },
              {
                "kind": "method",
                "name": "hostDisconnected",
                "return": {
                  "type": {
                    "text": "void"
                  }
                }
              },
              {
                "kind": "field",
                "name": "_clickHandler",
                "privacy": "private",
                "description": "Handle clicking on the radio button"
              },
              {
                "kind": "field",
                "name": "_checkAndFocus",
                "privacy": "private",
                "description": "Set the element to `checked`\n2) Set us to checked."
              },
              {
                "kind": "field",
                "name": "_handleKeyDown",
                "privacy": "private",
                "description": "Handle keydown"
              },
              {
                "kind": "field",
                "name": "_handleEnterSpace",
                "privacy": "private",
                "description": "Handle Enter and Space"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "SelectTileCheckboxController",
            "declaration": {
              "name": "SelectTileCheckboxController",
              "module": "components/select-tile/select-tile-checkbox-controller.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "SelectTileCheckboxController",
              "module": "components/select-tile/select-tile-checkbox-controller.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/select-tile/select-tile-radio-controller.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "This Controller handles the special radio button logic.\n\n- Handle clicks and key presses, which involves\n  - Unchecking other select-tile's when this one is checked, if they are in the same form.\n  - Changing focus between `0` and `-1`, and moving focus correctly on key press\n  - checking/unchecking on spacebar\n\nSee also https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/radio_role\nand https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/radiogroup_role\n\nAlso see https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-autonomous-drawbacks\n\nThis started out as a copy of radio-field-item.ts.\n\nPart of the reason I extracted this was to see if I could share this logic with radio-field-item,\nbut that would be separate refactor.\n\nIt might also be good for the \"checkbox\" mode of select-tile.\n\nAnd it might also just be a cleaner separation of concerns.",
            "name": "SelectTileRadioController",
            "members": [
              {
                "kind": "field",
                "name": "host",
                "type": {
                  "text": "FormElement"
                },
                "privacy": "private",
                "default": "host"
              },
              {
                "kind": "method",
                "name": "hostConnected",
                "return": {
                  "type": {
                    "text": "void"
                  }
                }
              },
              {
                "kind": "method",
                "name": "hostDisconnected",
                "return": {
                  "type": {
                    "text": "void"
                  }
                }
              },
              {
                "kind": "method",
                "name": "hostUpdate",
                "return": {
                  "type": {
                    "text": "void"
                  }
                }
              },
              {
                "kind": "method",
                "name": "findAllElementsInSameRadioButtonGroup",
                "parameters": [
                  {
                    "name": "{ excludeDisabled }",
                    "default": "{}",
                    "type": {
                      "text": "{ excludeDisabled?: boolean}"
                    }
                  }
                ],
                "description": "Find all elements that are in the same \"radio button group\", following the HTML 5 spec,\nexcept that we're looking at `[role=\"radio\"]` instead of `input[type=\"radio\"]`.\n\n- They have the attribute role=\"radio\" set\n- They have the same form owner, or both have no form owner\n- They're in the same tree (same document, don't look at shadow dom)\n- They both have non-empty name attributes, and the names are the same"
              },
              {
                "kind": "method",
                "name": "removeChecked",
                "description": "Remove checked\n1) Reset the form field to not checked\n2) Remove checked property from all items and set tabindex to -1"
              },
              {
                "kind": "field",
                "name": "_clickHandler",
                "privacy": "private",
                "description": "Handle clicking on the radio button"
              },
              {
                "kind": "field",
                "name": "_checkAndFocus",
                "privacy": "private",
                "description": "Set the element to `checked`\n1) Remove `checked` and set tabindex to -1 on all elements in our radio group\n2) Set us to checked.\n3) Set our tabindex to 0"
              },
              {
                "kind": "field",
                "name": "_handleKeyDown",
                "privacy": "private",
                "description": "Handle keydown\n1) If left or up arrow key is struck and radio field item exists before current item,\n   remove checked from all items and add it to the next item\n2) If right or down arrow key is struck and radio field item exists after current item,\n   remove checked from all items and add checked to the next item.\n   Focus on this item and set tabindex for when focusing out of radio field and back onto checked item.\n3) If the element is in focused, then for event emission the\n   current focues element should be clicked to emit event.\n4) If the Enter key is pressed, then check the radio if no other radio items are checked"
              },
              {
                "kind": "field",
                "name": "_handleArrowKeys",
                "privacy": "private"
              },
              {
                "kind": "field",
                "name": "_handleEnterSpace",
                "privacy": "private",
                "description": "Handle Enter and Space"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "SelectTileRadioController",
            "declaration": {
              "name": "SelectTileRadioController",
              "module": "components/select-tile/select-tile-radio-controller.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "SelectTileRadioController",
              "module": "components/select-tile/select-tile-radio-controller.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/select-tile/select-tile.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #SELECT-TILE :host { display: inline-flex; } .cre8-c-select-tile { position: relative; overflow: hidden; cursor: pointer; display: flex; flex-direction: column; height: 100%; width: 100%; padding: size(2); gap: 1rem; border-color: var(--cre8-color-border-default); border-width: var(--cre8-border-width-default); border-radius: var(--cre8-border-radius-default); border-style: solid; background: var(--cre8-color-bg-default); &:hover, &:focus, &:focus-visible, &:active { background: var(--cre8-color-bg-default-hover); border-color: var(--cre8-color-border-brand); } &:focus, &:focus-visible { @includefocus(); } &.cre8-c-select-tile--error { border-color: var(--cre8-color-border-error); background: var(--cre8-color-bg-error); } &.cre8-c-select-tile--success { border-color: var(--cre8-color-border-success); background: var(--cre8-color-bg-success); } &.cre8-c-select-tile--disabled { border-color: var(--cre8-color-border-disabled); background: var(--cre8-color-bg-disabled); cursor: not-allowed; } } input:checked + .cre8-c-select-tile { border-width: 2px; border-color: var(--cre8-color-border-brand); } .cre8-c-select-tile__input { display: none; } /** * Horizontal select-tile * 1) Organized block with flex-direction set to row so that header => footer appears * from left to right rather than top to bottom */ .cre8-c-select-tile--horizontal { flex-direction: row; align-items: center; justify-content: center; } @mixin cre8-c-select-tile--vertical-at-bp($breakpoint) { @media all and (max-width: $breakpoint) { flex-direction: column; .cre8-c-select-tile__custom-radio { position: absolute; top: size(1); right: size(1); } } } .cre8-c-select-tile--vertical-at-sm { @include cre8-c-select-tile--vertical-at-bp(component.$cre8-breakpoint-sm); } .cre8-c-select-tile--vertical-at-sm-2 { @include cre8-c-select-tile--vertical-at-bp(component.$cre8-breakpoint-sm); } .cre8-c-select-tile--vertical-at-md { @include cre8-c-select-tile--vertical-at-bp(component.$cre8-breakpoint-md); } .cre8-c-select-tile--vertical-at-lg { @include cre8-c-select-tile--vertical-at-bp(component.$cre8-breakpoint-lg); } .cre8-c-select-tile--vertical-at-xl { @include cre8-c-select-tile--vertical-at-bp(component.$cre8-breakpoint-xl); } .cre8-c-select-tile--vertical-at-xxl { @include cre8-c-select-tile--vertical-at-bp(component.$cre8-breakpoint-xxl); } /** * Bare select-tile * 1) Organized block without a border, background, or padding */ .cre8-c-select-tile--bare { border: var(--cre8-border-width-none); padding: var(--cre8-spacing-0); box-shadow: none; } /** * Horizontal-bare select-tile * 1) Organized block with flex-direction set to row so that header => footer appears * from left to right rather than top to bottom without a border, background, or padding */ .cre8-c-select-tile--horizontal-bare { flex-direction: row; border: var(--cre8-border-width-none); padding: var(--cre8-spacing-0); box-shadow: none; align-items: center; justify-content: center; } /** * Center aligned select-tile * 1) Center content and text within the select-tile */ .cre8-c-select-tile--align-center { text-align: center; /* 1 */ align-items: center; /* 1 */ justify-content: center; /* 1 */ } /** * Slotted image within a select-tile * 1) Make the image full width */ ::slotted(img) { width: 100%; } /** * Select tile header * 1) Remove flex so that body always takes up remaining space */ .cre8-c-select-tile__header { display: block; flex: none; /* 1 */ } /** * Select Tile body * 1) Flex applied to always fill the remaining space of the select-tile */ .cre8-c-select-tile__body { display: block; flex: 1 1 auto; /* 1 */ /** * Select Tile body within bare select-tile * 1) Remove padding */ .cre8-c-select-tile--bare & { padding: var(--cre8-spacing-0); } .cre8-c-select-tile--horizontal-bare & { padding: var(--cre8-spacing-0); } .cre8-c-select-tile__body_title { @include cre8-typography-title-default(); } .cre8-c-select-tile__body_body { @include cre8-typography-body-default(); } } /** * Select Tile footer * 1) Remove flex so that body always takes up remaining space */ .cre8-c-select-tile__footer { display: flex; flex: none; /* 1 */ .cre8-c-select-tile--bare & { padding: var(--cre8-spacing-0); } .cre8-c-select-tile--horizontal-bare & { padding: var(--cre8-spacing-0); } } .cre8-c-select-tile__custom-radio, .cre8-c-select-tile__custom-checkbox { /** * Render the checkmark/radio button on the left instead of the right. * Since it is only visual and the \"checked\" state is also set via aria, * there are hopefully no a11y issues with using order here. */ &.cre8-c-select-tile__custom-radio-left { order: -1; } &.cre8-c-select-tile__custom-radio-none { display: none; } } @mixin cre8-c-select-radio-top-right($breakpoint: 0) { position: absolute; top: size(1); right: size(1); @if $breakpoint != 0 { @media all and (min-width: $breakpoint) { position: static; } } } /** * Radio field item custom radio container */ .cre8-c-select-tile__custom-radio { display: flex; flex: none; height: size(3); width: size(3); cursor: pointer; align-items: center; justify-content: center; border-radius: var(--cre8-border-radius-round); border-width: var(--cre8-border-width-default); border-style: var(--cre8-border-style-default); background-color: var(--cre8-color-bg-default); border-color: var(--cre8-color-border-default); /** * Radio field item custom radio focus visible custom outline */ .cre8-c-select-tile__input:focus-visible + & { border-color: var(--cre8-color-border-strong); @include focus; .cre8-c-select-tile--error & { @include focusError; border-color: var(--cre8-color-border-error); } } /** * Radio field item custom radio within radio field with error */ .cre8-c-select-tile--error & { border-color: var(--cre8-color-border-error); } /** * Radio field item custom radio within radio field disabled */ .cre8-c-select-tile--disabled & { cursor: not-allowed; background-color: var(--cre8-color-bg-disabled); border-color: var(--cre8-color-border-disabled); } } .cre8-c-select-tile__custom-radio-top-right { @include technology.cre8-c-select-radio-top-right(); } /** * Check radio variant */ .cre8-c-select-tile__custom-radio-check { .cre8-c-select-tile__icon { display: flex; } } /** * Radio field item inner circle */ .cre8-c-select-tile__inner-circle { display: none; cursor: pointer; height: size(1.5); width: size(1.5); background: var(--cre8-color-content-brand); border-radius: var(--cre8-border-radius-round); /** Check radio variant */ .cre8-c-select-tile__custom-radio-check & { flex: none; height: size(3); width: size(3); align-items: center; justify-content: center; } /** * Radio field item inner circle error */ .cre8-c-select-tile--error & { background: var(--cre8-color-bg-error-strong); } /** * Radio field item inner circle disabled */ .cre8-c-select-tile--disabled & { background: var(--cre8-color-content-disabled); } /** * Radio field item inner circle will display if the input is checked */ input:checked ~ * .cre8-c-select-tile__custom-radio & { display: flex; } } // These styles are for the checkbox version /** * Checkbox field item custom checkbox container */ .cre8-c-select-tile__custom-checkbox { display: flex; flex: none; height: size(3); width: size(3); cursor: pointer; align-items: center; justify-content: center; border-radius: var(--cre8-border-radius-small); border-width: var(--cre8-border-width-default); border-style: var(--cre8-border-style-default); background-color: var(--cre8-color-bg-default); border-color: var(--cre8-color-border-strong); /** * Checkbox field item custom checkbox focus visible custom outline */ .cre8-c-select-tile__input:focus-visible + & { @include focus; .cre8-c-select-tile--error & { @include focusError; } } /** * Checkbox field item custom checkbox within checkbox field with error */ .cre8-c-select-tile--error & { background-color: var(--cre8-color-bg-default); border-color: var(--cre8-color-border-error); } /** * Checkbox field item custom checkbox within checkbox field with disabled */ .cre8-c-select-tile--disabled & { cursor: not-allowed; background-color: var(--cre8-color-bg-disabled); border-color: var(--cre8-color-border-disabled); } } /** * Checkbox field item custom checkbox when item is checked */ input:checked ~ * .cre8-c-select-tile__custom-checkbox { background-color: var(--cre8-color-bg-brand-strong); /** * Checkbox field item custom checkbox when item is checked with error */ .cre8-c-select-tile--error & { background-color: var(--cre8-color-bg-default); } /** * Checkbox field item custom checkbox when item is checked with disabled */ .cre8-c-select-tile--disabled & { background-color: var(--cre8-color-bg-disabled); } } /** * Checkbox field item checkmark icon */ .cre8-c-select-tile__icon { display: none; color: var(--cre8-color-content-knockout); /** * Checkbox field item icon within checkbox field with error */ .cre8-c-select-tile--error & { color: var(--cre8-color-content-error); } /** * Checkbox field item icon within checkbox field disabled */ .cre8-c-select-tile--disabled & { color: var(--cre8-color-content-disabled); } /** * Checkbox field item icon will display in the box if the input is checked */ input:checked ~ * .cre8-c-select-tile__custom-checkbox & { display: flex; } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/select-tile/select-tile.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/select-tile/select-tile.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "Horizontal",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "TitleAndBody",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "TitleAndBodyRealistic",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "TitleAndBodyRealisticLeft",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "FormRealistic",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "FormRealisticChecks",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "Bare"
          },
          {
            "kind": "function",
            "name": "HorizontalBare"
          },
          {
            "kind": "function",
            "name": "ErrorRealistic",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "SuccessRealistic",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "DisabledRealistic",
            "parameters": [
              {
                "name": "args"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/select-tile/select-tile.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/select-tile/select-tile.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Horizontal",
            "declaration": {
              "name": "Horizontal",
              "module": "components/select-tile/select-tile.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TitleAndBody",
            "declaration": {
              "name": "TitleAndBody",
              "module": "components/select-tile/select-tile.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TitleAndBodyRealistic",
            "declaration": {
              "name": "TitleAndBodyRealistic",
              "module": "components/select-tile/select-tile.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "TitleAndBodyRealisticLeft",
            "declaration": {
              "name": "TitleAndBodyRealisticLeft",
              "module": "components/select-tile/select-tile.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "FormRealistic",
            "declaration": {
              "name": "FormRealistic",
              "module": "components/select-tile/select-tile.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "FormRealisticChecks",
            "declaration": {
              "name": "FormRealisticChecks",
              "module": "components/select-tile/select-tile.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Bare",
            "declaration": {
              "name": "Bare",
              "module": "components/select-tile/select-tile.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "HorizontalBare",
            "declaration": {
              "name": "HorizontalBare",
              "module": "components/select-tile/select-tile.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "ErrorRealistic",
            "declaration": {
              "name": "ErrorRealistic",
              "module": "components/select-tile/select-tile.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SuccessRealistic",
            "declaration": {
              "name": "SuccessRealistic",
              "module": "components/select-tile/select-tile.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "DisabledRealistic",
            "declaration": {
              "name": "DisabledRealistic",
              "module": "components/select-tile/select-tile.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/select-tile/select-tile.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The Select Tile component is a short block of content inside a visual\ncontainer that can be used in place of checkboxes, radio buttons, and\nlinks.  It allows you to add more descriptive and visually appealing\ncontent for these actions while letting you compare different choices\neither side-by-side or on top of each other.\n\nTypically you could use the \"header\" slot for an icon, and the \"title\"\nand \"body\" slots for a content title and body text below it.\n\nThe css parts are shown here wrapped in ::part() because otherwise Storybook\nwon't render them and the slots if they have the same name.\nSee https://developer.mozilla.org/en-US/docs/Web/CSS/::part",
            "name": "Cre8SelectTile",
            "cssParts": [
              {
                "description": "The main wrapping element",
                "name": "::part(select-tile)"
              },
              {
                "description": "The header element wrapping the left or top element",
                "name": "::part(header)"
              },
              {
                "description": "The footer element wrapping the right element",
                "name": "::part(footer)"
              },
              {
                "description": "The main body of the select-tile, wrapper around the default slot",
                "name": "::part(body)"
              },
              {
                "description": "The element that wraps the \"title\" slot",
                "name": "::part(body-title)"
              },
              {
                "description": "The element that wraps the \"body\" slot",
                "name": "::part(body-body)"
              }
            ],
            "slots": [
              {
                "description": "The default slot goes into the center, main part of the Select Tile. Consider using title and body instead."
              },
              {
                "description": "The top or left part of the Select Tile",
                "name": "header"
              },
              {
                "description": "The bottom or right part of the Select Tile",
                "name": "footer"
              },
              {
                "description": "The title part of the Select Tile, use with body slot and instead of the default slot for appropriate typography.",
                "name": "title"
              },
              {
                "description": "The \"body\" part of the Select Tile, which appears under the title slot and receives apporpriate typography.",
                "name": "body"
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "shadowRootOptions",
                "type": {
                  "text": "object"
                },
                "static": true,
                "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true }"
              },
              {
                "kind": "field",
                "name": "_controller",
                "type": {
                  "text": "SelectTileRadioController | SelectTileCheckboxController | undefined"
                },
                "privacy": "private",
                "default": "undefined"
              },
              {
                "kind": "field",
                "name": "type",
                "type": {
                  "text": "'radio' | 'checkbox'"
                },
                "default": "'radio'",
                "description": "Should this Select Tile behave as a radio button or a checkbox?",
                "attribute": "type",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "field",
                "type": {
                  "text": "HTMLInputElement"
                },
                "description": "Get the radio field item input"
              },
              {
                "kind": "field",
                "name": "variant",
                "type": {
                  "text": "'bare' | 'horizontal' | 'horizontal-bare' | undefined"
                },
                "description": "Style variants\n- **bare** renders a select-tile without a border and without padding around the content\n- **horizontal** renders a select-tile with header, body, footer oriented in a row rather than a column\n- **horizontal-bare** renders a select-tile with header, body, footer\n  oriented in a row rather than a column without a border and without padding around the content",
                "attribute": "variant",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "variantBreakToVertical",
                "type": {
                  "text": "'sm' | 'sm-2' | 'md' | 'lg' | 'xl' | 'xxl' | 'none'"
                },
                "default": "'sm'",
                "description": "Which breakpoint, if any, to switch to verticial.\nOnly useful for horizontal variants. Defaults to 'sm'.",
                "attribute": "variantBreakToVertical",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "checkPosition",
                "type": {
                  "text": "'left' | 'right' | 'top-right' | 'none'"
                },
                "default": "'right'",
                "description": "Where does the checkmark or radio button go?\nIt disappears on 'none'. Only top-right is supported for vertical variants.",
                "attribute": "checkPosition",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "radioVariant",
                "type": {
                  "text": "'dot' | 'check'"
                },
                "default": "'dot'",
                "description": "In radio mode, whether to use the circle with the dot, or the rounded check.",
                "attribute": "radioVariant",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "align",
                "type": {
                  "text": "'center' | undefined"
                },
                "description": "Align variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**center** renders a select-tile that has center aligned content/text</li>\n</ul>\n</cre8-text-passage>",
                "attribute": "align",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "isError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Error State",
                "attribute": "isError",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Disabled State",
                "attribute": "disabled",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "required",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Required attribute",
                "attribute": "required",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "checked",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Checked State.\nNote: the `checked` attribute sets the `defaultChecked` property, as well\nas sets the initial value for the `checked` property.",
                "attribute": "checked",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "defaultChecked",
                "type": {
                  "text": "boolean"
                },
                "description": "The default checked state when the element first renders or is reset.\n\nNote: the attribute is named `checked` and the property is\nnamed `defaultChecked`. This is the same as a regular radio button.",
                "attribute": "checked",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "fieldId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Select Tile FieldId",
                "attribute": "fieldId"
              },
              {
                "kind": "field",
                "name": "name",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Name of the form control.",
                "attribute": "name",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "ariaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "privacy": "private",
                "description": "Radio item fieldnote aria describe by",
                "attribute": "ariaDescribedBy"
              },
              {
                "kind": "field",
                "name": "isSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Radio item fieldnote isSuccess",
                "attribute": "isSuccess",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "form",
                "description": "The form associated with this field\n\nTOOD: maybe this goes on Cre8FormElement",
                "readonly": true
              },
              {
                "kind": "method",
                "name": "formResetCallback",
                "return": {
                  "type": {
                    "text": "void"
                  }
                },
                "description": "Reset form callback\n1) Remove the checked state from all radio elements\n2) Set the checked state to the initial checked state\n3) Set the radio field input checked attribute to the initial checked state"
              },
              {
                "kind": "method",
                "name": "renderInput"
              },
              {
                "kind": "method",
                "name": "renderCheckboxIcon"
              }
            ],
            "events": [
              {
                "name": "change"
              },
              {
                "name": "input"
              }
            ],
            "attributes": [
              {
                "name": "type",
                "type": {
                  "text": "'radio' | 'checkbox'"
                },
                "default": "'radio'",
                "description": "Should this Select Tile behave as a radio button or a checkbox?",
                "fieldName": "type"
              },
              {
                "name": "variant",
                "type": {
                  "text": "'bare' | 'horizontal' | 'horizontal-bare' | undefined"
                },
                "description": "Style variants\n- **bare** renders a select-tile without a border and without padding around the content\n- **horizontal** renders a select-tile with header, body, footer oriented in a row rather than a column\n- **horizontal-bare** renders a select-tile with header, body, footer\n  oriented in a row rather than a column without a border and without padding around the content",
                "fieldName": "variant"
              },
              {
                "name": "variantBreakToVertical",
                "type": {
                  "text": "'sm' | 'sm-2' | 'md' | 'lg' | 'xl' | 'xxl' | 'none'"
                },
                "default": "'sm'",
                "description": "Which breakpoint, if any, to switch to verticial.\nOnly useful for horizontal variants. Defaults to 'sm'.",
                "fieldName": "variantBreakToVertical"
              },
              {
                "name": "checkPosition",
                "type": {
                  "text": "'left' | 'right' | 'top-right' | 'none'"
                },
                "default": "'right'",
                "description": "Where does the checkmark or radio button go?\nIt disappears on 'none'. Only top-right is supported for vertical variants.",
                "fieldName": "checkPosition"
              },
              {
                "name": "radioVariant",
                "type": {
                  "text": "'dot' | 'check'"
                },
                "default": "'dot'",
                "description": "In radio mode, whether to use the circle with the dot, or the rounded check.",
                "fieldName": "radioVariant"
              },
              {
                "name": "align",
                "type": {
                  "text": "'center' | undefined"
                },
                "description": "Align variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**center** renders a select-tile that has center aligned content/text</li>\n</ul>\n</cre8-text-passage>",
                "fieldName": "align"
              },
              {
                "name": "isError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Error State",
                "fieldName": "isError"
              },
              {
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Disabled State",
                "fieldName": "disabled"
              },
              {
                "name": "required",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Required attribute",
                "fieldName": "required"
              },
              {
                "name": "checked",
                "type": {
                  "text": "boolean"
                },
                "description": "The default checked state when the element first renders or is reset.\n\nNote: the attribute is named `checked` and the property is\nnamed `defaultChecked`. This is the same as a regular radio button.",
                "fieldName": "defaultChecked"
              },
              {
                "name": "fieldId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Select Tile FieldId",
                "fieldName": "fieldId"
              },
              {
                "name": "name",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Name of the form control.",
                "fieldName": "name"
              },
              {
                "name": "ariaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Radio item fieldnote aria describe by",
                "fieldName": "ariaDescribedBy"
              },
              {
                "name": "isSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Radio item fieldnote isSuccess",
                "fieldName": "isSuccess"
              }
            ],
            "superclass": {
              "name": "Cre8FormElement",
              "module": "/components/cre8-form-element"
            },
            "tagName": "cre8-select-tile",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8SelectTile",
            "declaration": {
              "name": "Cre8SelectTile",
              "module": "components/select-tile/select-tile.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-select-tile",
            "declaration": {
              "name": "Cre8SelectTile",
              "module": "components/select-tile/select-tile.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8SelectTile",
              "module": "components/select-tile/select-tile.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/select-tile-list/select-tile-list.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /*------------------------------------*\\ #SELECT-TILE-LIST \\*------------------------------------*/ :host { display: block; } /** * 1) Fieldset used for checkbox items */ .cre8-c-select-tile-list { border: var(--cre8-border-width-none); padding: var(--cre8-spacing-0); margin: var(--cre8-spacing-0); } /** * Checkbox field legend */ .cre8-c-select-tile-list__legend { @include cre8-typography-label-default; margin-bottom: size(1); } .cre8-c-select-tile-list__list { gap: size(3); display: grid; grid-template-columns: repeat(auto-fit, var(--cre8-select-tile-list-item-width, size(26))); .cre8-c-select-tile-list__rows & { grid-template-columns: unset; } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/select-tile-list/select-tile-list.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/select-tile-list/select-tile-list.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "meta",
            "type": {
              "text": "Meta"
            },
            "default": "{ title: 'In Development/Select Tile List', component: 'cre8-select-tile-list', parameters: { status: { type: 'beta' } }, decorators: [(story) => html`<form>\\n${story()}\\n</form>`], }"
          },
          {
            "kind": "function",
            "name": "SelectTileList"
          },
          {
            "kind": "function",
            "name": "SelectTileListHorizontal"
          },
          {
            "kind": "function",
            "name": "SelectTileListChecks"
          },
          {
            "kind": "function",
            "name": "SelectTileListChecksHorizontal"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "meta",
              "module": "components/select-tile-list/select-tile-list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SelectTileList",
            "declaration": {
              "name": "SelectTileList",
              "module": "components/select-tile-list/select-tile-list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SelectTileListHorizontal",
            "declaration": {
              "name": "SelectTileListHorizontal",
              "module": "components/select-tile-list/select-tile-list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SelectTileListChecks",
            "declaration": {
              "name": "SelectTileListChecks",
              "module": "components/select-tile-list/select-tile-list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "SelectTileListChecksHorizontal",
            "declaration": {
              "name": "SelectTileListChecksHorizontal",
              "module": "components/select-tile-list/select-tile-list.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/select-tile-list/select-tile-list.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "Select Tile List is a container design to hold multiple Select Tile Components.",
            "name": "Cre8SelectTileList",
            "cssProperties": [
              {
                "description": "Width of each child. Not used for horizontal.",
                "name": "--cre8-select-tile-list-item-width"
              }
            ],
            "slots": [
              {
                "description": "The default slot norminally contains multiple `<select-tile />` Components."
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "variant",
                "type": {
                  "text": "'columns' | 'rows'"
                },
                "default": "'columns'",
                "description": "Whether to show the tiles side by side (columns) or stacked vertically (rows).",
                "attribute": "variant",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "label",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Select Tile container label",
                "attribute": "label",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "fieldNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Select Tile container fieldnote",
                "attribute": "fieldNote",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "ariaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Select Tile container fieldnote aria describe by",
                "attribute": "ariaDescribedBy"
              },
              {
                "kind": "field",
                "name": "fieldNoteIconName",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Select Tile container fieldnote icon name",
                "attribute": "fieldNoteIconName",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "fieldNoteKnockout",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Select Tile container fieldnote knockout",
                "attribute": "fieldNoteKnockout",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "fieldNoteIsSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Select Tile container fieldnote isSuccess",
                "attribute": "fieldNoteIsSuccess",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "fieldNoteIsError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Select Tile container fieldnote isError",
                "attribute": "fieldNoteIsError",
                "reflects": true
              }
            ],
            "attributes": [
              {
                "name": "variant",
                "type": {
                  "text": "'columns' | 'rows'"
                },
                "default": "'columns'",
                "description": "Whether to show the tiles side by side (columns) or stacked vertically (rows).",
                "fieldName": "variant"
              },
              {
                "name": "label",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Select Tile container label",
                "fieldName": "label"
              },
              {
                "name": "fieldNote",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Select Tile container fieldnote",
                "fieldName": "fieldNote"
              },
              {
                "name": "ariaDescribedBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Select Tile container fieldnote aria describe by",
                "fieldName": "ariaDescribedBy"
              },
              {
                "name": "fieldNoteIconName",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Select Tile container fieldnote icon name",
                "fieldName": "fieldNoteIconName"
              },
              {
                "name": "fieldNoteKnockout",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Select Tile container fieldnote knockout",
                "fieldName": "fieldNoteKnockout"
              },
              {
                "name": "fieldNoteIsSuccess",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Select Tile container fieldnote isSuccess",
                "fieldName": "fieldNoteIsSuccess"
              },
              {
                "name": "fieldNoteIsError",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Select Tile container fieldnote isError",
                "fieldName": "fieldNoteIsError"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-select-tile-list",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8SelectTileList",
            "declaration": {
              "name": "Cre8SelectTileList",
              "module": "components/select-tile-list/select-tile-list.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-select-tile-list",
            "declaration": {
              "name": "Cre8SelectTileList",
              "module": "components/select-tile-list/select-tile-list.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8SelectTileList",
              "module": "components/select-tile-list/select-tile-list.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/split-button/split-button.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; // #split-button /** * 1) */ .cre8-c-split-button { width: fit-content; display: block; } .cre8-c-split-button__button-container { display: flex; max-width: fit-content; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/split-button/split-button.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/split-button/split-button.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "Large"
          },
          {
            "kind": "function",
            "name": "Small"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/split-button/split-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/split-button/split-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Large",
            "declaration": {
              "name": "Large",
              "module": "components/split-button/split-button.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Small",
            "declaration": {
              "name": "Small",
              "module": "components/split-button/split-button.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/split-button/split-button.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8SplitButton",
            "slots": [
              {
                "description": "The component content , this will consist of the dropdown when the user clicks the caret",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "dropdownOpen",
                "type": {
                  "text": "boolean"
                },
                "default": "false"
              },
              {
                "kind": "field",
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "attribute": "disabled",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "size",
                "type": {
                  "text": "'sm' | 'lg' | undefined"
                },
                "description": "Size variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**sm** shrinks the button typography and overall size</li>\n<li>**lg** increases the button typography size and overall size</li>\n</ul>\n</cre8-text-passage>",
                "attribute": "size"
              },
              {
                "kind": "field",
                "name": "buttonText",
                "type": {
                  "text": "string"
                },
                "description": "Display text on the button",
                "attribute": "buttonText"
              },
              {
                "kind": "method",
                "name": "_textClick",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "MouseEvent"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "_dropdownClick",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "MouseEvent"
                    }
                  }
                ]
              }
            ],
            "events": [
              {
                "name": "text-click",
                "type": {
                  "text": "Event"
                }
              },
              {
                "name": "dropdown-click",
                "type": {
                  "text": "Event"
                }
              }
            ],
            "attributes": [
              {
                "name": "disabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "fieldName": "disabled"
              },
              {
                "name": "size",
                "type": {
                  "text": "'sm' | 'lg' | undefined"
                },
                "description": "Size variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**sm** shrinks the button typography and overall size</li>\n<li>**lg** increases the button typography size and overall size</li>\n</ul>\n</cre8-text-passage>",
                "fieldName": "size"
              },
              {
                "name": "buttonText",
                "type": {
                  "text": "string"
                },
                "description": "Display text on the button",
                "fieldName": "buttonText"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-split-button",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8SplitButton",
            "declaration": {
              "name": "Cre8SplitButton",
              "module": "components/split-button/split-button.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-split-button",
            "declaration": {
              "name": "Cre8SplitButton",
              "module": "components/split-button/split-button.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8SplitButton",
              "module": "components/split-button/split-button.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/submenu/submenu.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * 1) Menu inserted into the dropdown/megamenu of the navigation */ .cre8-c-submenu { list-style: none; padding: 0; margin: 0; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/submenu/submenu.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/submenu/submenu.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/submenu/submenu.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/submenu/submenu.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/submenu/submenu.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8Submenu",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-submenu",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Submenu",
            "declaration": {
              "name": "Cre8Submenu",
              "module": "components/submenu/submenu.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-submenu",
            "declaration": {
              "name": "Cre8Submenu",
              "module": "components/submenu/submenu.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Submenu",
              "module": "components/submenu/submenu.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tab/tab.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /*------------------------------------*\\ #TAB \\*------------------------------------*/ /** * Tab host */ :host { display: contents; } /** * Tab * 1. Make border appear to be inside the tab */ .cre8-c-tab { @include cre8-typography-label-default(); position: relative; display: flex; margin: 0; flex-shrink: 0; padding: 0; align-items: center; justify-content: center; gap: size(1); color: var(--cre8-color-content-default); background-color: transparent; border: 0; border-block-end: var(--cre8-border-width-tab-selected) var(--cre8-border-style-default) var(--cre8-color-border-default); padding-block-start: size(1); padding-inline-end: size(3); padding-block-end: calc(size(1) - var(--cre8-border-width-tab-selected)); /* 1 */ padding-inline-start: size(3); cursor: pointer; overflow: hidden; transition: border-color var(--cre8-anim-fade-quick) var(--cre8-anim-ease), background-color var(--cre8-anim-fade-quick) var(--cre8-anim-ease); /** * Tab hover state */ &:hover { background-color: var(--cre8-color-bg-brand-hover); } /** * Tab focus visible state * 1. Make the focus appear inside the tab to prevent the bottom border from showing */ &:focus-visible { @include focus; outline-offset: calc(#{var(--cre8-border-width-focus)} * -1); /* 1 */ border-radius: var(--cre8-border-radius-small); border-block-end-color: transparent; } } /** * Tab active state */ .cre8-c-tab.cre8-is-active:not(:focus-visible) { color: var(--cre8-color-content-brand-strong); background-color: transparent; border-block-end: var(--cre8-border-width-tab-selected) var(--cre8-border-style-default) var(--cre8-color-border-brand-strong); padding-block-end: calc(size(1) - var(--cre8-border-width-tab-selected)); /* 1 */ } /** * Tab small */ .cre8-c-tab.cre8-c-tab--small { @include cre8-typography-label-small(); padding-block-start: size(0.5); padding-inline-end: size(2); padding-block-end: calc(size(0.5) - var(--cre8-border-width-tab-selected)); /* 1 */ padding-inline-start: size(2); /** * Tab small active state */ &.cre8-is-active:not(:focus-visible) { padding-block-end: calc(size(0.5) - var(--cre8-border-width-tab-selected)); /* 1 */ } }`"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/tab/tab.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tab/tab.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8Tab",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "size",
                "type": {
                  "text": "'sm' | undefined"
                },
                "description": "Tab sizes\n- **default** displays the tab text with cre8-typography-label-default\n- **sm** displays the tab text with cre8-typography-label-small and decrease padding\n\n_*This property is dynamically set_",
                "attribute": "size"
              },
              {
                "kind": "field",
                "name": "isActive",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "If is true, tab has active state and cooresponding tab panel is visible.\n\n_*This property is dynamically set_",
                "attribute": "isActive",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "index",
                "type": {
                  "text": "number | undefined"
                },
                "description": "Used to align the tab with the tab panel\n\n_*This property is dynamically set_",
                "attribute": "index"
              },
              {
                "kind": "field",
                "name": "ariaLabelledBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Used to connect tab trigger and tab panel for accessibility\n\n_*This property is dynamically set_",
                "attribute": "ariaLabelledBy"
              },
              {
                "kind": "field",
                "name": "_Cre8Tab",
                "type": {
                  "text": "HTMLButtonElement"
                },
                "description": "Query the tab element"
              },
              {
                "kind": "method",
                "name": "_handleTabSelected",
                "privacy": "private",
                "description": "Handle Tab Selected\n1. Fire the custom event on click of a tab."
              }
            ],
            "attributes": [
              {
                "name": "size",
                "type": {
                  "text": "'sm' | undefined"
                },
                "description": "Tab sizes\n- **default** displays the tab text with cre8-typography-label-default\n- **sm** displays the tab text with cre8-typography-label-small and decrease padding\n\n_*This property is dynamically set_",
                "fieldName": "size"
              },
              {
                "name": "isActive",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "If is true, tab has active state and cooresponding tab panel is visible.\n\n_*This property is dynamically set_",
                "fieldName": "isActive"
              },
              {
                "name": "index",
                "type": {
                  "text": "number | undefined"
                },
                "description": "Used to align the tab with the tab panel\n\n_*This property is dynamically set_",
                "fieldName": "index"
              },
              {
                "name": "ariaLabelledBy",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Used to connect tab trigger and tab panel for accessibility\n\n_*This property is dynamically set_",
                "fieldName": "ariaLabelledBy"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-tab",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Tab",
            "declaration": {
              "name": "Cre8Tab",
              "module": "components/tab/tab.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-tab",
            "declaration": {
              "name": "Cre8Tab",
              "module": "components/tab/tab.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Tab",
              "module": "components/tab/tab.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/submenu-item/submenu-item.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * 1) Individual item with a link/button within submenu */ .cre8-c-submenu-item__link { color: var(--cre8-color-header-submenu-content-default); background: var(--cre8-color-header-submenu-bg-default); text-decoration: none; &:hover, &:focus { color: var(--cre8-color-header-submenu-content-hover); background: var(--cre8-color-header-submenu-bg-hover); } &:active { color: var(--cre8-color-header-submenu-content-pressed); background: var(--cre8-color-header-submenu-bg-pressed); } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/submenu-item/submenu-item.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/submenu-item/submenu-item.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8SubmenuItem",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "href",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The link URL",
                "attribute": "href"
              }
            ],
            "attributes": [
              {
                "name": "href",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The link URL",
                "fieldName": "href"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-submenu-item",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8SubmenuItem",
            "declaration": {
              "name": "Cre8SubmenuItem",
              "module": "components/submenu-item/submenu-item.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-submenu-item",
            "declaration": {
              "name": "Cre8SubmenuItem",
              "module": "components/submenu-item/submenu-item.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8SubmenuItem",
              "module": "components/submenu-item/submenu-item.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tab-panel/tab-panel.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /*------------------------------------*\\ #TAB-PANEL \\*------------------------------------*/ /** * Tab panel host */ :host { display: contents; } /** * Tab panel */ .cre8-c-tab-panel { visibility: hidden; display: none; /** * Tab panel focus visible state */ &:focus-visible { @include focus; } } /** * Tab panel active */ .cre8-c-tab-panel.cre8-is-active { visibility: visible; display: block; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/tab-panel/tab-panel.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tab-panel/tab-panel.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8TabPanel",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "skipFocusOnPanel",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "This will remove focus on panel element",
                "attribute": "skipFocusOnPanel",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "isActive",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Indicates if the panel is active\n<br/><br/> _*This property is dynamically set_",
                "attribute": "isActive",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "index",
                "type": {
                  "text": "number | undefined"
                },
                "description": "Used to align the tab panel with the tab\n<br/><br/> _*This property is dynamically set_",
                "attribute": "index"
              },
              {
                "kind": "field",
                "name": "_Cre8TabPanel",
                "type": {
                  "text": "HTMLElement"
                },
                "description": "Query the tab panel element"
              }
            ],
            "attributes": [
              {
                "name": "skipFocusOnPanel",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "This will remove focus on panel element",
                "fieldName": "skipFocusOnPanel"
              },
              {
                "name": "isActive",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Indicates if the panel is active\n<br/><br/> _*This property is dynamically set_",
                "fieldName": "isActive"
              },
              {
                "name": "index",
                "type": {
                  "text": "number | undefined"
                },
                "description": "Used to align the tab panel with the tab\n<br/><br/> _*This property is dynamically set_",
                "fieldName": "index"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-tab-panel",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8TabPanel",
            "declaration": {
              "name": "Cre8TabPanel",
              "module": "components/tab-panel/tab-panel.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-tab-panel",
            "declaration": {
              "name": "Cre8TabPanel",
              "module": "components/tab-panel/tab-panel.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8TabPanel",
              "module": "components/tab-panel/tab-panel.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/table-header/table-header.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /*------------------------------------*\\ #TABLE HEADER \\*------------------------------------*/ /** * Set the host to display the contents within the table wrapper */ :host { display: contents; } /** * Table header stlyes * 1) Responsive table header behavior * 2) Override row behavior and variants */ .cre8-c-table__header { display: var(--cre8-table-header-display, table-header-group); /* 1 */ text-align: left; --cre8-table-row-odd-background: none; /* 2 */ --cre8-table-row-odd-hover-background: none; /* 2 */ /** * Override responsive setting */ @media all and (min-width:$cre8-breakpoint-md) { display: table-header-group; } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/table-header/table-header.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/table-header/table-header.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8TableHeader",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-table-header",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8TableHeader",
            "declaration": {
              "name": "Cre8TableHeader",
              "module": "components/table-header/table-header.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-table-header",
            "declaration": {
              "name": "Cre8TableHeader",
              "module": "components/table-header/table-header.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8TableHeader",
              "module": "components/table-header/table-header.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/table/table.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /*------------------------------------*\\ #TABLE \\*------------------------------------*/ :host { display: block; } /** * 1) Data table containing columns and rows */ .cre8-c-table { width: 100%; border-collapse: collapse; border-spacing: 0; max-width: 100%; background-color: var(--cre8-color-bg-transparent); } /** * Custom properties passed to table-row for striped variant */ .cre8-c-table--striped { --cre8-table-row-odd-background: var(--cre8-color-bg-subtle); --cre8-table-row-odd-hover-background: var(--cre8-color-bg-subtle); } /** * Custom properties passed to table-row for isHoverable property */ .cre8-c-table--hoverable { --cre8-table-row-hover-background: var(--cre8-color-bg-default-hover); --cre8-table-row-odd-hover-background: var(--cre8-color-bg-default-hover); } /** * Custom properties passed to child Components for responsive behavior */ .cre8-c-table--responsive { --cre8-table-cell-before-content: attr(data-header); --cre8-table-header-display: none; --cre8-table-row-display: block; --cre8-table-cell-display: block; --cre8-table-cell-border-bottom-width: 0; --cre8-table-row-border-bottom: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-default); @media all and (min-width:$cre8-breakpoint-md) { --cre8-table-cell-border-bottom-width: var(--cre8-border-width-default); } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/table/table.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/table/table.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "VisibleCaption"
          },
          {
            "kind": "function",
            "name": "Striped"
          },
          {
            "kind": "function",
            "name": "Hoverable"
          },
          {
            "kind": "function",
            "name": "HoverableStriped"
          },
          {
            "kind": "function",
            "name": "ResponsiveStacked"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/table/table.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/table/table.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "VisibleCaption",
            "declaration": {
              "name": "VisibleCaption",
              "module": "components/table/table.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Striped",
            "declaration": {
              "name": "Striped",
              "module": "components/table/table.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Hoverable",
            "declaration": {
              "name": "Hoverable",
              "module": "components/table/table.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "HoverableStriped",
            "declaration": {
              "name": "HoverableStriped",
              "module": "components/table/table.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "ResponsiveStacked",
            "declaration": {
              "name": "ResponsiveStacked",
              "module": "components/table/table.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/table/table.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8Table",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "caption",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Specifies the caption/title of the table, visible to all users.\nIncreases accessibility of table.",
                "attribute": "caption"
              },
              {
                "kind": "field",
                "name": "behavior",
                "type": {
                  "text": "'responsive' | undefined"
                },
                "description": "Behavior variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**responsive** stacks column headers with respective table cells on small screens</li>\n</ul>\n</cre8-text-passage>",
                "attribute": "behavior"
              },
              {
                "kind": "field",
                "name": "isHoverable",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Hoverable rows variant\n1) Allows the table rows to be styled on hover",
                "attribute": "isHoverable",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "variant",
                "type": {
                  "text": "'striped' | undefined"
                },
                "description": "Style variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**striped** add zebra-striping to table rows within the `<tbody>`</li>\n</ul>\n</cre8-text-passage>",
                "attribute": "variant"
              }
            ],
            "attributes": [
              {
                "name": "caption",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Specifies the caption/title of the table, visible to all users.\nIncreases accessibility of table.",
                "fieldName": "caption"
              },
              {
                "name": "behavior",
                "type": {
                  "text": "'responsive' | undefined"
                },
                "description": "Behavior variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**responsive** stacks column headers with respective table cells on small screens</li>\n</ul>\n</cre8-text-passage>",
                "fieldName": "behavior"
              },
              {
                "name": "isHoverable",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Hoverable rows variant\n1) Allows the table rows to be styled on hover",
                "fieldName": "isHoverable"
              },
              {
                "name": "variant",
                "type": {
                  "text": "'striped' | undefined"
                },
                "description": "Style variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**striped** add zebra-striping to table rows within the `<tbody>`</li>\n</ul>\n</cre8-text-passage>",
                "fieldName": "variant"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-table",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Table",
            "declaration": {
              "name": "Cre8Table",
              "module": "components/table/table.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-table",
            "declaration": {
              "name": "Cre8Table",
              "module": "components/table/table.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Table",
              "module": "components/table/table.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/table-cell/table-cell.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css` @import '../../design-tokens/core/scss/theming/component'; /*------------------------------------*\\ #TABLE CELL \\*------------------------------------*/ /** * Set the host to display the contents within the table row wrapper */ :host { display: contents; } .cre8-c-table__cell { display: var(--cre8-table-row-display, table-cell); border-bottom-width: var(--cre8-table-cell-border-bottom-width, var(--cre8-border-width-default)); border-bottom-style: var(--cre8-border-style-default); border-bottom-color: var(--cre8-table-cell-border-bottom-color, var(--cre8-color-border-default)); padding: var(--cre8-spacing-8); text-align: left; &:before { @include cre8-typography-label-default; display: block; content: var(--cre8-table-cell-before-content, none); @media all and (min-width:$cre8-breakpoint-md) { content: none; } } @media all and (min-width:$cre8-breakpoint-md) { display: table-cell; } } .cre8-c-table__cell--bare { border-bottom-color: transparent; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/table-cell/table-cell.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/table-cell/table-cell.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8TableCell",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "colspan",
                "type": {
                  "text": "number | undefined"
                },
                "description": "Colspan attribute on td",
                "attribute": "colspan"
              },
              {
                "kind": "field",
                "name": "variant",
                "type": {
                  "text": "'bare' | undefined"
                },
                "description": "Style variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**bare** renders a table cell without a border</li>\n</ul>\n</cre8-text-passage>",
                "attribute": "variant"
              },
              {
                "kind": "field",
                "name": "dataHeader",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Column header text for cell to display when table is using responsive variant",
                "attribute": "dataHeader"
              }
            ],
            "attributes": [
              {
                "name": "colspan",
                "type": {
                  "text": "number | undefined"
                },
                "description": "Colspan attribute on td",
                "fieldName": "colspan"
              },
              {
                "name": "variant",
                "type": {
                  "text": "'bare' | undefined"
                },
                "description": "Style variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**bare** renders a table cell without a border</li>\n</ul>\n</cre8-text-passage>",
                "fieldName": "variant"
              },
              {
                "name": "dataHeader",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Column header text for cell to display when table is using responsive variant",
                "fieldName": "dataHeader"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-table-cell",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8TableCell",
            "declaration": {
              "name": "Cre8TableCell",
              "module": "components/table-cell/table-cell.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-table-cell",
            "declaration": {
              "name": "Cre8TableCell",
              "module": "components/table-cell/table-cell.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8TableCell",
              "module": "components/table-cell/table-cell.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/table-body/table-body.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /*------------------------------------*\\ #TABLE BODY \\*------------------------------------*/ /** * Set the host to display the contents within the table wrapper */ :host { display: contents; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/table-body/table-body.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/table-body/table-body.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8TableBody",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-table-body",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8TableBody",
            "declaration": {
              "name": "Cre8TableBody",
              "module": "components/table-body/table-body.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-table-body",
            "declaration": {
              "name": "Cre8TableBody",
              "module": "components/table-body/table-body.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8TableBody",
              "module": "components/table-body/table-body.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/table-header-cell/table-header-cell.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /*------------------------------------*\\ #TABLE HEADER CELL \\*------------------------------------*/ /** * Set the host to display the contents within the table header > table row wrapper */ :host { display: contents; } .cre8-c-table__header-cell { @include cre8-typography-label-small; border-bottom: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); padding: var(--cre8-spacing-8); text-align: left; }`"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/table-header-cell/table-header-cell.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/table-header-cell/table-header-cell.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8TableHeaderCell",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "colspan",
                "type": {
                  "text": "number | undefined"
                },
                "privacy": "public",
                "description": "Colspan attribute on th",
                "attribute": "colspan"
              },
              {
                "kind": "field",
                "name": "width",
                "type": {
                  "text": "string | undefined"
                },
                "privacy": "public",
                "description": "Adds inline width style to th\nSets width of entire column",
                "attribute": "width"
              }
            ],
            "attributes": [
              {
                "name": "colspan",
                "type": {
                  "text": "number | undefined"
                },
                "description": "Colspan attribute on th",
                "fieldName": "colspan"
              },
              {
                "name": "width",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Adds inline width style to th\nSets width of entire column",
                "fieldName": "width"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-table-header-cell",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8TableHeaderCell",
            "declaration": {
              "name": "Cre8TableHeaderCell",
              "module": "components/table-header-cell/table-header-cell.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-table-header-cell",
            "declaration": {
              "name": "Cre8TableHeaderCell",
              "module": "components/table-header-cell/table-header-cell.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8TableHeaderCell",
              "module": "components/table-header-cell/table-header-cell.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/table-row/table-row.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css` @import '../../design-tokens/core/scss/theming/component'; /*------------------------------------*\\ #TABLE ROW \\*------------------------------------*/ /** * Set the host to display the contents within the table header or table body wrapper */ :host { display: contents; } /** * 1) Row of the cre8 table */ .cre8-c-table__row { display: var(--cre8-table-row-display, table-row); border-bottom: var(--cre8-table-row-border-bottom); /** * Table row hover state * 1) Set the row hover background via custom property to allow * the table variant to control the color */ &:hover { background: var(--cre8-table-row-hover-background); } /** * Table row within odd cre8-table-row wrappers * 1) Set the odd row and odd row hover background via * custom property to allow the table variant to control the color */ :host(:nth-child(odd)) & { background: var(--cre8-table-row-odd-background, none); &:hover { background: var(--cre8-table-row-odd-hover-background, inherit); } } @media all and (min-width:$cre8-breakpoint-md) { border-bottom: inherit; display: table-row; } } /** * Bare variant to remove border */ .cre8-c-table__row--bare { --cre8-table-cell-border-bottom-color: transparent; } /** * Slotted table row in expanded content following expandable table row * 1) Don't show the collapsed table row by default */ .cre8-c-table__row--expandable + ::slotted(cre8-table-row) { display: none; /* 1 */ } .cre8-c-table__row--expandable.cre8-is-expanded { --cre8-table-cell-border-bottom-color: transparent; } /** * Slotted table row in expanded content following expanded table row class * 1) Display contents to get the proper table-row display for the row */ .cre8-c-table__row--expandable.cre8-is-expanded + ::slotted(cre8-table-row) { display: contents; /* 1 */ } /** * Button that expands the next table row */ .cre8-c-table__expand-button { background-color: var(--cre8-color-bg-transparent); border-width: var(--cre8-border-width-none); } /** * Text within the button that expands the next table row */ .cre8-c-table__expand-button-text { @include visuallyHidden; } /** * Icon within the button that expands the next table row */ .cre8-c-table__expand-button-icon { display: block; transition: transform 0.2s ease; /** * Icon within the button that expands the next table row when the table row is expanded * 1) Rotate the icon to show that it's open */ .cre8-is-expanded & { transform: rotate(90deg); /* 1 */ } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/table-row/table-row.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/table-row/table-row.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8TableRow",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "method",
                "name": "toggleIsExpanded"
              },
              {
                "kind": "field",
                "name": "isExpanded",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Visually show additional expandable content",
                "attribute": "isExpanded",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "isExpandable",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Indicates row has additional visually hidden related content",
                "attribute": "isExpandable",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "variant",
                "type": {
                  "text": "'bare' | undefined"
                },
                "description": "Style variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**bare** renders a table row without a border</li>\n</ul>\n</cre8-text-passage>",
                "attribute": "variant"
              },
              {
                "kind": "field",
                "name": "expandedButtonText",
                "type": {
                  "text": "string"
                },
                "default": "'Collapse Table Row'",
                "description": "Expanded button text",
                "attribute": "expandedButtonText"
              },
              {
                "kind": "field",
                "name": "collapsedButtonText",
                "type": {
                  "text": "string"
                },
                "default": "'Expand Table Row'",
                "description": "Expand button text",
                "attribute": "collapsedButtonText"
              }
            ],
            "attributes": [
              {
                "name": "isExpanded",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Visually show additional expandable content",
                "fieldName": "isExpanded"
              },
              {
                "name": "isExpandable",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Indicates row has additional visually hidden related content",
                "fieldName": "isExpandable"
              },
              {
                "name": "variant",
                "type": {
                  "text": "'bare' | undefined"
                },
                "description": "Style variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**bare** renders a table row without a border</li>\n</ul>\n</cre8-text-passage>",
                "fieldName": "variant"
              },
              {
                "name": "expandedButtonText",
                "type": {
                  "text": "string"
                },
                "default": "'Collapse Table Row'",
                "description": "Expanded button text",
                "fieldName": "expandedButtonText"
              },
              {
                "name": "collapsedButtonText",
                "type": {
                  "text": "string"
                },
                "default": "'Expand Table Row'",
                "description": "Expand button text",
                "fieldName": "collapsedButtonText"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-table-row",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8TableRow",
            "declaration": {
              "name": "Cre8TableRow",
              "module": "components/table-row/table-row.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-table-row",
            "declaration": {
              "name": "Cre8TableRow",
              "module": "components/table-row/table-row.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8TableRow",
              "module": "components/table-row/table-row.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/table-object/table-object.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /*------------------------------------*\\ #TABLE OBJECT \\*------------------------------------*/ :host { display: block; } .cre8-c-table-object__header { padding-top: var(--cre8-spacing-8); padding-bottom: var(--cre8-spacing-8); } .cre8-c-table-object__footer { padding-top: var(--cre8-spacing-8); padding-bottom: var(--cre8-spacing-8); } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/table-object/table-object.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/table-object/table-object.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/table-object/table-object.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/table-object/table-object.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/table-object/table-object.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8TableObject",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-table-object",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8TableObject",
            "declaration": {
              "name": "Cre8TableObject",
              "module": "components/table-object/table-object.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-table-object",
            "declaration": {
              "name": "Cre8TableObject",
              "module": "components/table-object/table-object.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8TableObject",
              "module": "components/table-object/table-object.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tertiary-nav/tertiary-nav.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /*------------------------------------*\\ #TERTIARY-NAV \\*------------------------------------*/ :host { display: flex; } /** * Tertiary nav */ .cre8-c-tertiary-nav { width: 100%; max-width: size(30); } /** * Tertiary nav full width */ .cre8-c-tertiary-nav--full-width { max-width: none; } /** * Tertiary nav list */ .cre8-c-tertiary-nav__list { margin: 0; padding: 0; list-style: none; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/tertiary-nav/tertiary-nav.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tertiary-nav/tertiary-nav.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "FullWidth",
            "parameters": [
              {
                "name": "args"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/tertiary-nav/tertiary-nav.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/tertiary-nav/tertiary-nav.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "FullWidth",
            "declaration": {
              "name": "FullWidth",
              "module": "components/tertiary-nav/tertiary-nav.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tertiary-nav/tertiary-nav.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8TertiaryNav",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "fullWidth",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Allows the tertiary nav to take up the full width of it parent container",
                "attribute": "fullWidth",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "navAriaLabel",
                "type": {
                  "text": "string"
                },
                "default": "'tertiary'",
                "description": "aria-label attribute to designate at name for the nav. Can be override by user",
                "attribute": "navAriaLabel"
              }
            ],
            "attributes": [
              {
                "name": "fullWidth",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Allows the tertiary nav to take up the full width of it parent container",
                "fieldName": "fullWidth"
              },
              {
                "name": "navAriaLabel",
                "type": {
                  "text": "string"
                },
                "default": "'tertiary'",
                "description": "aria-label attribute to designate at name for the nav. Can be override by user",
                "fieldName": "navAriaLabel"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-tertiary-nav",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8TertiaryNav",
            "declaration": {
              "name": "Cre8TertiaryNav",
              "module": "components/tertiary-nav/tertiary-nav.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-tertiary-nav",
            "declaration": {
              "name": "Cre8TertiaryNav",
              "module": "components/tertiary-nav/tertiary-nav.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8TertiaryNav",
              "module": "components/tertiary-nav/tertiary-nav.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tabs/tabs.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /*------------------------------------*\\ #TABS \\*------------------------------------*/ :host { display: block; } /** * Tabs header */ .cre8-c-tabs__header { position: relative; display: flex; flex-direction: column; align-items: baseline; overflow: hidden; /** * Tabs inner where the beginning of the tabs list isn't fully in the viewport */ .cre8-c-tabs:not(.cre8-is-start) & { /** * Left overflow gradient for the tabs list */ &::before { content: ''; display: block; position: absolute; pointer-events: none; background: linear-gradient(var(--rtlGradientToRight, 90deg), var(--cre8-color-bg-default), rgb(255 255 255 / 0.1%) 30%); height: 100%; inset-block-start: 0; inset-inline-start: 0; width: size(6); z-index: 1; } } /** * Tabs inner where the end of the tabs list isn't fully in the viewport */ .cre8-c-tabs:not(.cre8-is-end) & { /** * Right overflow gradient for the tabs list */ &::after { content: ''; display: block !important; position: absolute; pointer-events: none; background: linear-gradient(var(--rtlGradientToRight, 90deg), rgb(255 255 255 / 0.1%) 30%, var(--cre8-color-bg-default)); height: 100%; inset-block-start: 0; inset-inline-end: 0; width: size(6); z-index: 1; } } } /** * Tabs list * 1) The div that contains the cre8-tab's */ .cre8-c-tabs__list { display: flex; overflow: auto; width: 100%; margin: 0; position: relative; padding: var(--cre8-border-width-focus); /** * Visually hides the scrollbar */ scrollbar-width: none; -ms-overflow-style: none; &::-webkit-scrollbar { display: none; } } /** * Tabs body * 1) The div that contains the tab panel content */ .cre8-c-tabs__body { padding-block-start: size(2); /** * Full Width Variant - border default bar across tabs */ .cre8-c-tabs--full-width & { border-top: var(--cre8-border-width-tab-selected) var(--cre8-border-style-default) var(--cre8-color-border-default); // To match the border of the tabs to this full width line // Shift border up by the tab bottom border width + Width of the padding on the list of tabs margin-top: calc(var(--cre8-border-width-tab-selected) * -2); } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/tabs/tabs.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tabs/tabs.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "object"
            },
            "default": "{ args: { default: `<cre8-tab>Tab 1</cre8-tab> <cre8-tab>Tab 2</cre8-tab> <cre8-tab>Tab 3</cre8-tab>`, panel: `<cre8-tab-panel slot=\"panel\"> <f-po>Tab 1 content</f-po> </cre8-tab-panel> <cre8-tab-panel slot=\"panel\"> <f-po>Tab 2 content</f-po> </cre8-tab-panel> <cre8-tab-panel slot=\"panel\"> <f-po>Tab 3 content</f-po> </cre8-tab-panel>`, } }"
          },
          {
            "kind": "variable",
            "name": "fullWidth",
            "type": {
              "text": "object"
            },
            "default": "{ args: { ...Default.args, fullWidth: true, } }"
          },
          {
            "kind": "variable",
            "name": "Small",
            "type": {
              "text": "object"
            },
            "default": "{ args: { ...Default.args, size: 'sm', } }"
          },
          {
            "kind": "variable",
            "name": "WithActiveIndex",
            "type": {
              "text": "object"
            },
            "default": "{ args: { ...Default.args, activeIndex: '1', } }"
          },
          {
            "kind": "variable",
            "name": "WithOverflow",
            "type": {
              "text": "object"
            },
            "default": "{ args: { default: Default.args.default + `<cre8-tab>Tab 4</cre8-tab> <cre8-tab>Tab 5</cre8-tab> <cre8-tab>Tab 6</cre8-tab> <cre8-tab>Tab 7</cre8-tab> <cre8-tab>Tab 8</cre8-tab> <cre8-tab>Tab 9</cre8-tab> <cre8-tab>Tab 10</cre8-tab> <cre8-tab>Tab 11</cre8-tab> <cre8-tab>Tab 12</cre8-tab>`, panel: Default.args.panel + `<cre8-tab-panel slot=\"panel\"> <f-po>Tab 4 content</f-po> </cre8-tab-panel> <cre8-tab-panel slot=\"panel\"> <f-po>Tab 5 content</f-po> </cre8-tab-panel> <cre8-tab-panel slot=\"panel\"> <f-po>Tab 6 content</f-po> </cre8-tab-panel> <cre8-tab-panel slot=\"panel\"> <f-po>Tab 7 content</f-po> </cre8-tab-panel> <cre8-tab-panel slot=\"panel\"> <f-po>Tab 8 content</f-po> </cre8-tab-panel> <cre8-tab-panel slot=\"panel\"> <f-po>Tab 9 content</f-po> </cre8-tab-panel> <cre8-tab-panel slot=\"panel\"> <f-po>Tab 10 content</f-po> </cre8-tab-panel> <cre8-tab-panel slot=\"panel\"> <f-po>Tab 11 content</f-po> </cre8-tab-panel> <cre8-tab-panel slot=\"panel\"> <f-po>Tab 12 content</f-po> </cre8-tab-panel>` } }",
            "description": "Navigating through Tabs via scrolling is a becoming a popular interaction pattern.\nHowever, it is generally only used for content heavy web sites, as opposed to table heavy software.\nBe cautious if implementing this pattern, and be sure that it is only used where content is consistent across\nall Tabs and moving from one to the next would be a natural organic experience, instead of disjointed or disconnected."
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/tabs/tabs.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/tabs/tabs.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "fullWidth",
            "declaration": {
              "name": "fullWidth",
              "module": "components/tabs/tabs.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Small",
            "declaration": {
              "name": "Small",
              "module": "components/tabs/tabs.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "WithActiveIndex",
            "declaration": {
              "name": "WithActiveIndex",
              "module": "components/tabs/tabs.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "WithOverflow",
            "declaration": {
              "name": "WithOverflow",
              "module": "components/tabs/tabs.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tabs/tabs.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "Tabs are used to quickly navigate back and forth between views.\nThe Tab design and interaction varies depending on the requirements for your organization and project.\nStandardizing on the best individual controls will improve usability and reduce development and QA time.\n\nCreate a standard set of Tab controls:\nPrimary Tabs (for system navigation), Secondary Tabs (for sub navigation within a screen).\n\n## Usability Guidelines\n- The selected Tab should be visually differentiated from the other Tabs.\n  The deselected Tabs should still look enabled.\n  Dimming the other Tabs decreases the legibility of items that are actually active and clickable.\n- There must be a minimum of 2 Tabs.\n- Showing status in a Tab is non-standard (such as 0%, 10%).\n- Tab labels and content should be parallel, with the exception of a Summary or Overview Tab\n  which can be a rollup of content across other Tabs.\n- Keep the font size of the Tabs the same.\n  If the Tabs are a fixed width and one of the labels is too long,\n  don't resize the text to fit and consider wrapping text to a second line.\n- If possible, don't truncate text because it makes it harder to understand what's in the Tab.\n- Try not to use more than six Tabs to keep the UI uncluttered.\n- Do not stack Tabs on top of each other, and do not nest Tabs within Tabs.\n  Find alternate ways of navigating page hierarchy.",
            "name": "Cre8Tabs",
            "slots": [
              {
                "description": "Default, unnamed slot container for each `cre8-tab` button",
                "name": "default"
              },
              {
                "description": "Container for each `cre8-tab-panel` content item",
                "name": "panel"
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "size",
                "type": {
                  "text": "\"sm\""
                },
                "description": "Tab sizes\n- **default** displays the cre8-tab text with cre8-typography-label-default\n- **sm** displays the cre8-tab text with cre8-typography-label-small",
                "attribute": "size"
              },
              {
                "kind": "field",
                "name": "fullWidth",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Displays a set of tabs with a spanning the width of the element",
                "attribute": "fullWidth",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "tabId",
                "type": {
                  "text": "string"
                },
                "description": "Set the tab id.",
                "default": "`cre8-tabpanel-${tabId}`"
              },
              {
                "kind": "field",
                "name": "activeIndex",
                "type": {
                  "text": "number | undefined"
                },
                "default": "0",
                "description": "Sets the initial active tab (e.g. 0 sets the first tab, 1 sets the second tab, etc.)",
                "attribute": "activeIndex"
              },
              {
                "kind": "field",
                "name": "activeTab",
                "type": {
                  "text": "Cre8Tab | undefined"
                },
                "description": "The active tab\n\n_*This property is dynamically set_"
              },
              {
                "kind": "field",
                "name": "isStart",
                "type": {
                  "text": "boolean | undefined"
                },
                "default": "true",
                "description": "If position from left is greater than 0, set isStart to false. Otherwise set isStart to true.\n\n_*This property is dynamically set_",
                "attribute": "isStart"
              },
              {
                "kind": "field",
                "name": "isEnd",
                "type": {
                  "text": "boolean | undefined"
                },
                "default": "false",
                "description": "If last child is fully in the viewport, set isEnd to true. Otherwise, set isEnd to false.\n\n_*This property is dynamically set_",
                "attribute": "isEnd"
              },
              {
                "kind": "field",
                "name": "_Cre8TabItems",
                "type": {
                  "text": "Array<Cre8Tab>"
                },
                "description": "Query all the tab items"
              },
              {
                "kind": "field",
                "name": "_Cre8TabPanels",
                "type": {
                  "text": "Array<Cre8TabPanel>"
                },
                "description": "Query all the tab panels"
              },
              {
                "kind": "field",
                "name": "_Cre8TabsHeader",
                "type": {
                  "text": "HTMLElement"
                },
                "description": "Query the tabs header element"
              },
              {
                "kind": "field",
                "name": "_Cre8TabsHeaderList",
                "type": {
                  "text": "HTMLElement"
                },
                "description": "Query the tabs header list element"
              },
              {
                "kind": "field",
                "name": "isRTL",
                "description": "Query the document direction value\n\n_*This property is dynamically set_",
                "readonly": true
              },
              {
                "kind": "method",
                "name": "handleResize",
                "description": "Handle Resize\n1. On resize, if position from left is greater than 0, set isStart to false. Otherwise set isStart to true.\n2. On resize, If last child is fully in the viewport, set isEnd to true. Otherwise, set isEnd to false."
              },
              {
                "kind": "method",
                "name": "handleScroll",
                "description": "Handle Scroll\n1. On scroll, if position from left is greater than 0, set isStart to false. Otherwise set isStart to true.\n2. On scroll, If last child is fully in the viewport, set isEnd to true. Otherwise, set isEnd to false."
              },
              {
                "kind": "method",
                "name": "setIsStart",
                "description": "Set isStart State\n1. If position from left is greater than 0, set isStart to false. Otherwise set isStart to true."
              },
              {
                "kind": "method",
                "name": "setIsEnd",
                "description": "Set isEnd State\n1. If last child is fully in the viewport, set isEnd to true. Otherwise, set isEnd to false."
              },
              {
                "kind": "method",
                "name": "isInViewport",
                "description": "Check if last overflow list item is in the viewport\n1. Get children of the overflow list inner container and get bounding client rectangle of last child\n2. Return true if the left property is greater than or equal to 0 and if the right property is less\nthan or equal to the window inner width or document client width"
              },
              {
                "kind": "method",
                "name": "setTabVariant",
                "description": "Set Tab Variant\n1. Loop through all the cre8-tab Components and set the size to 'sm' if the parent has size 'sm'."
              },
              {
                "kind": "method",
                "name": "setTabAttributes",
                "description": "Set the attributes on tab and tab panel\n1. Sets the index value on the tab items.\n2. Sets the `aria-labelledby` on the tab items.\n3. Set the index and id on the tab-panel to match the tab."
              },
              {
                "kind": "method",
                "name": "setActiveTab",
                "description": "Set Active Tab\n1. Sets the active state for the selected tab.\n2. Sets the active state for the tab panel with the same index value as the selected tab."
              },
              {
                "kind": "method",
                "name": "setActiveTabFocus",
                "description": "Set Active Tab Focus"
              },
              {
                "kind": "method",
                "name": "handleTabSelected",
                "parameters": [
                  {
                    "name": "event",
                    "type": {
                      "text": "MouseEvent"
                    }
                  }
                ],
                "description": "Handle Tab Selected\n1. Only continue if event target is a tab\n2. If tab is active, make the previous selected tab inactive.\n3. Set the clicked tab active.\n4. Emit the custom event."
              },
              {
                "kind": "method",
                "name": "handleKeydown",
                "parameters": [
                  {
                    "name": "event",
                    "type": {
                      "text": "KeyboardEvent"
                    }
                  }
                ],
                "description": "Handle Keydown\n1. If the active tab is not focused then handle the keydown events.\n2. On keydown of the right arrow, make the next tab active.\n3. On keydown of the left arrow, make the previous tab active.\n4. On keydown of the home key, make the first tab active.\n5. On keydown of the end key, make the last tab active.\n6. On keydown of the escape key, remove the focus."
              },
              {
                "kind": "method",
                "name": "setSelectedToPreviousTab",
                "parameters": [
                  {
                    "name": "currentTab",
                    "type": {
                      "text": "Cre8Tab"
                    }
                  }
                ],
                "description": "Set Selected To Previous Tab\n1. Get current selected Tab index then deactivate previously selected tab.\n2. If current activeIndex is in first position then move the tab focus to last tab.\n3. Set the active tab and focus.\n4. Emit custom event."
              },
              {
                "kind": "method",
                "name": "setSelectedToNextTab",
                "parameters": [
                  {
                    "name": "currentTab",
                    "type": {
                      "text": "Cre8Tab"
                    }
                  }
                ],
                "description": "Set Selected To Next Tab\n1. Get current selected Tab index then deactivate previously selected tab.\n2. If current activeIndex is in last position then move the tab focus to first tab.\n3. Set the active tab and focus.\n4. Emit custom event."
              },
              {
                "kind": "method",
                "name": "removePreviousActiveTab",
                "description": "Remove Active from Previous Tab\n1. Get current selected Tab index then deactivate previously selected tab\n2. If current activeIndex is in first position then move the tab focus to last tab"
              },
              {
                "kind": "method",
                "name": "emitEvent",
                "description": "Emit custom event"
              },
              {
                "kind": "field",
                "type": {
                  "text": "number"
                },
                "default": "1"
              }
            ],
            "attributes": [
              {
                "name": "size",
                "type": {
                  "text": "\"sm\""
                },
                "description": "Tab sizes\n- **default** displays the cre8-tab text with cre8-typography-label-default\n- **sm** displays the cre8-tab text with cre8-typography-label-small",
                "fieldName": "size",
                "attribute": "size"
              },
              {
                "name": "fullWidth",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Displays a set of tabs with a spanning the width of the element",
                "fieldName": "fullWidth",
                "attribute": "fullWidth"
              },
              {
                "name": "activeIndex",
                "type": {
                  "text": "number | undefined"
                },
                "default": "0",
                "description": "Sets the initial active tab (e.g. 0 sets the first tab, 1 sets the second tab, etc.)",
                "fieldName": "activeIndex",
                "attribute": "activeIndex"
              },
              {
                "name": "isStart",
                "type": {
                  "text": "boolean | undefined"
                },
                "default": "true",
                "description": "If position from left is greater than 0, set isStart to false. Otherwise set isStart to true.\n\n_*This property is dynamically set_",
                "fieldName": "isStart"
              },
              {
                "name": "isEnd",
                "type": {
                  "text": "boolean | undefined"
                },
                "default": "false",
                "description": "If last child is fully in the viewport, set isEnd to true. Otherwise, set isEnd to false.\n\n_*This property is dynamically set_",
                "fieldName": "isEnd"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-tabs",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Tabs",
            "declaration": {
              "name": "Cre8Tabs",
              "module": "components/tabs/tabs.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-tabs",
            "declaration": {
              "name": "Cre8Tabs",
              "module": "components/tabs/tabs.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Tabs",
              "module": "components/tabs/tabs.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tag/tag.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /* ------------------------------------*\\ #TAG \\*------------------------------------ */ :host { display: inline-flex; } .cre8-c-tag { @include cre8-typography-label-small; display: flex; align-items: center; background-color: var(--cre8-color-bg-default); border: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); color: var(--cre8-color-content-default); cursor: pointer; gap: var(--cre8-spacing-8); padding: var(--cre8-spacing-4) var(--cre8-spacing-16); transition: all var(--cre8-anim-fade-quick) var(--cre8-anim-ease); white-space: nowrap; } .cre8-c-tag--square { border-radius: var(--cre8-border-radius-small); } .cre8-c-tag--round { border-radius: var(--cre8-border-radius-round); } .cre8-c-tag--neutral { &:hover, &:focus { background-color: var(--cre8-color-bg-default-hover); border: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); } } .cre8-c-tag--branded { background-color: var(--cre8-color-bg-brand); border: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-transparent); &:hover, &:focus { background-color: var(--cre8-color-bg-brand-hover); } } .cre8-c-tag--neutral-hybrid { color: var(--cre8-color-content-brand); &:hover, &:focus { background-color: var(--cre8-color-bg-default-hover); } } .cre8-c-tag--neutral-selected, .cre8-c-tag--neutral-hybrid-selected { background-color: var(--cre8-color-bg-brand-strong); border: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-transparent); color: var(--cre8-color-content-knockout); &:hover, &:focus { background-color: var(--cre8-color-bg-brand-strong-hover); } } .cre8-c-tag--branded-selected { background-color: var(--cre8-color-bg-brand-xstrong); border: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-transparent); color: var(--cre8-color-content-knockout); &:hover, &:focus { background-color: var(--cre8-color-bg-brand-xstrong-hover); } } .cre8-c-tag:focus { outline: var(--cre8-border-width-focus) var(--cre8-border-style-default) var(--cre8-color-border-active-outline); outline-offset: var(--cre8-border-width-focus); } .cre8-c-tag.cre8-c-tag--disabled, .cre8-c-tag.cre8-c-tag--disabled:hover, .cre8-c-tag.cre8-c-tag--disabled:focus { background-color: var(--cre8-color-bg-disabled); border: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-disabled); color: var(--cre8-color-content-disabled); cursor: not-allowed; outline: none; } .cre8-c-tag__input { @include cre8-typography-body-small; display: none; } .cre8-tag-text{ cursor: pointer; } .cre8-c-tag--disabled > .cre8-tag-text { cursor: not-allowed; } cre8-icon { display: flex; align-items: center; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/tag/tag.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tag/tag.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "meta",
            "type": {
              "text": "object"
            },
            "default": "{ title: 'In Development/Tag', component: 'cre8-tag', render: (args) => html`<cre8-tag ${spread(args)}></cre8-tag>`, parameters: { status: { type: 'inProgress' } }, argTypes: { text: { control: 'text' }, type: { options: ['checkbox', 'radio'], control: { type: 'radio' } }, variant: { options: ['neutral', 'branded', 'neutral-hybrid'], control: { type: 'select' } }, isDisabled: { control: { type: 'boolean' } }, isSelected: { control: { type: 'boolean' } } }, args: { type: 'radio', variant: 'neutral' } }"
          },
          {
            "kind": "variable",
            "name": "DefaultRadio",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Default', type: 'radio', }, }"
          },
          {
            "kind": "variable",
            "name": "NeutralRadio",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Neutral', type: 'radio', }, }"
          },
          {
            "kind": "variable",
            "name": "NeutralRadioSelected",
            "type": {
              "text": "object"
            },
            "default": "{ args: { isSelected: true, text: 'Neutral', type: 'radio', }, }"
          },
          {
            "kind": "variable",
            "name": "NeutralHybridRadio",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Neutral Hybrid', type: 'radio', variant: 'neutral-hybrid', }, }"
          },
          {
            "kind": "variable",
            "name": "NeutralHybridRadioSelected",
            "type": {
              "text": "object"
            },
            "default": "{ args: { isSelected: true, text: 'Neutral Hybrid', type: 'radio', variant: 'neutral-hybrid', }, }"
          },
          {
            "kind": "variable",
            "name": "BrandedRadio",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Branded', type: 'radio', variant: 'branded', }, }"
          },
          {
            "kind": "variable",
            "name": "BrandedRadioSelected",
            "type": {
              "text": "object"
            },
            "default": "{ args: { isSelected: true, text: 'Branded', type: 'radio', variant: 'branded', }, }"
          },
          {
            "kind": "variable",
            "name": "DisabledRadio",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Disabled', isDisabled: true }, }"
          },
          {
            "kind": "variable",
            "name": "DefaultNeutralCheckbox",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Default', type: 'checkbox', }, }"
          },
          {
            "kind": "variable",
            "name": "ShapeRoundNeutralCheckbox",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Round', type: 'checkbox', shape: 'round', }, }"
          },
          {
            "kind": "variable",
            "name": "NeutralSelectedCheckbox",
            "type": {
              "text": "object"
            },
            "default": "{ args: { isSelected: true, text: 'Neutral Selected', type: 'checkbox', }, }"
          },
          {
            "kind": "variable",
            "name": "NeutralHybridCheckbox",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Neutral Hybrid', type: 'checkbox', variant: 'neutral-hybrid', }, }"
          },
          {
            "kind": "variable",
            "name": "NeutralHybridRoundSelectedCheckbox",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Neutral Hybrid Selected', isSelected: true, shape: 'round', type: 'checkbox', variant: 'neutral-hybrid', }, }"
          },
          {
            "kind": "variable",
            "name": "BrandedCheckbox",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Branded', type: 'checkbox', variant: 'branded', }, }"
          },
          {
            "kind": "variable",
            "name": "BrandedSelectedCheckbox",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Branded Selected', isSelected: true, type: 'checkbox', variant: 'branded', }, }"
          },
          {
            "kind": "variable",
            "name": "DisabledCheckbox",
            "type": {
              "text": "object"
            },
            "default": "{ args: { text: 'Disabled', isDisabled: true, type: 'checkbox', }, }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "meta",
              "module": "components/tag/tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "DefaultRadio",
            "declaration": {
              "name": "DefaultRadio",
              "module": "components/tag/tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "NeutralRadio",
            "declaration": {
              "name": "NeutralRadio",
              "module": "components/tag/tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "NeutralRadioSelected",
            "declaration": {
              "name": "NeutralRadioSelected",
              "module": "components/tag/tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "NeutralHybridRadio",
            "declaration": {
              "name": "NeutralHybridRadio",
              "module": "components/tag/tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "NeutralHybridRadioSelected",
            "declaration": {
              "name": "NeutralHybridRadioSelected",
              "module": "components/tag/tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "BrandedRadio",
            "declaration": {
              "name": "BrandedRadio",
              "module": "components/tag/tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "BrandedRadioSelected",
            "declaration": {
              "name": "BrandedRadioSelected",
              "module": "components/tag/tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "DisabledRadio",
            "declaration": {
              "name": "DisabledRadio",
              "module": "components/tag/tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "DefaultNeutralCheckbox",
            "declaration": {
              "name": "DefaultNeutralCheckbox",
              "module": "components/tag/tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "ShapeRoundNeutralCheckbox",
            "declaration": {
              "name": "ShapeRoundNeutralCheckbox",
              "module": "components/tag/tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "NeutralSelectedCheckbox",
            "declaration": {
              "name": "NeutralSelectedCheckbox",
              "module": "components/tag/tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "NeutralHybridCheckbox",
            "declaration": {
              "name": "NeutralHybridCheckbox",
              "module": "components/tag/tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "NeutralHybridRoundSelectedCheckbox",
            "declaration": {
              "name": "NeutralHybridRoundSelectedCheckbox",
              "module": "components/tag/tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "BrandedCheckbox",
            "declaration": {
              "name": "BrandedCheckbox",
              "module": "components/tag/tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "BrandedSelectedCheckbox",
            "declaration": {
              "name": "BrandedSelectedCheckbox",
              "module": "components/tag/tag.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "DisabledCheckbox",
            "declaration": {
              "name": "DisabledCheckbox",
              "module": "components/tag/tag.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tag/tag.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The tag component allows you to make selections, filter content, or trigger actions. While buttons are\nexpected to appear consistently and with familiar calls to actions, tags should appear dynamically\nas a group of multiple interactions elements. It is a flexible\ncomponent that comes in the following types:\n - **radio**  Clicking a Radio Button causes it to change color. These tags only allow\none option to be chosen and can be used in place of radio button when they need to be listed\nhorizontally\n\n - **checkbox** It allows for selecting options, It can be toggled on and off.",
            "name": "Cre8Tag",
            "members": [
              {
                "kind": "field",
                "name": "text",
                "type": {
                  "text": "string"
                },
                "attribute": "text"
              },
              {
                "kind": "field",
                "name": "type",
                "type": {
                  "text": "'checkbox'| 'radio'"
                },
                "description": "Type of tag\n**checkbox** renders a checkbox tag\n**radio** renders a radio tag",
                "attribute": "type"
              },
              {
                "kind": "field",
                "name": "variant",
                "type": {
                  "text": "'neutral' | 'branded' | 'neutral-hybrid'"
                },
                "default": "'neutral'",
                "description": "Color variant\n**neutral** renders the default, unselected tag\n**branded** renders a selected tag\n**neutral-hybrid** renders a tag when mouse is hovering tag",
                "attribute": "variant"
              },
              {
                "kind": "field",
                "name": "shape",
                "type": {
                  "text": "'square' | 'round'"
                },
                "default": "'square'",
                "description": "shape of the tag, supports square and round, and default not mentioned its a square",
                "attribute": "shape"
              },
              {
                "kind": "field",
                "name": "isDisabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "attribute": "isDisabled"
              },
              {
                "kind": "field",
                "name": "isSelected",
                "type": {
                  "text": "boolean | undefined"
                },
                "attribute": "isSelected"
              },
              {
                "kind": "field",
                "name": "field",
                "type": {
                  "text": "HTMLInputElement"
                },
                "description": "Get the radio field item input"
              },
              {
                "kind": "field",
                "name": "fieldId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The fieldId attribute is assigned to the HTML input element of the radio button and the for attribute of the\ncorresponding label.",
                "attribute": "fieldId"
              },
              {
                "kind": "field",
                "name": "initialSelected",
                "type": {
                  "text": "boolean | undefined"
                },
                "privacy": "private",
                "description": "Initial checked for initial checked state"
              },
              {
                "kind": "method",
                "name": "renderCheckboxIcon"
              },
              {
                "kind": "method",
                "name": "_clickCheckHandler",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_handleCheckKeyDown",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "event",
                    "type": {
                      "text": "KeyboardEvent"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "resetField",
                "privacy": "public",
                "description": "Reset the radio tag field"
              },
              {
                "kind": "method",
                "name": "resetTabIndeces",
                "parameters": [
                  {
                    "name": "tags",
                    "type": {
                      "text": "Cre8Tag[]"
                    }
                  }
                ],
                "description": "Reset the radio field tags tab indeces"
              },
              {
                "kind": "method",
                "name": "_removeChecked",
                "privacy": "private",
                "description": "Remove checked\n1) Remove checked property from all tags and set tabindex to -1\n2) Reset the form field to not checked"
              },
              {
                "kind": "method",
                "name": "formResetCallback",
                "return": {
                  "type": {
                    "text": "void"
                  }
                },
                "description": "Reset form callback\n1) Remove the checked state from all radio tags\n2) Set the checked state to the initial checked state\n3) Set the radio field input checked attribute to the initial checked state"
              },
              {
                "kind": "method",
                "name": "_clickRadioHandler",
                "privacy": "private"
              },
              {
                "kind": "method",
                "name": "_updateSibling",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "event",
                    "type": {
                      "text": "KeyboardEvent"
                    }
                  },
                  {
                    "name": "sibling",
                    "type": {
                      "text": "Element"
                    }
                  },
                  {
                    "name": "element",
                    "type": {
                      "text": "HTMLElement"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "_checkPreviousTag",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "event",
                    "type": {
                      "text": "KeyboardEvent"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "_checkNextTag",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "event",
                    "type": {
                      "text": "KeyboardEvent"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "handleRadioKeyDown",
                "parameters": [
                  {
                    "name": "event",
                    "type": {
                      "text": "KeyboardEvent"
                    }
                  }
                ]
              },
              {
                "kind": "method",
                "name": "_getRole",
                "privacy": "private",
                "return": {
                  "type": {
                    "text": "'listitem' | undefined"
                  }
                },
                "description": "access role when tag embedded in tag-list"
              }
            ],
            "events": [
              {
                "name": "change",
                "type": {
                  "text": "CustomEvent"
                }
              }
            ],
            "attributes": [
              {
                "name": "text",
                "type": {
                  "text": "string"
                },
                "fieldName": "text"
              },
              {
                "name": "type",
                "type": {
                  "text": "'checkbox'| 'radio'"
                },
                "description": "Type of tag\n**checkbox** renders a checkbox tag\n**radio** renders a radio tag",
                "fieldName": "type"
              },
              {
                "name": "variant",
                "type": {
                  "text": "'neutral' | 'branded' | 'neutral-hybrid'"
                },
                "default": "'neutral'",
                "description": "Color variant\n**neutral** renders the default, unselected tag\n**branded** renders a selected tag\n**neutral-hybrid** renders a tag when mouse is hovering tag",
                "fieldName": "variant"
              },
              {
                "name": "shape",
                "type": {
                  "text": "'square' | 'round'"
                },
                "default": "'square'",
                "description": "shape of the tag, supports square and round, and default not mentioned its a square",
                "fieldName": "shape"
              },
              {
                "name": "isDisabled",
                "type": {
                  "text": "boolean | undefined"
                },
                "fieldName": "isDisabled"
              },
              {
                "name": "isSelected",
                "type": {
                  "text": "boolean | undefined"
                },
                "fieldName": "isSelected"
              },
              {
                "name": "fieldId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The fieldId attribute is assigned to the HTML input element of the radio button and the for attribute of the\ncorresponding label.",
                "fieldName": "fieldId"
              }
            ],
            "superclass": {
              "name": "Cre8FormElement",
              "module": "/components/cre8-form-element"
            },
            "tagName": "cre8-tag",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Tag",
            "declaration": {
              "name": "Cre8Tag",
              "module": "components/tag/tag.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-tag",
            "declaration": {
              "name": "Cre8Tag",
              "module": "components/tag/tag.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Tag",
              "module": "components/tag/tag.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tag-list/tag-list.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * 1) Fieldset used for tags */ .cre8-c-tag-list { border: none; padding: 0; margin: 0; gap: var(--cre8-spacing-16); } .cre8-c-tag-list__legend { margin-bottom: var(--cre8-spacing-16); } /** * Slotted tag items */ ::slotted(cre8-tag) { margin-bottom: var(--cre8-spacing-16); margin-right: var(--cre8-spacing-8); } .cre8-c-tag-list__list { list-style-type: none; margin: 0; padding: 0; display: flex; flex-wrap: wrap; } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/tag-list/tag-list.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tag-list/tag-list.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "CheckBox",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "Radio",
            "parameters": [
              {
                "name": "args"
              }
            ]
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/tag-list/tag-list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/tag-list/tag-list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "CheckBox",
            "declaration": {
              "name": "CheckBox",
              "module": "components/tag-list/tag-list.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Radio",
            "declaration": {
              "name": "Radio",
              "module": "components/tag-list/tag-list.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tag-list/tag-list.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "Tag List must have children which are Tag components that are of type `checkbox` or `radio`.\nThe Tags must use the `neutral` variant and the `round` shape when they are inside a Tag List.\nTag List has a label that should be used to describe the purpose of the list.",
            "name": "Cre8TagList",
            "members": [
              {
                "kind": "field",
                "name": "label",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Tag list legend label",
                "attribute": "label"
              },
              {
                "kind": "field",
                "name": "fieldId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The unique id of the select",
                "attribute": "fieldId"
              },
              {
                "kind": "method",
                "name": "_initializeAria",
                "privacy": "private"
              }
            ],
            "attributes": [
              {
                "name": "fieldId",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The unique id of the select",
                "fieldName": "fieldId",
                "attribute": "fieldId"
              },
              {
                "name": "label",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Tag list legend label",
                "fieldName": "label"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-tag-list",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8TagList",
            "declaration": {
              "name": "Cre8TagList",
              "module": "components/tag-list/tag-list.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-tag-list",
            "declaration": {
              "name": "Cre8TagList",
              "module": "components/tag-list/tag-list.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8TagList",
              "module": "components/tag-list/tag-list.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tertiary-nav-item/tertiary-nav-item.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /*------------------------------------*\\ #TERTIARY-NAV-ITEM \\*------------------------------------*/ :host { display: contents; } /** * Tertiary nav item link */ .cre8-c-tertiary-nav-item__link { @include cre8-typography-body-default(); display: flex; align-items: center; gap: size(1); padding: size(1) size(1) size(1) size(2); color: var(--cre8-color-content-brand-strong); background-color: var(--cre8-color-bg-default); border-block-end: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-default); text-decoration: none; transition: all var(--cre8-anim-fade-quick) var(--cre8-anim-ease); width: 100%; /** * Tertiary nav item link hover & focus state */ &:hover, &:focus { background-color: var(--cre8-color-bg-subtle); } /** * Tertiary nav item link focus visible state */ &:focus-visible { @include focus; } /** * Tertiary nav item link active/current state */ &:active, .cre8-is-current & { color: var(--cre8-color-content-default); background-color: var(--cre8-color-bg-subtle); } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/tertiary-nav-item/tertiary-nav-item.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tertiary-nav-item/tertiary-nav-item.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8TertiaryNavItem",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "href",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The href value of the tertiary nav link",
                "attribute": "href"
              },
              {
                "kind": "field",
                "name": "isCurrent",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The current state of the tertiary nav link",
                "attribute": "isCurrent",
                "reflects": true
              },
              {
                "kind": "method",
                "name": "_handleOnClick",
                "privacy": "private",
                "description": "Handle on click\n1. On click, remove all isCurrent properties from all tertiary-nav items\n2. Add isCurrent to the item clicked"
              }
            ],
            "attributes": [
              {
                "name": "href",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The href value of the tertiary nav link",
                "fieldName": "href"
              },
              {
                "name": "isCurrent",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The current state of the tertiary nav link",
                "fieldName": "isCurrent"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-tertiary-nav-item",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8TertiaryNavItem",
            "declaration": {
              "name": "Cre8TertiaryNavItem",
              "module": "components/tertiary-nav-item/tertiary-nav-item.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-tertiary-nav-item",
            "declaration": {
              "name": "Cre8TertiaryNavItem",
              "module": "components/tertiary-nav-item/tertiary-nav-item.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8TertiaryNavItem",
              "module": "components/tertiary-nav-item/tertiary-nav-item.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/utility-nav/utility-nav.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * 1) Navigation in the header for utility items like logging into an account */ :host { margin-left: auto; } /** * Inverted utility-nav */ .cre8-c-utility-nav--inverted { --cre8-utility-nav-link-color: var(--cre8-color-content-knockout); } /** * Utility nav list */ .cre8-c-utility-nav__list { display: flex; margin: size(-2) 0 0 size(-2); padding: 0; list-style: none; /** * Slotted utility nav item */ ::slotted(cre8-utility-nav-item) { margin-left: size(2); margin-top: size(2); } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/utility-nav/utility-nav.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/utility-nav/utility-nav.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "IconOnly"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/utility-nav/utility-nav.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/utility-nav/utility-nav.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "IconOnly",
            "declaration": {
              "name": "IconOnly",
              "module": "components/utility-nav/utility-nav.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/utility-nav/utility-nav.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8UtilityNav",
            "slots": [
              {
                "description": "The utility nav items",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "inverted",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverted variant\n1) Used for dark backgrounds",
                "attribute": "inverted",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "navAriaLabel",
                "type": {
                  "text": "string"
                },
                "default": "'utility'",
                "description": "aria-label attribute to designate at name for the nav. Can be override by user",
                "attribute": "navAriaLabel"
              }
            ],
            "attributes": [
              {
                "name": "inverted",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverted variant\n1) Used for dark backgrounds",
                "fieldName": "inverted"
              },
              {
                "name": "navAriaLabel",
                "type": {
                  "text": "string"
                },
                "default": "'utility'",
                "description": "aria-label attribute to designate at name for the nav. Can be override by user",
                "fieldName": "navAriaLabel"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-utility-nav",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8UtilityNav",
            "declaration": {
              "name": "Cre8UtilityNav",
              "module": "components/utility-nav/utility-nav.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-utility-nav",
            "declaration": {
              "name": "Cre8UtilityNav",
              "module": "components/utility-nav/utility-nav.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8UtilityNav",
              "module": "components/utility-nav/utility-nav.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tooltip/tooltip.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /*------------------------------------*\\ #TOOLTIP \\*------------------------------------*/ :host { display: inline-flex; } /** * Tooltip * The main container that holds the trigger and panel */ .cre8-c-tooltip { position: relative; display: table; } /** * Tooltip panel * The container for the tooltip panel heading, content, and footer */ .cre8-c-tooltip__panel { @include cre8-typography-body-default(); opacity: 0; visibility: hidden; position: absolute; word-wrap: break-word; inset-block-start: calc(100% + #{size(1.5)}); inset-block-end: auto; inset-inline-start: 50%; inset-inline-end: auto; transform: translateX(var(--rtlTranslateX, -50%)); display: flex; flex-direction: column; gap: size(1); width: max-content; max-width: size(35); z-index: 400; color: var(--cre8-color-content-knockout); background-color: var(--cre8-color-bg-strong); border: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); border-radius: var(--cre8-border-radius-default); padding: size(1); /** * Active state for tooltip panel */ .cre8-is-active:not(.cre8-is-dynamic) &, .cre8-is-active.cre8-is-dynamic-active & { opacity: 1; visibility: visible; } /** * Tooltip panel positioned to the top of the trigger */ .cre8-c-tooltip--top & { inset-block-start: auto; inset-block-end: calc(100% + #{size(1.5)}); inset-inline-start: 50%; inset-inline-end: auto; transform: translateX(var(--rtlTranslateX, -50%)); } /** * Tooltip panel positioned to the left of the trigger */ .cre8-c-tooltip--left & { inset-block-start: 50%; inset-block-end: auto; inset-inline-start: auto; inset-inline-end: calc(100% + #{size(1.5)}); transform: translateY(-50%); } /** * Tooltip panel positioned to the right of the trigger */ .cre8-c-tooltip--right & { inset-block-start: 50%; inset-block-end: auto; inset-inline-start: calc(100% + #{size(1.5)}); inset-inline-end: auto; transform: translateY(-50%); } /** * Tooltip panel knockout */ .cre8-c-tooltip--knockout & { background-color: var(--cre8-color-bg-default); color: var(--cre8-color-content-default); } } /** * Tooltip panel arrow */ .cre8-c-tooltip__panel::before { content: ''; display: block; width: size(1.5); height: size(1.5); position: absolute; margin: auto; background-color: var(--cre8-color-bg-strong); border-block-start: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); border-inline-start: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); inset-block-start: calc((var(--cre8-border-width-default) + #{size(0.75)}) * -1); inset-inline-start: 50%; transform: translateX(var(--rtlTranslateX, -50%)) rotate(45deg); /** * Moves the tooltip panel arrow to the top of the panel */ .cre8-c-tooltip--top & { inset-block-start: auto; inset-block-end: calc((var(--cre8-border-width-default) + #{size(0.75)}) * -1); border-block-start: none; border-inline-start: none; border-block-end: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); border-inline-end: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); } /** * Moves the tooltip panel arrow to the right side of the panel */ .cre8-c-tooltip--left & { inset-block-start: 50%; inset-block-end: auto; inset-inline-start: auto; inset-inline-end: calc((var(--cre8-border-width-default) + #{size(0.75)}) * -1); border-block-start: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); border-inline-start: none; border-block-end: none; border-inline-end: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); transform: translateY(-50%) rotate(var(--rtlRotate45Inverse, 45deg)); } /** * Moves the tooltip panel arrow to the left side of the panel */ .cre8-c-tooltip--right & { inset-block-start: 50%; inset-block-end: auto; inset-inline-start: calc((var(--cre8-border-width-default) + #{size(0.75)}) * -1); inset-inline-end: auto; border-block-start: none; border-inline-start: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); border-block-end: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-strong); border-inline-end: none; transform: translateY(-50%) rotate(var(--rtlRotate45Inverse, 45deg)); } /** * Tooltip arrow knockout */ .cre8-c-tooltip--knockout & { background-color: var(--cre8-color-bg-default); } } /** * Tooltip footer * 1) The footer container in the panel */ .cre8-c-tooltip__footer { display: flex; gap: size(2); justify-content: flex-end; flex-grow: 1; } /** * Tooltip trigger * 1) Add global focus state on keyboard focus */ .cre8-c-tooltip__trigger { cursor: pointer; &:focus-visible { @include focus; } } svg { display: flex; height: size(2); width: size(2); } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/tooltip/tooltip.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tooltip/tooltip.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "DefaultIcon",
            "type": {
              "text": "object"
            },
            "default": "{ args: { linkText: 'Trouble', linkURL: '/?path=/story/cre8-components-tooltip--default', default: `<span>Something <strong>easy</strong> to get into, but hard to get out of reallyreallylongwordthatshouldbreaktomakethetextwindownotoverflow</span>`, svg: svgInfoFilled, }, }"
          },
          {
            "kind": "variable",
            "name": "Knockout",
            "type": {
              "text": "object"
            },
            "default": "{ args: { knockout: true, linkText: 'An iWitness', linkURL: '/?path=/story/cre8-components-tooltip--knockout', default: 'Someone that saw an iPhone being stolen', svg: svgInfoFilled, }, }"
          },
          {
            "kind": "variable",
            "name": "PositionTop",
            "type": {
              "text": "object"
            },
            "default": "{ args: { position: 'top', linkText: 'A plain bagel', linkURL: '/?path=/story/cre8-components-tooltip--position-top', default: 'A bagel that can fly', svg: svgInfoFilled, }, }"
          },
          {
            "kind": "variable",
            "name": "PositionLeft",
            "type": {
              "text": "object"
            },
            "default": "{ args: { position: 'left', linkText: 'An undercover cop', linkURL: '/?path=/story/cre8-components-tooltip--position-left', default: 'A policeman in bed', svg: svgInfoFilled, }, }"
          },
          {
            "kind": "variable",
            "name": "PositionRight",
            "type": {
              "text": "object"
            },
            "default": "{ args: { position: 'right', linkText: 'An umbrella', linkURL: '/?path=/story/cre8-components-tooltip--position-right', default: 'Something that goes up when the rain comes down', svg: svgInfoFilled, }, }"
          },
          {
            "kind": "variable",
            "name": "PositionDynamic",
            "type": {
              "text": "object"
            },
            "default": "{ args: { isDynamic: true, linkText: 'A URL-ologist', linkURL: '/?path=/story/cre8-components-tooltip--position-dynamic', }, }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/tooltip/tooltip.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "DefaultIcon",
            "declaration": {
              "name": "DefaultIcon",
              "module": "components/tooltip/tooltip.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Knockout",
            "declaration": {
              "name": "Knockout",
              "module": "components/tooltip/tooltip.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PositionTop",
            "declaration": {
              "name": "PositionTop",
              "module": "components/tooltip/tooltip.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PositionLeft",
            "declaration": {
              "name": "PositionLeft",
              "module": "components/tooltip/tooltip.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PositionRight",
            "declaration": {
              "name": "PositionRight",
              "module": "components/tooltip/tooltip.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "PositionDynamic",
            "declaration": {
              "name": "PositionDynamic",
              "module": "components/tooltip/tooltip.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/tooltip/tooltip.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The purpose of tooltips is to provide a tip or hint about what a tool, icon, link, or other interaction does.\nIf you need to present a call to action with perhaps a button for the user to click, then use\n[Popover](/docs/cre8-components-popover--docs) instead.\n\n##Tooltip Styles\nThere are 4 alignment options for Tooltips: Top, Bottom, Right, and Left. Default placement is Bottom, below the\nelement it is describing. Top or Bottom alignment are the the preferred placement, particularly on screens that\nhave a more narrow viewport. Tooltips utilize Global styles and are not affected by brand themes.\n\n**With icon**\n- **iconRotateDegree** & **iconFlipDirection** props are optional.\n- They are used to set up the correct dirrection for icons, for example,\narrows, caret up or caret down.\n\n##Usability Considerations\nWith the exception of icons - which should always have alt text at a minimum - the UI should never rely on\nTooltips for clarity, especially because they are not always discovered by the user. If the user cannot\nintuitively understand the interface without Tooltips, the interface should be redesigned.\n\n##How to use\n- Use Tooltips to clarify the UI element the user is interacting with, not to add additional content on the page.\nAlso, do not simply restate content on the page, for example, the title of the field.\n- Tooltips should be short and to the point. Example: \"Click X to do X\" or \"Icon Description.\" If a succinct\ndescription is not possible, the interaction element should be redesigned.\n- In a mouse-driven UI, Tooltips are triggered on hover (mouseover) and dismissed (disappear)\nwhen the user mouses away from the element. In touch UIs, a Tooltip is triggered by tapping\nand holding an item. The Tooltip is displayed as long as the user continues to hold the element.\nTap and hold is a more advanced user behavior, and further reason for not relying on Tooltips.\nA novice user may never discover tap and hold for Tooltips.",
            "name": "Cre8Tooltip",
            "slots": [
              {
                "description": "Default, unnamed slot container for Tooltip text",
                "name": "default"
              },
              {
                "description": "Named slot container for Tooltip element to trigger showing/hiding the Tooltip text",
                "name": "trigger"
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "position",
                "type": {
                  "text": "\"default\"|\"top\"|\"left\"|\"right\""
                },
                "description": "Positions the tooltip panel absolutely to the icon. Position overrides `isDynamic`.",
                "attribute": "position"
              },
              {
                "kind": "field",
                "name": "knockout",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The knockout variant for the tooltip",
                "attribute": "knockout",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "isDynamic",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The dynamic state for the tooltip. Position overrides isDynamic.",
                "attribute": "isDynamic",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "isActiveDynamic",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The dynamic active state",
                "attribute": "isActiveDynamic"
              },
              {
                "kind": "field",
                "name": "isActive",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The active state for the tooltip",
                "attribute": "isActive",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "ariaDescribes",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Accepts the ID string of the item the tooltip is referencing",
                "attribute": "ariaDescribes"
              },
              {
                "kind": "field",
                "name": "_uniqueId",
                "type": {
                  "text": "string | undefined"
                },
                "attribute": "_uniqueId"
              },
              {
                "kind": "field",
                "name": "svg",
                "type": {
                  "text": "string | undefined"
                },
                "description": "svg as a raw string\n- The icon is defined by this prop.\n- Pass in a raw svg as a String for using <cre8-icon>",
                "attribute": "svg"
              },
              {
                "kind": "field",
                "name": "iconRotateDegree",
                "type": {
                  "text": "number | undefined"
                },
                "default": "0",
                "description": "iconRotateDegree is used for <cre8-icon> to set the arrow in the correct direction",
                "attribute": "iconRotateDegree"
              },
              {
                "kind": "field",
                "name": "iconFlipDirection",
                "type": {
                  "text": "string | undefined"
                },
                "description": "iconFlipDirection is used for <cre8-icon> to set the icon in the correct direction",
                "attribute": "iconFlipDirection"
              },
              {
                "kind": "field",
                "name": "_Cre8Tooltip",
                "type": {
                  "text": "HTMLElement"
                },
                "description": "Query the tooltip panel element"
              },
              {
                "kind": "field",
                "name": "_Cre8TooltipPanel",
                "type": {
                  "text": "HTMLElement"
                },
                "description": "Query the tooltip panel element"
              },
              {
                "kind": "field",
                "name": "isRTL",
                "description": "Query the document direction value\n<br/><br/> _*This property is dynamically set_",
                "readonly": true
              },
              {
                "kind": "method",
                "name": "dynamicPosition",
                "description": "Handle all dynamic placement"
              },
              {
                "kind": "method",
                "name": "_handleKeydown",
                "privacy": "private",
                "parameters": [
                  {
                    "name": "e",
                    "type": {
                      "text": "KeyboardEvent"
                    }
                  }
                ],
                "description": "Handle Keydown\n1. If escape or tab key is struck when the tooltip is active, close it\n2. If enter or escape is keyed, toggle the tooltip open or close.\n   We need these since the click event is on a div so that accessibility reads this aloud to a user"
              },
              {
                "kind": "method",
                "name": "toggleActive",
                "description": "Set Tooltip Active State\n1. Toggle the active state between true and false\n2. If is active, set the dynamic position and custom event.\n3. If is not active, remove fire the close custom event.\n4. Toggle the active state for dynamic. This prevents a flash of the tooltip in the orginal position."
              },
              {
                "kind": "field",
                "name": "removeActive",
                "description": "Remove Active State\n1. If a specific event is fired, remove the active state."
              }
            ],
            "events": [
              {
                "name": "open",
                "type": {
                  "text": "CustomEvent"
                }
              },
              {
                "name": "close",
                "type": {
                  "text": "CustomEvent"
                }
              }
            ],
            "attributes": [
              {
                "name": "position",
                "type": {
                  "text": "\"default\"|\"top\"|\"left\"|\"right\""
                },
                "description": "Positions the tooltip panel absolutely to the icon. Position overrides `isDynamic`.",
                "fieldName": "position",
                "attribute": "position"
              },
              {
                "name": "knockout",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The knockout variant for the tooltip",
                "fieldName": "knockout",
                "attribute": "knockout"
              },
              {
                "name": "isDynamic",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The dynamic state for the tooltip. Position overrides isDynamic.",
                "fieldName": "isDynamic",
                "attribute": "isDynamic"
              },
              {
                "name": "isActiveDynamic",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The dynamic active state",
                "fieldName": "isActiveDynamic",
                "attribute": "isActiveDynamic"
              },
              {
                "name": "isActive",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "The active state for the tooltip",
                "fieldName": "isActive",
                "attribute": "isActive"
              },
              {
                "name": "ariaDescribes",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Accepts the ID string of the item the tooltip is referencing",
                "fieldName": "ariaDescribes",
                "attribute": "ariaDescribes"
              },
              {
                "name": "_uniqueId",
                "type": {
                  "text": "string | undefined"
                },
                "fieldName": "_uniqueId"
              },
              {
                "name": "svg",
                "type": {
                  "text": "string | undefined"
                },
                "description": "svg as a raw string\n- The icon is defined by this prop.\n- Pass in a raw svg as a String for using <cre8-icon>",
                "fieldName": "svg"
              },
              {
                "name": "iconRotateDegree",
                "type": {
                  "text": "number | undefined"
                },
                "default": "0",
                "description": "iconRotateDegree is used for <cre8-icon> to set the arrow in the correct direction",
                "fieldName": "iconRotateDegree"
              },
              {
                "name": "iconFlipDirection",
                "type": {
                  "text": "string | undefined"
                },
                "description": "iconFlipDirection is used for <cre8-icon> to set the icon in the correct direction",
                "fieldName": "iconFlipDirection"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-tooltip",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8Tooltip",
            "declaration": {
              "name": "Cre8Tooltip",
              "module": "components/tooltip/tooltip.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-tooltip",
            "declaration": {
              "name": "Cre8Tooltip",
              "module": "components/tooltip/tooltip.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8Tooltip",
              "module": "components/tooltip/tooltip.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/text-link/text-link.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * 1) General text link used across the product */ .cre8-c-text-link { @include cre8-typography-body-default-link(); display: inline-flex; color: var(--cre8-color-content-link); cursor: pointer; &:hover, &:focus { text-decoration: underline; color: var(--cre8-color-content-link-hover); } &:active { color: var(--cre8-color-content-link-active); } &:visited { color: var(--cre8-color-content-link-visited); } } /** * Display text link * 1) Used for items like article title links */ .cre8-c-text-link--display { color: var(--cre8-color-content-default); } /** * A secondary link list * 1) Uses a more subtle treatment than the default link list */ .cre8-c-text-link--secondary { color: var(--cre8-color-content-subtle); } /** * Inverted text link * 1) Used on dark backgrounds */ .cre8-c-text-link--inverted { color: var(--cre8-color-content-knockout); } /** * Small text link * 1) Shrink the typography size */ .cre8-c-text-link--sm { @include cre8-typography-body-small(); } /** * Text link after * 1) Container used to place items after the text link */ .cre8-c-text-link__after { margin-left: size(1); } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/text-link/text-link.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/text-link/text-link.stories.ts",
        "declarations": [
          {
            "kind": "function",
            "name": "Default",
            "parameters": [
              {
                "name": "args"
              }
            ]
          },
          {
            "kind": "function",
            "name": "Secondary"
          },
          {
            "kind": "function",
            "name": "Display"
          },
          {
            "kind": "function",
            "name": "Inverted"
          },
          {
            "kind": "function",
            "name": "Small"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "module": "components/text-link/text-link.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/text-link/text-link.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Secondary",
            "declaration": {
              "name": "Secondary",
              "module": "components/text-link/text-link.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Display",
            "declaration": {
              "name": "Display",
              "module": "components/text-link/text-link.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Inverted",
            "declaration": {
              "name": "Inverted",
              "module": "components/text-link/text-link.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Small",
            "declaration": {
              "name": "Small",
              "module": "components/text-link/text-link.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/text-link/text-link.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8TextLink",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "href",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The link URL",
                "attribute": "href"
              },
              {
                "kind": "field",
                "name": "variant",
                "type": {
                  "text": "'display' | 'secondary' | undefined"
                },
                "description": "Style variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li> **display** applies display treatment to the text link (e.g. article title link)</li>\n<li> **secondary** applies secondary treatment to the text link (e.g. non-prominent links)</li>\n</ul>\n</cre8-text-passage>",
                "attribute": "variant"
              },
              {
                "kind": "field",
                "name": "size",
                "type": {
                  "text": "'sm' | undefined"
                },
                "description": "Size variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li> **sm** renders a smaller typography preset than the default</li>\n</ul>\n</cre8-text-passage>",
                "attribute": "size"
              },
              {
                "kind": "field",
                "name": "inverted",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverted variant\n1) Used for dark backgrounds",
                "attribute": "inverted",
                "reflects": true
              }
            ],
            "attributes": [
              {
                "name": "href",
                "type": {
                  "text": "string | undefined"
                },
                "description": "The link URL",
                "fieldName": "href"
              },
              {
                "name": "variant",
                "type": {
                  "text": "'display' | 'secondary' | undefined"
                },
                "description": "Style variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li> **display** applies display treatment to the text link (e.g. article title link)</li>\n<li> **secondary** applies secondary treatment to the text link (e.g. non-prominent links)</li>\n</ul>\n</cre8-text-passage>",
                "fieldName": "variant"
              },
              {
                "name": "size",
                "type": {
                  "text": "'sm' | undefined"
                },
                "description": "Size variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li> **sm** renders a smaller typography preset than the default</li>\n</ul>\n</cre8-text-passage>",
                "fieldName": "size"
              },
              {
                "name": "inverted",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverted variant\n1) Used for dark backgrounds",
                "fieldName": "inverted"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-text-link",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8TextLink",
            "declaration": {
              "name": "Cre8TextLink",
              "module": "components/text-link/text-link.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-text-link",
            "declaration": {
              "name": "Cre8TextLink",
              "module": "components/text-link/text-link.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8TextLink",
              "module": "components/text-link/text-link.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/text-passage/text-passage-light-dom.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * 1) A passage of text (e.g. article, blog post), including uncontrolled elements * (e.g. unclassed h2, h3, ul, li, and so on). * 2) Use this file only for styling text passage and elements inside of text passage. */ cre8-text-passage, cre8-text-passage[size='default'] { @include cre8-typography-body-default(); /** * Generic h1 within text passage */ h1 { @include cre8-typography-display-small(); margin-bottom: size(1.5); } /** * Generic h2 within text passage */ h2 { @include cre8-typography-headline-default(); margin-bottom: size(1.5); } /** * Generic h3 within text passage */ h3 { @include cre8-typography-headline-small(); margin-bottom: size(1.5); } /** * Generic h4 within text passage */ h4 { @include cre8-typography-title-large(); margin-bottom: size(1.5); } /** * Generic h5 within text passage */ h5 { @include cre8-typography-meta-large(); margin-bottom: size(1.5); } /** * Generic unordered and ordered lists within text passage */ ul, ol { margin-top: 0; } /** * Unordered list within text passage */ ul { margin-left: size(2.5); padding-left: 0; } /** * Ordered list within text passage */ ol { margin-left: size(2.25); padding-left: 0; } /** * Generic link tag within text passage */ a { color: var(--cre8-color-content-link); &:hover, &:focus { text-decoration: underline; color: var(--cre8-color-content-link-hover); } } /** * Paragraph tag within text passage */ p { margin-top: 0; margin-bottom: size(3); } /** * Blockquote within text passage */ blockquote { font-style: italic; border-left: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-content-subtle); color: var(--cre8-color-content-subtle); padding-left: size(2); margin-left: 0; margin-bottom: size(2); } /** * Last item declared in the text passage * 1) Remove default margin bottom from the item */ :last-child { margin-bottom: 0; } } /** * Inverted text passage */ cre8-text-passage[inverted] { /** * Blockquote within inverted text passage */ a { color: var(--cre8-color-content-brand-knockout); &:hover, &:focus { color: var(--cre8-color-content-brand-knockout-hover); } } blockquote { color: var(--cre8-color-content-knockout); font-style: italic; border-left: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-knockout); padding-left: size(2); margin-left: 0; margin-bottom: size(2); } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/text-passage/text-passage-light-dom.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/text-passage/text-passage-light-dom.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '/design-tokens/core/scss/theming/component'; /** * 1) A passage of text (e.g. article, blog post), including uncontrolled elements * (e.g. unclassed h2, h3, ul, li, and so on). * 2) Use this file only for styling text passage and elements inside of text passage. */ cre8-text-passage, cre8-text-passage[size='default'] { @include technology.cre8-typography-body-default(); /** * Generic h1 within text passage */ h1 { @include technology.cre8-typography-display-small(); margin-bottom: size(1.5); } /** * Generic h2 within text passage */ h2 { @include technology.cre8-typography-headline-default(); margin-bottom: size(1.5); } /** * Generic h3 within text passage */ h3 { @include technology.cre8-typography-headline-small(); margin-bottom: size(1.5); } /** * Generic h4 within text passage */ h4 { @include technology.cre8-typography-title-large(); margin-bottom: size(1.5); } /** * Generic h5 within text passage */ h5 { @include technology.cre8-typography-meta-large(); margin-bottom: size(1.5); } /** * Generic unordered and ordered lists within text passage */ ul, ol { margin-top: 0; } /** * Unordered list within text passage */ ul { margin-left: size(2.5); padding-left: 0; } /** * Ordered list within text passage */ ol { margin-left: size(2.25); padding-left: 0; } /** * Generic link tag within text passage */ a { color: var(--cre8-color-content-link); &:hover, &:focus { text-decoration: underline; color: var(--cre8-color-content-link-hover); } } /** * Paragraph tag within text passage */ p { margin-top: 0; margin-bottom: size(3); } /** * Blockquote within text passage */ blockquote { font-style: italic; border-left: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-content-subtle); color: var(--cre8-color-content-subtle); padding-left: size(2); margin-left: 0; margin-bottom: size(2); } /** * Last item declared in the text passage * 1) Remove default margin bottom from the item */ :last-child { margin-bottom: 0; } } /** * Inverted text passage */ cre8-text-passage[inverted] { /** * Blockquote within inverted text passage */ a { color: var(--cre8-color-content-brand-knockout); &:hover, &:focus { color: var(--cre8-color-content-brand-knockout-hover); } } blockquote { color: var(--cre8-color-content-knockout); font-style: italic; border-left: var(--cre8-border-width-default) var(--cre8-border-style-default) var(--cre8-color-border-knockout); padding-left: size(2); margin-left: 0; margin-bottom: size(2); } } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/text-passage/text-passage-light-dom.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/text-passage/text-passage.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * !!! DO NOT USE THIS FILE for styling specific elements within text passage. * Use text-passage-ligh-dom.scss to for styling.!!! */ :host { display: inline-flex; } .cre8-c-text-passage--small { @include cre8-typography-body-small(); /** * Unordered list within small text passage */ } .cre8-c-text-passage--large { @include cre8-typography-body-large(); /** * Unordered list within small text passage */ } .cre8-c-text-passage--inverted { color: var(--cre8-color-content-knockout); } ::slotted(.header) { margin-bottom: size(1.5); } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/text-passage/text-passage.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/text-passage/text-passage.stories.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "meta",
            "type": {
              "text": "Meta"
            },
            "default": "{ title: 'cre8 Components/Text Passage', component: 'cre8-text-passage', parameters: {status: {type: 'inProgress'}}, argTypes: { size: { options: ['default', 'small', 'large'], control: {type: 'select'}, }, inverted: { control: {type: 'boolean'}, }, }, }"
          },
          {
            "kind": "variable",
            "name": "Default",
            "type": {
              "text": "Story"
            },
            "default": "{ render: (args) => html`<cre8-text-passage ${spread(args)}> <p> A text passage contains arbitrary text that might come from a CMS. It should live within a container that caps the line length of the text to avoid a straining reading experience. </p> <ul> <li>Here is a unordered list item</li> <li>Here is a unordered list item</li> <li>Here is a unordered list item</li> <li>Here is a unordered list item</li> </ul> <ol> <li>Here is a ordered list item</li> <li>Here is a ordered list item</li> <li>Here is a ordered list item</li> <li>Here is a ordered list item</li> </ol> <blockquote style=\"margin-left:20px;\"> <p>This is a quotation from something.</p> <cite>Cite source</cite> </blockquote> </cre8-text-passage>`, }"
          },
          {
            "kind": "variable",
            "name": "Small",
            "type": {
              "text": "Story"
            },
            "default": "{ render: (args) => html`<cre8-text-passage ${spread(args)} size=\"small\"> <p> A text passage contains arbitrary text that might come from a CMS. It should live within a container that caps the line length of the text to avoid a straining reading experience. </p> <ul> <li>Here is a unordered list item</li> <li>Here is a unordered list item</li> <li>Here is a unordered list item</li> <li>Here is a unordered list item</li> </ul> <ol> <li>Here is a ordered list item</li> <li>Here is a ordered list item</li> <li>Here is a ordered list item</li> <li>Here is a ordered list item</li> </ol> <blockquote style=\"margin-left:20px;\"> <p>This is a quotation from something.</p> <cite>Cite source</cite> </blockquote> </cre8-text-passage>`, }"
          },
          {
            "kind": "variable",
            "name": "Large",
            "type": {
              "text": "Story"
            },
            "default": "{ render: (args) => html`<cre8-text-passage ${spread(args)} ?inverted=${false} size=${'large'}> <p> A text passage contains arbitrary text that might come from a CMS. It should live within a container that caps the line length of the text to avoid a straining reading experience. </p> <ul> <li>Here is a unordered list item</li> <li>Here is a unordered list item</li> <li>Here is a unordered list item</li> <li>Here is a unordered list item</li> </ul> <ol> <li>Here is a ordered list item</li> <li>Here is a ordered list item</li> <li>Here is a ordered list item</li> <li>Here is a ordered list item</li> </ol> <blockquote style=\"margin-left:20px;\"> <p>This is a quotation from something.</p> <cite>Cite source</cite> </blockquote> </cre8-text-passage>`, }"
          },
          {
            "kind": "variable",
            "name": "Inverted",
            "type": {
              "text": "Story"
            },
            "default": "{ render: () => html`<div style=\"background: #000; padding: 20px;\"> <cre8-text-passage ?inverted=${true} size=${'default'}> <p> A text passage contains arbitrary text that might come from a CMS. It should live within a container that caps the line length of the text to avoid a straining reading experience. </p> <ul> <li>Here is a unordered list item</li> <li>Here is a unordered list item</li> <li>Here is a unordered list item</li> <li>Here is a unordered list item</li> </ul> <ol> <li>Here is a ordered list item</li> <li>Here is a ordered list item</li> <li>Here is a ordered list item</li> <li>Here is a ordered list item</li> </ol> <blockquote style=\"margin-left:20px;\"> <p>This is a quotation from something.</p> <cite>Cite source</cite> </blockquote> </cre8-text-passage> </div>`, }"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "meta",
              "module": "components/text-passage/text-passage.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Default",
            "declaration": {
              "name": "Default",
              "module": "components/text-passage/text-passage.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Small",
            "declaration": {
              "name": "Small",
              "module": "components/text-passage/text-passage.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Large",
            "declaration": {
              "name": "Large",
              "module": "components/text-passage/text-passage.stories.ts"
            }
          },
          {
            "kind": "js",
            "name": "Inverted",
            "declaration": {
              "name": "Inverted",
              "module": "components/text-passage/text-passage.stories.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/text-passage/text-passage.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "The text-passage component acts a general wrapper element\nfor any text content that needs to be used in your project.\n\n# How to Use\n1. Code your text passage using any of the native html text elements (p, ol, ul, blockquote, cite, etc.)\n   or other Cre8 Components like cre8-heading and wrap them with the cre8-text-passage tags.\n2. Choose between three sizes for your text content or apply inline styling if you need additional styling.\n3. For dark backgrounds, add the 'inverted' attribute to the <cre8-text-passage> tag.\n3. Your text-passage will render with brand-approved styling!\n\n\nNOTE: It is recommended that you use the cre8-heading component for any heading elements in your HTML template",
            "name": "Cre8TextPassage",
            "slots": [
              {
                "description": "The component content",
                "name": ""
              }
            ],
            "members": [
              {
                "kind": "field",
                "name": "inverted",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverted variant\n1) Used for dark backgrounds",
                "attribute": "inverted",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "size",
                "type": {
                  "text": "'small' | 'default' | 'large' | undefined"
                },
                "default": "'default'",
                "description": "Size variant\n- **small** renders smaller typography than the default variant\n- **default** renders default typography variant\n- **large** renders larger typography than the default variant",
                "attribute": "size"
              }
            ],
            "attributes": [
              {
                "name": "inverted",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Inverted variant\n1) Used for dark backgrounds",
                "fieldName": "inverted"
              },
              {
                "name": "size",
                "type": {
                  "text": "'small' | 'default' | 'large' | undefined"
                },
                "default": "'default'",
                "description": "Size variant\n- **small** renders smaller typography than the default variant\n- **default** renders default typography variant\n- **large** renders larger typography than the default variant",
                "fieldName": "size"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-text-passage",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8TextPassage",
            "declaration": {
              "name": "Cre8TextPassage",
              "module": "components/text-passage/text-passage.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-text-passage",
            "declaration": {
              "name": "Cre8TextPassage",
              "module": "components/text-passage/text-passage.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8TextPassage",
              "module": "components/text-passage/text-passage.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/utility-nav-item/utility-nav-item.module.ts",
        "declarations": [
          {
            "kind": "variable",
            "name": "styles",
            "default": "css`@import '../../design-tokens/core/scss/theming/component'; /** * 1) List item that contains a link/button within the utility nav */ .cre8-c-utility-nav__item { margin: 0; padding: 0; } /** * Utility nav link */ .cre8-c-utility-nav__link { display: flex; @include cre8-typography-label-default; border: none; background: none; appearance: none; padding: 0; text-align: left; color: var(--cre8-utility-nav-link-color, var(--cre8-color-content-brand)); cursor: pointer; transition: color var(--cre8-anim-fade-quick) var(--cre8-anim-ease); &:hover, &:focus { color: var(--cre8-color-content-brand-hover); } } /** * Utility nav icon * 1) Pass properties down to icon component */ cre8-icon-legacy { --cre8-icon-height: 1.5rem; /* 1 */ --cre8-icon-width: 1.5rem; /* 1 */ } /** * Utility nav icon directly after utility nav text * 1) Create space between text and icon */ .cre8-c-utility-nav__text + cre8-icon-legacy { margin-left: size(1); /* 1 */ } /** * Utility nav text directly after utility nav icon * 1) Create space between text and icon */ cre8-icon-legacy + .cre8-c-utility-nav__text { margin-left: size(1); /* 1 */ } `"
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "styles",
              "module": "components/utility-nav-item/utility-nav-item.module.ts"
            }
          }
        ]
      },
      {
        "kind": "javascript-module",
        "path": "components/utility-nav-item/utility-nav-item.ts",
        "declarations": [
          {
            "kind": "class",
            "description": "",
            "name": "Cre8UtilityNavItem",
            "members": [
              {
                "kind": "field",
                "name": "hideText",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Hide text toggle\n1) Visually hides the text so screenreaders can still read for accessibility when set to true.",
                "attribute": "hideText",
                "reflects": true
              },
              {
                "kind": "field",
                "name": "href",
                "type": {
                  "text": "string | undefined"
                },
                "description": "URL of the utility nav item",
                "attribute": "href"
              },
              {
                "kind": "field",
                "name": "iconName",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Icon name",
                "attribute": "iconName"
              },
              {
                "kind": "field",
                "name": "iconPosition",
                "type": {
                  "text": "'before' | 'after' | undefined"
                },
                "default": "undefined",
                "description": "Icon position\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**before** places the icon before the text</li>\n<li>**after** places the icon after the text</li>\n</ul>\n</cre8-text-passage>",
                "attribute": "iconPosition"
              },
              {
                "kind": "field",
                "name": "text",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Text of the utility nav item",
                "attribute": "text"
              }
            ],
            "attributes": [
              {
                "name": "hideText",
                "type": {
                  "text": "boolean | undefined"
                },
                "description": "Hide text toggle\n1) Visually hides the text so screenreaders can still read for accessibility when set to true.",
                "fieldName": "hideText"
              },
              {
                "name": "href",
                "type": {
                  "text": "string | undefined"
                },
                "description": "URL of the utility nav item",
                "fieldName": "href"
              },
              {
                "name": "iconName",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Icon name",
                "fieldName": "iconName"
              },
              {
                "name": "iconPosition",
                "type": {
                  "text": "'before' | 'after' | undefined"
                },
                "default": "undefined",
                "description": "Icon position\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**before** places the icon before the text</li>\n<li>**after** places the icon after the text</li>\n</ul>\n</cre8-text-passage>",
                "fieldName": "iconPosition"
              },
              {
                "name": "text",
                "type": {
                  "text": "string | undefined"
                },
                "description": "Text of the utility nav item",
                "fieldName": "text"
              }
            ],
            "superclass": {
              "name": "Cre8Element",
              "module": "/components/cre8-element"
            },
            "tagName": "cre8-utility-nav-item",
            "customElement": true
          }
        ],
        "exports": [
          {
            "kind": "js",
            "name": "Cre8UtilityNavItem",
            "declaration": {
              "name": "Cre8UtilityNavItem",
              "module": "components/utility-nav-item/utility-nav-item.ts"
            }
          },
          {
            "kind": "custom-element-definition",
            "name": "cre8-utility-nav-item",
            "declaration": {
              "name": "Cre8UtilityNavItem",
              "module": "components/utility-nav-item/utility-nav-item.ts"
            }
          },
          {
            "kind": "js",
            "name": "default",
            "declaration": {
              "name": "Cre8UtilityNavItem",
              "module": "components/utility-nav-item/utility-nav-item.ts"
            }
          }
        ]
      }
    ]
  },
  "developer_profiles": [
    {
      "id": "dev_001",
      "name": "Sarah Chen",
      "role": "Senior Frontend Developer",
      "team": "Platform UI",
      "hire_date": "2023-03-15",
      "productivity_metrics": {
        "commits_per_week": 18,
        "code_review_participation": 85,
        "feature_completion_rate": 92,
        "bug_fix_rate": 2.3,
        "mentoring_hours": 4
      },
      "skill_levels": {
        "react": 9,
        "typescript": 8,
        "css": 7,
        "testing": 6,
        "accessibility": 8
      },
      "recent_struggles": [],
      "learning_recommendations": ["Advanced Testing Patterns", "Performance Optimization"]
    },
    {
      "id": "dev_002",
      "name": "Marcus Rodriguez",
      "role": "Junior Full Stack Developer",
      "team": "Customer Experience",
      "hire_date": "2024-10-01",
      "productivity_metrics": {
        "commits_per_week": 8,
        "code_review_participation": 45,
        "feature_completion_rate": 67,
        "bug_fix_rate": 4.1,
        "mentoring_hours": 0
      },
      "skill_levels": {
        "javascript": 5,
        "node": 4,
        "react": 3,
        "sql": 6,
        "git": 4
      },
      "recent_struggles": ["Async/await patterns", "Component state management", "Code review feedback incorporation"],
      "learning_recommendations": ["React State Management Fundamentals", "JavaScript Promises & Async Patterns"]
    },
    {
      "id": "dev_003",
      "name": "Jennifer Kim",
      "role": "Backend Developer",
      "team": "Data Infrastructure",
      "hire_date": "2024-01-20",
      "productivity_metrics": {
        "commits_per_week": 12,
        "code_review_participation": 78,
        "feature_completion_rate": 88,
        "bug_fix_rate": 1.8,
        "mentoring_hours": 2
      },
      "skill_levels": {
        "python": 8,
        "postgresql": 7,
        "docker": 6,
        "aws": 5,
        "testing": 7
      },
      "recent_struggles": ["Kubernetes deployment", "Performance optimization"],
      "learning_recommendations": ["Kubernetes Fundamentals", "Database Query Optimization"]
    },
    {
      "id": "dev_004",
      "name": "Alex Thompson",
      "role": "DevOps Engineer",
      "team": "Platform Infrastructure",
      "hire_date": "2023-08-10",
      "productivity_metrics": {
        "commits_per_week": 15,
        "code_review_participation": 90,
        "feature_completion_rate": 95,
        "bug_fix_rate": 1.2,
        "mentoring_hours": 6
      },
      "skill_levels": {
        "terraform": 9,
        "kubernetes": 8,
        "python": 7,
        "monitoring": 9,
        "security": 8
      },
      "recent_struggles": [],
      "learning_recommendations": ["Advanced Security Practices", "Cost Optimization"]
    }
  ],
  "learning_paths": [
    {
      "id": "react_fundamentals",
      "title": "React Fundamentals",
      "difficulty": "beginner",
      "estimated_hours": 20,
      "modules": ["Components and JSX", "Props and State"]
    }
  ]
}